<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>⽣命周期内的拦截过滤与监听</title>
      <link href="/2022/06/24/%E2%BD%A3%E5%91%BD%E5%91%A8%E6%9C%9F%E5%86%85%E7%9A%84%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E5%90%AC/"/>
      <url>/2022/06/24/%E2%BD%A3%E5%91%BD%E5%91%A8%E6%9C%9F%E5%86%85%E7%9A%84%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="⽣命周期内的拦截过滤与监听"><a href="#⽣命周期内的拦截过滤与监听" class="headerlink" title="⽣命周期内的拦截过滤与监听"></a>⽣命周期内的拦截过滤与监听</h1><h2 id="1-Servlet-域对象与属性变化监听"><a href="#1-Servlet-域对象与属性变化监听" class="headerlink" title="1.Servlet 域对象与属性变化监听"></a>1.Servlet 域对象与属性变化监听</h2><h3 id="⼀、监听器定义与实现"><a href="#⼀、监听器定义与实现" class="headerlink" title="⼀、监听器定义与实现"></a>⼀、监听器定义与实现</h3><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>Servlet 监听器是 Servlet 规范中定义的⼀种特殊类，⽤于监听 ServletContext、HttpSession 和 ServletRequest 等作⽤域对象的创建与销毁事件，以及监听这些作⽤域对象中属性发⽣修改的事件。监听器使⽤了设计模式中的观察者模式，它关注特定事物的创建、销毁以及变化并做出回调动作，因此监听器具有<strong>异步</strong>的特性。</p><p>Servlet Listener 监听三⼤域对象的创建和销毁事件，三⼤对象分别是：</p><ol><li>ServletContext Listener：application 级别，整个应⽤只存在⼀个，所有⽤户使⽤⼀个 ServletContext</li><li>HttpSession Listener：session 级别，同⼀个⽤户的浏览器开启与关闭⽣命周期内使⽤的是同⼀个 session</li><li>ServletRequest Listener：request 级别，每⼀个 HTTP 请求为⼀个 request</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/iZywFV.png"></p><p>除了监听域对象的创建和销毁，还可以监听域对象中属性发⽣修改的事件。</p><ul><li>HttpSessionAttributeListener</li><li>ServletContextAttributeListener</li><li>ServletRequestAttributeListener</li></ul><h4 id="1-2-使⽤场景"><a href="#1-2-使⽤场景" class="headerlink" title="1.2 使⽤场景"></a>1.2 使⽤场景</h4><p>Servlet 规范设计监听器的作⽤是在事件发⽣前、发⽣后进⾏⼀些处理，⼀般可以⽤来统计在线⼈数和在线⽤户、统计⽹站访问量、系统启动时初始化信息等。</p><h4 id="1-3-监听器的实现"><a href="#1-3-监听器的实现" class="headerlink" title="1.3 监听器的实现"></a>1.3 监听器的实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomListener</span> <span class="token keyword">implements</span>  <span class="token class-name">ServletContextListener</span><span class="token punctuation">,</span> <span class="token class-name">ServletRequestListener</span><span class="token punctuation">,</span> <span class="token class-name">HttpSessionListener</span><span class="token punctuation">,</span><span class="token class-name">ServletRequestAttributeListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============context创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============context销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" ++++++++++++++++++request监听器：销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" ++++++++++++++++++request监听器：创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------session创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------session销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> srae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------attributeAdded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> srae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------attributeRemoved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> srae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------attributeReplaced"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现<strong>ServletRequestListener 接⼝</strong>，并重写 requestDestroyed 销毁和 requestInitialized ⽅法。⼀次 ServletRequest 的 requestInitialized ⽅法和 requestDestroyed 销毁⽅法的执⾏代表 1 次请求的接收与处理完毕。所以⽐较适合⽹站资源被访问次数的统计。</li><li>实现<strong>HttpSessionListener 接⼝</strong>，并重写 sessionInitialized 初始化和 sessionDestroyed 销毁⽅法， 可以监听 session 会话的开启与销毁（⽤户的上线与下线）。⽐如：可以⽤来实现在线⽤户数量的统计。</li><li>实现<strong>ServletContextListener 接⼝</strong>，并重写 contextInitialized 初始化和 contextDestroyed 销毁⽅法，可以监听全局应⽤的初始化和销毁。⽐如：在系统启动的时候，初始化⼀些数据到内存中供后续使⽤。</li><li>实现<strong>ServletRequestAttributeListener 接⼝</strong>（或 HttpSessionAttributeListener 或 ServletContextAttributeListener）。可以监听到对应的作⽤域内数据属性的 attributeAdded 新增、attributeRemoved 删除、attributeReplaced 替换等动作。</li></ul><h4 id="1-4-全局-Servlet-组件扫描注解"><a href="#1-4-全局-Servlet-组件扫描注解" class="headerlink" title="1.4 全局 Servlet 组件扫描注解"></a>1.4 全局 Servlet 组件扫描注解</h4><p>在启动类中加⼊**@ServletComponentScan**进⾏⾃动注册即可。</p><h3 id="⼆、监听器测试"><a href="#⼆、监听器测试" class="headerlink" title="⼆、监听器测试"></a>⼆、监听器测试</h3><p>定义如下的 Controller 进⾏访问测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//操作 request 的 attribute</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//操作 session 的 attribute</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello world---"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当应⽤启动的时候。“==============context 创建”被打印出来，说明触发 contextInitialized 监听函数</li><li>访问<code>http://localhost:8888/hello</code>，“ ++++++++++++++++++request 监听器：创建”被打印出来，说明 requestInitialized 回调函数被触发</li><li>紧接着“—————-session 创建”被打印出来，说明 sessionCreated 监听函数被触发</li><li>继续执⾏ request.setAttribute(“a”, “a”);，“—————-attributeAdded”被打印出来，说明 attributeAdded 监听函数被触发</li><li>继续执⾏ request.setAttribute(“a”, “b”);“—————-attributeReplaced”被打印出来，说明 attributeReplaced 监听函数被触发</li><li>继续执⾏完成 request.removeAttribute(“a”);“—————-attributeRemoved”被打印出来，说明 attributeRemoved 监听函数被触发</li><li>继续执⾏ session.invalidate();，“—————-session 销毁”被打印出来，说明 sessionDestroyed 监听函数被触发</li><li>将 controller ⽅法执⾏完成，”++++++++++++++++++request 监听器：销毁”被打印出来，说明 requestDestroyed 监听函数被触发</li><li>当停掉应⽤的时候，”==============context 销毁”被打印出来，说明 contextDestroyed 监听函数被触发</li></ul><p>从上⾯的打印结果看：作⽤域范围是 context ⼤于 request ⼤于 sesion，实际上并不是。因为我们⼿动调⽤了 session.invalidate();，session 才会被销毁。正常情况下 session 的销毁是由 servlet 容器根据 session 超时时间等因素来控制的。</p><p><strong>所以正常的作⽤域⽣命周期 ServletContext &gt; HttpSession &gt; request</strong></p><blockquote><p>在以上的监听测试中，会有⼀些多余的监听⽇志被打印，是 SpringBoot 系统默认帮我们做⼀些属性的添加与删除设置，从⽽触发监听，可以忽略掉。</p></blockquote><h2 id="2-Servlet-过滤器的实现"><a href="#2-Servlet-过滤器的实现" class="headerlink" title="2.Servlet 过滤器的实现"></a>2.Servlet 过滤器的实现</h2><h3 id="⼀、过滤器"><a href="#⼀、过滤器" class="headerlink" title="⼀、过滤器"></a>⼀、过滤器</h3><h4 id="1-1-定义-1"><a href="#1-1-定义-1" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>Servlet 过滤器是可⽤于 Servlet 编程的 Java 类，⽬的：</p><ul><li>在客户端的请求访问后端资源之前，拦截这些请求。</li><li>在服务器的响应发送回客户端之前，处理这些响应。</li></ul><h4 id="1-2-使⽤场景-1"><a href="#1-2-使⽤场景-1" class="headerlink" title="1.2 使⽤场景"></a>1.2 使⽤场景</h4><p>在实际的应⽤开发中，我们经常使⽤过滤器做以下⼀些事情：</p><ul><li>基于⼀定的授权逻辑，对 HTTP 请求进⾏过滤，从⽽保证数据访问的安全。⽐如：判断请求的来源 IP 是否在系统⿊名单中</li><li>对于⼀些经过加密的 HTTP 请求数据，进⾏统⼀解密，⽅便后端资源进⾏业务处理</li><li>或者我们社交应⽤经常需要的敏感词过滤，也可以使⽤过滤器，将触发敏感词的⾮法请求过滤掉</li></ul><p>过滤器主要的特点在于：<strong>⼀是可以过滤所有请求，⼆是它能够改变请求的数据内容</strong>。</p><h4 id="1-3-过滤器的实现"><a href="#1-3-过滤器的实现" class="headerlink" title="1.3 过滤器的实现"></a>1.3 过滤器的实现</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/5uyMA7.png"></p><h5 id="注册⽅式⼀-利⽤-WebFilter-注解配置"><a href="#注册⽅式⼀-利⽤-WebFilter-注解配置" class="headerlink" title="注册⽅式⼀:利⽤ WebFilter 注解配置"></a>注册⽅式⼀:利⽤ WebFilter 注解配置</h5><p><strong>@WebFilter</strong> 是 Servlet3.0 新增的注解，原先实现过滤器，需要在 web.xml 中进⾏配置，⽽现在通过此注解，启动启动时会⾃动扫描⾃动注册。</p><p>编写 Filter 类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注册器名称为customFilter,拦截的url为所有</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName<span class="token operator">=</span><span class="token string">"customFilter"</span><span class="token punctuation">,</span>urlPatterns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"/*"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"filter 初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span>response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"customFilter 请求处理之前----doFilter⽅法之前过滤请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对request、response进⾏⼀些预处理</span>        <span class="token comment">//链路 直接传给下⼀个过滤器</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"customFilter 请求处理之后----doFilter⽅法之后处理响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"filter 销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在启动类加⼊**@ServletComponentScan**注解即可。</p><p>使⽤这种⽅法当注册多个过滤器时，⽆法指定过滤器的先后执⾏顺序。原本使⽤ web.xml 配置过滤器时，是可指定执⾏顺序的，但使⽤ @WebFilter 时，没有这个配置属性的(需要配合@Order 进⾏)，所以接下来介绍下通过 FilterRegistrationBean 进⾏过滤器的注册。</p><blockquote><p><strong>–⼩技巧–</strong></p><p><strong>通过对过滤器名称的指定，进⾏顺序的约定，⽐如 LogFilter 和 AuthFilter，此时 AuthFilter 就会⽐ LogFilter 先执⾏，因为⾸字⺟ A ⽐ L 排序靠前。</strong></p></blockquote><h5 id="注册⽅式⼆：FilterRegistrationBean-⽅式"><a href="#注册⽅式⼆：FilterRegistrationBean-⽅式" class="headerlink" title="注册⽅式⼆：FilterRegistrationBean ⽅式"></a>注册⽅式⼆：FilterRegistrationBean ⽅式</h5><p><strong>FilterRegistrationBean</strong>是 SpringBoot 提供的，此类提供 setOrder ⽅法，可以为 filter 设置排序值，让 Spring 在注册 WebFilter 之前排序后再依次注册。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterRegistration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Filter可以new，也可以使⽤依赖注⼊Bean</span>        registration<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//过滤器名称</span>        registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"customFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//拦截路径</span>        registration<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置顺序</span>        registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registration<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要注册多个过滤器，就注册多个 FilterRegistrationBean 即可。启动后效果和第⼀种是⼀样的。可以访问 应⽤内的任意资源进⾏过滤器测试。</p><h3 id="⼆、servlet"><a href="#⼆、servlet" class="headerlink" title="⼆、servlet"></a>⼆、servlet</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>Java 程序员⼗⼏年前做 Web 开发的时候，所有的请求都是由 Servlet 来接受并响应的。每来⼀个请求，就要写⼀个 Servlet。 这种⽅式很麻烦，⼤家就在想能不能根据请求的路径以及参数不同，映射到不同的⽅法上去执⾏，这样 就可以在⼀个 Servlet 类⾥⾯处理多个请求，每个请求就是⼀个⽅法。这个思想后来就逐渐发展为 struts、SpringMVC 等框架。</p><h4 id="2-2-使⽤场景"><a href="#2-2-使⽤场景" class="headerlink" title="2.2 使⽤场景"></a>2.2 使⽤场景</h4><p>⽬前来看，Servlet 使⽤的场景已经被 SpringMVC 封装架构全⾯覆盖，⼏乎没有什么需要使⽤原始 Servlet 进⾏开发的场景。但是不排除，⽼项⽬向 SpringBoot 项⽬迁移融合，需要⽀持 Servlet 的情况， 作为基础也是有必要的。</p><h4 id="2-3-实现"><a href="#2-3-实现" class="headerlink" title="2.3 实现"></a>2.3 实现</h4><p>我们来看⼀下在 SpringBoot ⾥⾯如何实现 Servlet 的编写和使⽤。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstServlet"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">"/firstServlet"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"firstServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"firstServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在启动类加⼊@ServletComponentScan 注解即可。</p><h2 id="3-Spring-拦截器及请求链路说明"><a href="#3-Spring-拦截器及请求链路说明" class="headerlink" title="3. Spring 拦截器及请求链路说明"></a>3. Spring 拦截器及请求链路说明</h2><h3 id="⼀、拦截器-Interceptor"><a href="#⼀、拦截器-Interceptor" class="headerlink" title="⼀、拦截器 Interceptor"></a>⼀、拦截器 Interceptor</h3><p>在 Servlet 规范中并没有拦截器的概念，它是在 Spring 框架内衍⽣出来的。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/msYIEY.png"></p><p>Spring 中拦截器有三个⽅法：</p><ul><li>preHandle 表示被拦截的 URL 对应的控制层⽅法，执⾏前的⾃定义处理逻辑</li><li>postHandle 表示被拦截的 URL 对应的控制层⽅法，执⾏后的⾃定义处理逻辑，此时还未将 modelAndView 进⾏⻚⾯渲染</li><li>afterCompletion 表示此时 modelAndView 已做⻚⾯渲染，执⾏拦截器的⾃定义处理</li></ul><h3 id="⼆、拦截器与过滤器的核⼼区别"><a href="#⼆、拦截器与过滤器的核⼼区别" class="headerlink" title="⼆、拦截器与过滤器的核⼼区别"></a>⼆、拦截器与过滤器的核⼼区别</h3><p>从请求处理的⽣命周期上看，拦截器 Interceptor 和过滤器 filter 的作⽤是类似的。过滤器能做的事情，拦截器⼏乎也都能做。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/TVCLP4.png"></p><p>但是⼆者使⽤场景还是有⼀些区别的：</p><ul><li>规范不同：Filter 是在 Servlet 规范中定义的组件，在 servlet 容器内⽣效。⽽拦截器是 Spring 框架⽀持的，在 Spring 上下⽂中⽣效。</li><li>拦截器可以获取并使⽤ Spring IOC 容器中的 bean，但过滤器就不⾏。因为过滤器是 Servlet 的组件， ⽽ IOC 容器的 bean 是 Spring 框架内使⽤，拦截器恰恰是 Spring 框架内衍⽣出来的。</li><li>拦截器可以访问 Spring 上下⽂值对象，如 ModelAndView，过滤器不⾏。基于与上⼀点同样的原 因。</li><li>过滤器在进⼊ servlet 容器之前处理请求，拦截器在 servlet 容器之内处理请求。过滤器⽐拦截器的粒度更⼤，⽐较适合系统级别的所有 API 的处理动作。⽐如：权限认证，Spring Security 就⼤量的使⽤了过滤器。</li><li>拦截器相⽐于过滤器粒度更⼩，更适合分模块、分范围的统⼀业务逻辑处理。⽐如：分模块的、分业务的记录审计⽇志。</li></ul><p>⽐如：我们在 Filter 中使⽤注解，注⼊⼀个测试 service，结果为 null。因为过滤器⽆法使⽤ Spring IOC 容器 bean。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/U7z1y4.png"></p><h3 id="三、拦截器的实现"><a href="#三、拦截器的实现" class="headerlink" title="三、拦截器的实现"></a>三、拦截器的实现</h3><p>编写⾃定义拦截器类，此处⽤⼀个简单的例⼦让⼤家了解拦截器的⽣命周期。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">TestService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: ⾃定义拦截器类，了解拦截器的⽣命周期* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">TestService</span> testService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"preHandle:请求前调⽤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>testService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回 false 则请求中断</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"postHandle:请求后调⽤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterCompletion:请求调⽤完成后回调⽅法，即在视图渲染完成后回调"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现 WebMvcConfigurer 接⼝完成拦截器的注册。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 注册拦截器,废弃：public class MyWebMvcConfigurer extendsWebMvcConfigurerAdapter* @author: syhans* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> excludePath <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/static"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">CustomHandlerInterceptor</span> customHandlerInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//注册拦截器 拦截规则</span>        <span class="token comment">//多个拦截器时 以此添加 执⾏顺序按添加顺序</span>      registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>customHandlerInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们在 CustomHandlerInterceptor ，注⼊⼀个测试 service，结果是可以正确依赖注⼊并使⽤该 Service 的。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/YlDm2d.png"></p><h3 id="四、请求链路说明"><a href="#四、请求链路说明" class="headerlink" title="四、请求链路说明"></a>四、请求链路说明</h3><p>随便请求⼀个系统内的 API（因为我们配置的过滤器拦截器拦截所有请求），通过输出结果分析⼀下拦 截器、过滤器中各接⼝函数的执⾏顺序。</p><pre class="line-numbers language-Plain" data-language="Plain"><div class="caption"><span>Text</span></div><code class="language-Plain">CustomFilter : customFilter 请求处理之前----doFilter⽅法之前过滤请求CustomHandlerInterceptor : preHandle:请求前调⽤CustomHandlerInterceptor : postHandle:请求后调⽤CustomHandlerInterceptor : afterCompletion:请求调⽤完成后回调⽅法，即在视图渲染完成后回调CustomFilter : customFilter 请求处理之后----doFilter⽅法之后处理响应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求链路调⽤顺序图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/tlzhE7.png"></p><h2 id="4-⾃定义事件的发布与监听"><a href="#4-⾃定义事件的发布与监听" class="headerlink" title="4.⾃定义事件的发布与监听"></a>4.⾃定义事件的发布与监听</h2><h3 id="⼀、事件监听介绍"><a href="#⼀、事件监听介绍" class="headerlink" title="⼀、事件监听介绍:"></a>⼀、事件监听介绍:</h3><h4 id="1-1-事件监听的⻆⾊"><a href="#1-1-事件监听的⻆⾊" class="headerlink" title="1.1 事件监听的⻆⾊"></a>1.1 事件监听的⻆⾊</h4><p>⾸先我们要理解事件监听中需要的⼏个⻆⾊</p><ul><li>事件发布者 （即事件源）</li><li>事件监听者</li><li>事件本身</li></ul><h4 id="1-2-事件监听的使⽤场景"><a href="#1-2-事件监听的使⽤场景" class="headerlink" title="1.2 事件监听的使⽤场景"></a>1.2 事件监听的使⽤场景</h4><p>举⼀个简单的例⼦：⽐如居委会发布停⽔通知。居委会就是事件源、停⽔就是事件本身、该居委会的辖区居⺠就是事件监听者。这个例⼦，有这样⼏个特点：</p><ul><li>异步处理：居委会⼯作⼈员发布通知之后，就可以去忙别的⼯作了，不会原地等待所有居⺠的反馈。</li><li>解耦：居委会和居⺠之间是解耦的，互相不⼲扰对⽅的⼯作状态与⽣活状态。</li><li>不规律性：停⽔事件发⽣频率是不规律的，触发规则相对随机。</li></ul><p>当你在⼀个系统的业务需求中，满⾜上⾯的⼏个特点中的 2 点，就应该考虑使⽤事件监听机制实现业务需求。</p><p>实现事件监听机制有很多⽅法，⽐如：</p><ul><li>使⽤消息队列中间件的发布订阅模式</li><li>JDK ⾃带的 java.util.EventListener</li><li>Spring 环境下的实现事件发布监听的⽅法</li></ul><h3 id="⼆、代码具体实现"><a href="#⼆、代码具体实现" class="headerlink" title="⼆、代码具体实现"></a>⼆、代码具体实现</h3><h4 id="2-1-⾃定义事件"><a href="#2-1-⾃定义事件" class="headerlink" title="2.1 ⾃定义事件"></a>2.1 ⾃定义事件</h4><p>继承⾃ ApplicationEvent 抽象类，然后定义⾃⼰的构造器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件:继承ApplicationEvent抽象类，并定义⾃⼰的构造器* @author: syhan* @date: 2022-04-04**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-⾃定义事件监听器"><a href="#2-2-⾃定义事件监听器" class="headerlink" title="2.2 ⾃定义事件监听器"></a>2.2 ⾃定义事件监听器</h4><p><strong>springboot 进⾏事件监听有四种⽅式</strong></p><ol><li><p>写代码向 ApplicationContext 中添加监听器</p></li><li><p>使⽤ Component 注解将监听器装载⼊ spring 容器</p></li><li><p>在 application.properties 中配置监听器</p></li><li><p>通过@EventListener 注解实现事件监听</p></li></ol><h5 id="⽅式-1"><a href="#⽅式-1" class="headerlink" title="⽅式 1"></a>⽅式 1</h5><p>⾸先创建 MyListener1 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件监听器⽅式1：实现ApplicationListener接⼝* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener1</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 SpringBoot 应⽤启动类中获取 ConfigurableApplicationContext 上下⽂，装载监听</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ConfigurableApplicationContext上下⽂</span>        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//装载监听</span>        context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="⽅式-2（推荐）"><a href="#⽅式-2（推荐）" class="headerlink" title="⽅式 2（推荐）"></a>⽅式 2（推荐）</h5><p>创建 MyListener2 类，并使⽤@Component 注解将该类装载⼊ spring 容器中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件监听器⽅式2：使⽤@Component注解将该类装载⼊spring容器中* @author: mqxu* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener2</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="⽅式-3"><a href="#⽅式-3" class="headerlink" title="⽅式 3"></a>⽅式 3</h5><p>⾸先创建 MyListener3 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件监听器⽅式3：在application.properties中配置监听* @author: mqxu* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener3</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 application.yml 中配置监听</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token operator">:</span>listener<span class="token operator">:</span>   classes<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span>MyListener3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="⽅式-4（推荐）"><a href="#⽅式-4（推荐）" class="headerlink" title="⽅式 4（推荐）"></a>⽅式 4（推荐）</h5><p>创建 MyListener4 类，该类⽆需实现 ApplicationListener 接⼝，使⽤@EventListener 装饰具体⽅法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description: ⾃定义事件监听器⽅式4：使⽤@EventListener装饰具体⽅法 * @author: syhan * @date: 2022-04-04 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener4</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@EventListener</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试监听事件的发布"><a href="#三、测试监听事件的发布" class="headerlink" title="三、测试监听事件的发布"></a>三、测试监听事件的发布</h3><p>有了 applicationContext，想在哪发布事件就在哪发布事件，我们在启动主类发布事件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ConfigurableApplicationContext上下⽂</span>        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//装载监听</span>        context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发布事件</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span><span class="token string">"测试事件"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动后，⽇志打印如下。（下⾯截图是在启动类发布事件后的截图，在单元测试⾥⾯监听器 1 监听不到，执⾏顺序问题）：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/EkW0TY.png"></p><p>由⽇志打印可以看出，SpringBoot 四种事件的实现⽅式监听是有序的。⽆论执⾏多少次都是这个顺序。</p><h2 id="5-应⽤启动的监听"><a href="#5-应⽤启动的监听" class="headerlink" title="5.应⽤启动的监听"></a>5.应⽤启动的监听</h2><h3 id="⼀、简介"><a href="#⼀、简介" class="headerlink" title="⼀、简介"></a>⼀、简介</h3><p>SpringBoot 提供了两个接⼝：CommandLineRunner、ApplicationRunner，⽤于启动应⽤时做特殊处理，这些代码会在 SpringApplication 的 run()⽅法运⾏完成之前被执⾏。 相对于之前介绍的 Spring 的 ApplicationListener 接⼝⾃定义监听器、Servlet 的 ServletContextListener 监听器。</p><p><strong>使⽤⼆者的好处在于，可以⽅便地使⽤应⽤启动参数，根据参数不同做不同的初始化操作。</strong></p><h3 id="⼆、常⽤场景介绍"><a href="#⼆、常⽤场景介绍" class="headerlink" title="⼆、常⽤场景介绍"></a>⼆、常⽤场景介绍</h3><p>实现 CommandLineRunner、ApplicationRunner 接⼝，通常⽤于应⽤启动前的特殊代码执⾏，⽐如：</p><ul><li>将系统常⽤的数据加载到内存</li><li>应⽤上⼀次运⾏的垃圾数据清理</li><li>系统启动成功后的通知的发送</li></ul><h3 id="三、⼩实验"><a href="#三、⼩实验" class="headerlink" title="三、⼩实验"></a>三、⼩实验</h3><h4 id="通过-Component-定义⽅式实现"><a href="#通过-Component-定义⽅式实现" class="headerlink" title="通过@Component 定义⽅式实现"></a>通过@Component 定义⽅式实现</h4><p>CommandLineRunner：参数是字符串数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandLineStartupRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CommandLineStartupRunner传⼊参数：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ApplicationRunner：参数被放⼊ ApplicationArguments，通过 getOptionNames()、 getOptionValues()、getSourceArgs()获取参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppStartupRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ApplicationRunner参数名称: &#123;&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">getOptionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ApplicationRunner参数值: &#123;&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ApplicationRunner参数: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过-Bean-定义⽅式实现"><a href="#通过-Bean-定义⽅式实现" class="headerlink" title="通过@Bean 定义⽅式实现"></a>通过@Bean 定义⽅式实现</h4><p>这种⽅式可以指定执⾏顺序，注意前两个 Bean 是 CommandLineRunner，最后⼀个 Bean 是 ApplicationRunner 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>runner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description:* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">runner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommandLineRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BeanCommandLineRunner run1()"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">runner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommandLineRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BeanCommandLineRunner run2()"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">runner3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BeanApplicationRunner run3()"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、执⾏测试"><a href="#四、执⾏测试" class="headerlink" title="四、执⾏测试"></a>四、执⾏测试</h3><p>在启动配置中加⼊如下参数，保存后启动应⽤</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/LKrNlw.png"></p><p>测试输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Bf5dJ7.png"></p><p>从测试结果上看</p><ul><li>ApplicationRunner 执⾏优先级⾼于 CommandLineRunner</li><li>以 Bean 的形式运⾏的 Runner 优先级要低于 Component 注解加 implements Runner 接⼝的⽅式</li><li>Order 注解只能保证同类的 CommandLineRunner 或 ApplicationRunner 的执⾏顺序，不能跨类保证顺序</li></ul><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>CommandLineRunner、ApplicationRunner 的核⼼⽤法是⼀致的，就是⽤于应⽤启动前的特殊代码执⾏。ApplicationRunner 的执⾏顺序先于 CommandLineRunner；ApplicationRunner 将参数封装成了对 象，提供了获取参数名、参数值等⽅法，操作上会⽅便⼀些。</p><h2 id="6-类初始化监听"><a href="#6-类初始化监听" class="headerlink" title="6.类初始化监听"></a>6.类初始化监听</h2><p>有些初始化动作，并不⼀定在应⽤初始化的时候进⾏，因为这个时候初始化，经常有些 Bean 还未形成对象，有些 properties 属性值还没完成注⼊，导致我们的初始化动作需要的⼀些必要条件没有准备好，所 谓的初始化也就⽆法正确进⾏。</p><p>我们经常使⽤的⼀些初始化动作，可以在 bean 进⾏初始化的时候进⾏，如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 类初始化监听* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanInitListener</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">BeanInitListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化构造⽅法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化 afterPropertiesSet ⽅法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化 postConstruct 注解⽅法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上⾯代码经常被我们使⽤到的是：</p><ul><li>postConstruct 注解⽅法，该注解所注释的⽅法会在 Bean 对象构建完成之后去执⾏。</li><li>实现 InitializingBean 接⼝的 afterPropertiesSet ⽅法，通过这个⽅法名也可以知道该⽅法是在属性被设置之后执⾏。</li></ul><p>将上⾯的代码类放⼊⼀个 SpringBoot 应⽤，并启动应⽤，执⾏顺序（⽇志输出顺序）如下:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HbFWWo.png"></p><p><strong>结论:</strong></p><ul><li>静态代码块会在类加载器加载这个类时执⾏⼀次。</li><li>⾮静态代码块会在这个类的构造⽅法被执⾏的时候执⾏,构造⽅法每被执⾏⼀次, ⾮静态代码块都会被执⾏⼀次(可以理解为⾮静态代码块的内容会被 copy 到构造⽅法内容的最前⾯)。</li><li>afterPropertiesSet ⽅法和被@PostConstruct ⽅法会在 BeanInitTester 实例被创建并且 BeanInitTester 类中的所有实例属性都被初始化之后执⾏. ⽽ afterPropertiesSet ⽅法会在被 @PostConstruct ⽅法标注的⽅法之后执⾏。</li><li>顺序: 静态代码块-&gt;⾮静态代码块-&gt;构造⽅法-&gt;@PostConstruct ⽅法-&gt;afterPropertiesSet ⽅法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式容器的配置与应用</title>
      <link href="/2022/06/24/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%B9%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2022/06/24/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%B9%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌⼊式容器的配置与应⽤"><a href="#嵌⼊式容器的配置与应⽤" class="headerlink" title="嵌⼊式容器的配置与应⽤"></a>嵌⼊式容器的配置与应⽤</h1><h2 id="1-嵌⼊式容器的运⾏参数配置"><a href="#1-嵌⼊式容器的运⾏参数配置" class="headerlink" title="1.嵌⼊式容器的运⾏参数配置"></a>1.嵌⼊式容器的运⾏参数配置</h2><p>在 Spring Boot 项⽬中，可以⽀持 Tomcat、Jetty、Undertow 的 Web 应⽤服务容器。 当我们添加了 spring-boot-starter-web 依赖后，默认会使⽤ Tomcat 作为嵌⼊式 Web 容器，不需要我们 单独部署，将 Web 应⽤打成 jar 包即可运⾏。</p><p><strong>调整 SpringBoot 应⽤容器的参数两种配置⽅法</strong></p><ul><li>修改配置⽂件（简单）</li><li>⾃定义配置类 （专业调优）</li></ul><h3 id="⼀、配置⽂件⽅式"><a href="#⼀、配置⽂件⽅式" class="headerlink" title="⼀、配置⽂件⽅式"></a>⼀、配置⽂件⽅式</h3><p>在 application.properties / application.yml 可以配置 Web 容器运⾏所需要的属性，可以通过该链接在官 ⽅⽹站查看关于 server 的所有配置项：[server-properties](<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server">Common Application Properties (spring.io)</a>)</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/aO9FYW.png"></p><ul><li>server.xx 开头的是所有 servlet 容器通⽤的配置</li><li>server.tomcat.xx 开头的是 tomcat 容器特有的配置参数参数</li><li>server.jetty.xx 开头的是 Jetty 容器特有的配置参数参数</li><li>server.undertow.xx 开头的是 undertow 容器特有的配置参数参数</li></ul><h4 id="1-1-常⽤配置参数"><a href="#1-1-常⽤配置参数" class="headerlink" title="1.1 常⽤配置参数"></a>1.1 常⽤配置参数</h4><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>server.port</td><td>8080</td><td>配置 Web 容器的端⼝号</td></tr><tr><td>server.servlet.session.time out</td><td>30m(30 分钟)</td><td>session 失效时间。如果不写单位则默认单位是秒。 （注意：由于 Tomcat 中配置 session 过期时间是以 分钟为单位，如果这⾥设置是秒的话，那么会⾃动 转换为⼀个不超过所配置秒数的最⼤分钟数。⽐如 配置了 119 秒(1 分 59 秒)，那么实际 session 过期时间 是 1 分钟）</td></tr><tr><td>server.servlet.contextpath</td><td>/</td><td>URL 访问路径的基础路径</td></tr><tr><td>server.tomcat.uriencoding</td><td>UTF-8</td><td>配置 Tomcat 请求编码</td></tr><tr><td>server.tomcat.basedir</td><td></td><td>配置 Tomcat 运⾏⽇志和临时⽂件的⽬录。若不配 置，则默认使⽤系统的临时⽬录</td></tr></tbody></table><h4 id="1-2-tomcat-性能优化核⼼参数"><a href="#1-2-tomcat-性能优化核⼼参数" class="headerlink" title="1.2 tomcat 性能优化核⼼参数"></a>1.2 tomcat 性能优化核⼼参数</h4><p>tomcat 连接器⼯作原理图：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/dJ2lBp.png"></p><ul><li>在 Acceptor 之前维护⼀个请求接收队列，该队列的最⼤⻓度即：tomcat 可以接受的最⼤请求连接 数：server.tomcat.max-connections</li><li>Acceptor 监听连接请求，并⽣成⼀个 SocketProcessor 任务提交到线程池去处理</li><li>当线程池⾥⾯的所有线程都被占⽤，新建的 SocketProcessor 任务被放⼊等待队列，即： server.tomcat.accept-count</li><li>线程池的 server.tomcat.threads.max 决定了 tomcat 的极限 SocketProcessor 任务处理能⼒。不是越⼤越好，线程越多耗费的资源也越多</li><li>线程池的 server.tomcat.threads.min-spare 在应⽤空闲时，保留⼀定的线程数在线程池内。避免请 求到来后，临时创建线程浪费时间</li></ul><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>server.tomcat.maxconnections</td><td>8192</td><td>接受的最⼤请求连接数</td></tr><tr><td>server.tomcat.accept-count</td><td>100</td><td>当所有的线程都被占⽤，被放⼊请求队列等 待的最⼤的请求连接数量</td></tr><tr><td>server.tomcat.threads.max</td><td>200</td><td>最⼤的⼯作线程池数量</td></tr><tr><td>server.tomcat.threads.minspare</td><td>10</td><td>最⼩的⼯作线程池数量</td></tr></tbody></table><h3 id="⼆、⾃定义配置类⽅式"><a href="#⼆、⾃定义配置类⽅式" class="headerlink" title="⼆、⾃定义配置类⽅式"></a>⼆、⾃定义配置类⽅式</h3><p>步骤：</p><ol><li><p>建⽴⼀个配置类，加上@Configuration 注解</p></li><li><p>添加定制器 ConfigurableServletWebServerFactory</p></li><li><p>将定制器返回</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatCustomizer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurableServletWebServerFactory</span> <span class="token function">configurableServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TomcatServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addConnectorCustomizers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTomcatConnectionCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTomcatConnectionCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">TomcatConnectorCustomizer</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">MyTomcatConnectionCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">Connector</span> connector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"8888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"maxConnections"</span><span class="token punctuation">,</span> <span class="token string">"8192"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"acceptorThreadCount"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"minSpareThreads"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"maxThreads"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种⽅法可定制的内容更多，也更灵活。但需要深⼊理解 server 容器的底层实现原理及设计机制，也需要具备⼀定的 TomcatServletWebServerFactory 的 API 熟练度。</p><h2 id="2-为-Web-容器配置-HTTPS"><a href="#2-为-Web-容器配置-HTTPS" class="headerlink" title="2.为 Web 容器配置 HTTPS"></a>2.为 Web 容器配置 HTTPS</h2><p>HTTPS 是 HTTP 协议的安全版本，旨在提供数据传输层安全性（TLS）。当你的应⽤不使⽤ HTTPS 的时候，浏览器地址栏就会出现⼀个不安全的提示。HTTPS 加密每个数据包以安全⽅式进⾏传输，并保护敏感数据免受窃听者或⿊客的攻击。</p><p>可以通过在 Web 应⽤程序上安装 SSL 证书来实现 HTTPS，互联⽹上受信任的证书通常是需要（CA）认证机构颁发的证书（通常是收费的）。⼀个标准的 SSL 证书，还是有点⼩贵的。国内的⼀些⼚商虽然可以提供免费的证书，但是都有⼀定的免费时效性限制。 如果是以学习为⽬的，我们也可以使⽤⾃签名证书，即：使⽤ Java Keytool ⽣成⾃签名证书。完全不需要购买 CA 机构认证的 SSL 证书。</p><h3 id="⼀、如何⽣成⾃签名证书"><a href="#⼀、如何⽣成⾃签名证书" class="headerlink" title="⼀、如何⽣成⾃签名证书"></a>⼀、如何⽣成⾃签名证书</h3><p>管理员身份启动命令⾏，使⽤如下的 keytool 命令⽣成⾃签名证书：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">keytool -genkeypair -alias selfsigned_localhost_sslserver -keyalg RSA -keysize <span class="token number">2048</span> -storetypePKCS12 -keystore zimug-ssl-key.p12 -validity <span class="token number">3650</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>⾃签名证书受密码保护。命令回⻋之后，会提示输⼊密码（这个密码要记住，后⾯会⽤到）和其他详细信息。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/NMe2QH.png"></p><p>完成上述步骤后，便会创建 PKS 密钥并将其存储在当前⽬录下。</p><blockquote><p>命令参数说明：</p><ul><li>-genkey：表示要创建⼀个新的密钥</li><li>-alias：表示 keystore 的别名</li><li>-keyalg：表示使⽤的加密算法是 RSA（⼀种⾮对称加密算法）</li><li>-keysize：表示密钥的⻓度</li><li>-keystore：表示⽣成的密钥存放位置</li><li>-validity：表示密钥的有效时间（单位为天）</li></ul></blockquote><h3 id="二、将-SSL-应⽤于-Spring-Boot-应⽤程序"><a href="#二、将-SSL-应⽤于-Spring-Boot-应⽤程序" class="headerlink" title="二、将 SSL 应⽤于 Spring Boot 应⽤程序"></a>二、将 SSL 应⽤于 Spring Boot 应⽤程序</h3><ol><li>复制 syhan-ssl-key，将其放在应⽤根⽬录下。</li><li>将 SSL 密钥信息添加到 application.yml 中。</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token key atrule">ssl</span><span class="token punctuation">:</span>    <span class="token key atrule">key-store</span><span class="token punctuation">:</span> syhan<span class="token punctuation">-</span>ssl<span class="token punctuation">-</span>key.p12    <span class="token key atrule">key-store-password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">key-store-type</span><span class="token punctuation">:</span> PKCS12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>此时如果我们继续使⽤ http 协议去访问应⽤资源，会得到如下的响应信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Bad RequestThis combination of <span class="token function">host</span> and port requires TLS.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使⽤ HTTPS 协议去访问应⽤资源，<code>https://localhost:8888/hello</code>。才会得到正确的结果。</p><h3 id="四、将-HTTP-请求重定向为-HTTPS"><a href="#四、将-HTTP-请求重定向为-HTTPS" class="headerlink" title="四、将 HTTP 请求重定向为 HTTPS"></a>四、将 HTTP 请求重定向为 HTTPS</h3><p>⾸先配置两个服务端⼝，server.port 是我们真正的服务端⼝，即 HTTPS 服务端⼝。另外再定义⼀个 server.httpPort,当客户端访问该 HTTP 协议端⼝的时候，⾃动跳转到 HTTPS 服务端⼝。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token key atrule">httpPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要使⽤到上⼀节使⽤编码⽅式进⾏配置的⽅法。下⾯的配置类不⽤改。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatCustomizer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.httpPort&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> httpPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> httpsPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurableServletWebServerFactory</span> <span class="token function">configurableServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TomcatServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SecurityConstraint</span> constraint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                constraint<span class="token punctuation">.</span><span class="token function">setUserConstraint</span><span class="token punctuation">(</span><span class="token string">"CONFIDENTIAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SecurityCollection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                constraint<span class="token punctuation">.</span><span class="token function">addCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">addConstraint</span><span class="token punctuation">(</span>constraint<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addAdditionalTomcatConnectors</span><span class="token punctuation">(</span><span class="token function">connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这⾥填充配置</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Connector</span> <span class="token function">connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connector</span> connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.http11.Http11NioProtocol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setScheme</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Connector监听的http的端⼝号</span>        connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>httpPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setSecure</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//监听到http的端⼝号后转向到的https的端⼝号</span>        connector<span class="token punctuation">.</span><span class="token function">setRedirectPort</span><span class="token punctuation">(</span>httpsPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connector<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样当我们通过 HTTP 协议：<code>http://localhost:80/hello</code>的时候，浏览器访问地址就会⾃动的跳转到 HTTPS 连接器服务端⼝<code> https://localhost:8888/hello</code></p><h2 id="3-切换到-jetty-amp-undertow-容器"><a href="#3-切换到-jetty-amp-undertow-容器" class="headerlink" title="3.切换到 jetty&amp;undertow 容器"></a>3.切换到 jetty&amp;undertow 容器</h2><p>本节介绍将 SpringBoot 默认的 Tomcat 容器切换为 jetty 或者 undertow。虽然可以使⽤ jetty 或者 undertow 替换掉 tomcat，但是不建议这么做，但是 jetty 与 undertow 的 NIO 模型还是有必要学⼀下的， 这也是绝⼤部分 Web 应⽤中间件提供⽹络服务的 IO 模型。 可能在某些场景下，jetty 或者 undertow 的测试结果的某些指标会好于 tomcat。但是 tomcat 综合各⽅⾯ 条件来说，⽆论从性能、稳定性、资源利⽤率来说都是⽐较优秀的。</p><h3 id="⼀、替换掉-tomcat"><a href="#⼀、替换掉-tomcat" class="headerlink" title="⼀、替换掉 tomcat"></a>⼀、替换掉 tomcat</h3><p>SpringBoot 默认是使⽤ tomcat 作为默认的应⽤容器。如果需要把 tomcat 替换为 jetty 或者 undertow，需 要先把 tomcat 相关的 jar 包排除出去。如下代码所示</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使⽤ Jetty 容器，那么添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果使⽤ Undertow 容器，那么添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不做特殊的调优配置，全部使⽤默认值的话，我们的替换⼯作就已经完成了。</p><h3 id="⼆、Reactor-NIO-多线程模型"><a href="#⼆、Reactor-NIO-多线程模型" class="headerlink" title="⼆、Reactor NIO 多线程模型"></a>⼆、Reactor NIO 多线程模型</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ECDrsB.png"></p><ol><li>mainReactor 负责监听 server socket，⽤来处理新连接的建⽴，将建⽴的 socketChannel 指定注册给 subReactor。</li><li>subReactor 维护⾃⼰的 selector, 基于 mainReactor 注册的 socketChannel 多路分离 IO 读写事件，读写⽹络数据，对业务处理的功能，将其扔给 worker 线程池来完成实际的请求任务处理。</li></ol><h3 id="三、切换为-Jetty-Server"><a href="#三、切换为-Jetty-Server" class="headerlink" title="三、切换为 Jetty Server"></a>三、切换为 Jetty Server</h3><p>常⽤ jetty 调优配置参数</p><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>server.jetty.threads.acceptors</td><td>-1.0</td><td>acceptor 线程的数量，acceptor 是⽤于连接接收 的连接器。当设置成-1 的时候，会根据 CPU 的逻 辑核数/8 来决定，最⼤不能超过 4 个</td></tr><tr><td>server.jetty.threads.selectors</td><td>-1.0</td><td>selector 线程的数量. 当设置成-1 的时候，根据 CPU 的逻辑核数/2，最少 1 个</td></tr><tr><td>server.jetty.threads.min</td><td>8</td><td>worker ⼯作线程池最⼩线程数量</td></tr><tr><td>server.jetty.threads.max</td><td>200</td><td>worker ⼯作线程池最⼤线程数量</td></tr></tbody></table><h3 id="四、切换到-undertow"><a href="#四、切换到-undertow" class="headerlink" title="四、切换到 undertow"></a>四、切换到 undertow</h3><p>下⽂配置中的 io-threads 可以认为是 acceptor 线程数，⽤来处理连接的建⽴。</p><p>worker-threads 就是⼯作线程池的线程数量，⽤来处理实际请求任务。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token comment"># 下⾯是配置undertow作为服务器的参数</span> <span class="token key atrule">undertow</span><span class="token punctuation">:</span>    <span class="token comment"># 设置IO线程数, 它主要执⾏⾮阻塞的任务,它们会负责多个连接, 默认设置每个CPU核⼼⼀</span>个线程   <span class="token key atrule">io-threads</span><span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token comment"># ⼯作任务线程池，默认为io-threads的8倍</span>   <span class="token key atrule">worker-threads</span><span class="token punctuation">:</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-打-war-包部署到外置-tomcat-容器"><a href="#4-打-war-包部署到外置-tomcat-容器" class="headerlink" title="4.打 war 包部署到外置 tomcat 容器"></a>4.打 war 包部署到外置 tomcat 容器</h2><h3 id="⼀、修改打包⽅式"><a href="#⼀、修改打包⽅式" class="headerlink" title="⼀、修改打包⽅式"></a>⼀、修改打包⽅式</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="⼆、-排除内置-tomcat-的依赖"><a href="#⼆、-排除内置-tomcat-的依赖" class="headerlink" title="⼆、 排除内置 tomcat 的依赖"></a>⼆、 排除内置 tomcat 的依赖</h3><p>使⽤外置的 tomcat，要将内置的嵌⼊式 tomcat 的相关 jar 排除。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、新增加⼀个类继承-SpringBootServletInitializer-实现"><a href="#三、新增加⼀个类继承-SpringBootServletInitializer-实现" class="headerlink" title="三、新增加⼀个类继承 SpringBootServletInitializer 实现"></a>三、新增加⼀个类继承 SpringBootServletInitializer 实现</h3><p>configure：</p><p>SpringBootServletInitializer 源码注释：</p><blockquote><p>Note that a WebApplicationInitializer is only needed if you are building a war file and deploying it. If you prefer to run an embedded web server then you won’t need this at all.</p></blockquote><p>如果你正在构建 WAR ⽂件并部署，则需要 WebApplicationInitializer。如果你喜欢运⾏⼀个嵌⼊式 Web 服务器，那么不需要这个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">SpringApplicationBuilder</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//此处的Application.class为带有@SpringBootApplication注解的启动类</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">BootLaunchApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><p>使⽤外部 Tomcat 部署访问的时候，application.properties(或者 application.yml)中的如下配置将失效， 请使⽤外置的 tomcat 的端⼝，tomcat 的 webapps 下项⽬名进⾏访问。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server.port= server.servlet.context<span class="token punctuation">-</span>path=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、build-要有-finalName-标签"><a href="#四、build-要有-finalName-标签" class="headerlink" title="四、build 要有 finalName 标签"></a>四、build 要有 finalName 标签</h3><p>pom.xml 中的构建 build 代码段，要有应⽤最终构建打包的名称。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>boot-launch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、打包与运⾏"><a href="#五、打包与运⾏" class="headerlink" title="五、打包与运⾏"></a>五、打包与运⾏</h3><p>war ⽅式打包，打包结果将存储在项⽬的 target ⽬录下⾯。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean package -Dmaven.test.skip<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后将 war 包 copy 到外置 Tomcat webapps ⽬录⾥。 在外置 tomcat 中运⾏：${Tomcat_home}/bin/⽬录下执⾏ startup.bat(windows)或者 startup.sh(linux)，然后通过浏览器访问应⽤，测试效果。</p><p><strong>需要注意的是</strong></p><ul><li>在 boot-launch.war 在 tomcat webapps ⽬录⾥⾯解压到 boot-launch ⽂件夹。所以访问应⽤的时 候，必须使⽤<code>http://localhost:8888/boot-launch/template/thymeleaf</code> 不能是：<code>http://localhost:8888/template/thymeleaf</code>，会报 404 错误。</li><li>静态资源引⽤也必须是：/boot-launch/image/xxxx.png，不能是/image/xxxx.png</li><li>JSP 的 war 包中，webjars 的资源使⽤⽅式不再被⽀持</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter起步</title>
      <link href="/2022/06/23/Flutter%E8%B5%B7%E6%AD%A5/"/>
      <url>/2022/06/23/Flutter%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter-介绍"><a href="#Flutter-介绍" class="headerlink" title="Flutter 介绍"></a>Flutter 介绍</h2><h3 id="1-1、跨平台开发对比"><a href="#1-1、跨平台开发对比" class="headerlink" title="1.1、跨平台开发对比"></a>1.1、跨平台开发对比</h3><ul><li><strong>Web 容器 ：Cordova Ionic</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/Cordova%20%20ionic.png" alt="Cordova  ionic"></p><ul><li><strong>泛 Web 容器: React Native</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/ReactNative.png" alt="React Native"></p><ul><li><strong>自绘引擎：Flutter</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/JIT.png" alt="JIT"></p><blockquote><p><strong>自己去了解一下：AOT 和 JIT</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94.png" alt="方案对比"></p><p><strong>方案对比</strong></p><h3 id="1-2、Flutter-介绍"><a href="#1-2、Flutter-介绍" class="headerlink" title="1.2、Flutter 介绍"></a>1.2、Flutter 介绍</h3><blockquote><p>Flutter 是 Google 推出并开源的移动应用开发 UI 框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码同时运行在多个平台。 Flutter 提供了丰富的组件、接口，开发者可以很快地为 Flutter 添加 Native 扩展。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/Flutter%E4%BB%8B%E7%BB%8D.png" alt="Flutter介绍"></p><p><strong>Flutter 架构分层</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/Flutter%E6%9E%B6%E6%9E%84%E5%88%86%E5%B1%82.png" alt="Flutter架构分层"></p><h2 id="Flutter-环境"><a href="#Flutter-环境" class="headerlink" title="Flutter 环境"></a>Flutter 环境</h2><h3 id="2-1、环境搭建"><a href="#2-1、环境搭建" class="headerlink" title="2.1、环境搭建"></a>2.1、环境搭建</h3><p>参考：</p><ul><li><a href="https://book.flutterchina.club/chapter1/install_flutter.html#_1-3-1-%E5%AE%89%E8%A3%85flutter">https://book.flutterchina.club/chapter1/install_flutter.html#_1-3-1-%E5%AE%89%E8%A3%85flutter</a></li><li><a href="https://doc.flutterchina.club/get-started/install/">https://doc.flutterchina.club/get-started/install/</a></li></ul><h3 id="2-2、常用命令"><a href="#2-2、常用命令" class="headerlink" title="2.2、常用命令"></a>2.2、常用命令</h3><ul><li>查询环境配置：flutter doctor</li><li>获取模拟器：flutter emulators</li><li>启动模拟器：flutter emulators –launch 模拟器名</li><li>获取所有真机设备列表：flutter devices</li><li>运行在所有设备：flutter run -d all</li><li>运行在指定设备：flutter run -d <device Id></li><li>打包 apk：flutter build apk</li><li>打包 ipa：flutter build ios</li><li>打包 exe：flutter build windows</li><li>打包 pkg：flutter build mac</li><li>拉取 flutter 项目中的第三方包，不包括 flutter 的 sdk：flutter packages get</li><li>更新 flutter 项目所有依赖包，不包括 flutter sdk：flutter packages upgrade</li><li>配置打包信息：flutter config -x</li><li>查看 flutter sdk 的所有分支：flutter channel</li><li>切换 sdk 分支：flutter channel stable</li><li>分析代码：flutter analyze</li><li>获取 flutter 所有命令: flutter</li><li>查看命令的帮助信息: flutter help</li><li>查看 Flutter 版本: flutter –version</li></ul><table><thead><tr><th align="center">常用命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">–version</td><td align="center">查看 Flutter 版本</td></tr><tr><td align="center">-h 或者–help</td><td align="center">打印所有命令行用法信息</td></tr><tr><td align="center">analyze</td><td align="center">分析项目的 Dart 代码</td></tr><tr><td align="center">build</td><td align="center">Flutter 构建命令</td></tr><tr><td align="center">channel</td><td align="center">列表或开关 Flutter 通道</td></tr><tr><td align="center">clean</td><td align="center">删除构建/目录</td></tr><tr><td align="center">config</td><td align="center">配置 Flutter</td></tr><tr><td align="center">create</td><td align="center">创建一个新的 Flutter 项目</td></tr><tr><td align="center">devices</td><td align="center">列出所有连接的设备</td></tr><tr><td align="center">doctor</td><td align="center">展示有关安装工具的信息</td></tr><tr><td align="center">drive</td><td align="center">为当前项目运行 Flutter 驱动程序测试</td></tr><tr><td align="center">format</td><td align="center">格式一个或多个 Dart 文件</td></tr><tr><td align="center">fuchsia_reload</td><td align="center">在 Fuchsia 上进行热重载</td></tr><tr><td align="center">help</td><td align="center">显示 Flutter 帮助信息</td></tr><tr><td align="center">install</td><td align="center">在附加设备上安装 Flutter 应用程序</td></tr><tr><td align="center">logs</td><td align="center">显示用于运行 Flutter 应用程序的日志输出</td></tr><tr><td align="center">packages</td><td align="center">用于管理 Flutter 包</td></tr><tr><td align="center">precache</td><td align="center">填充 Flutter 工具的二进制工件缓存</td></tr><tr><td align="center">run</td><td align="center">在附加设备上运行 Flutter 应用程序</td></tr><tr><td align="center">screenshot</td><td align="center">从一个连接的设备截图</td></tr><tr><td align="center">stop</td><td align="center">停止在附加设备上的 Flutter 应用</td></tr><tr><td align="center">test</td><td align="center">对当前项目的 Flutter 单元测试</td></tr><tr><td align="center">trace</td><td align="center">开始并停止跟踪运行的 Flutter 应用程序</td></tr><tr><td align="center">upgrade</td><td align="center">升级 Flutter 副本</td></tr></tbody></table><h2 id="Android-Studio-开发-Flutter-实用技巧"><a href="#Android-Studio-开发-Flutter-实用技巧" class="headerlink" title="Android Studio 开发 Flutter 实用技巧"></a>Android Studio 开发 Flutter 实用技巧</h2><blockquote><p>初次使用 AS 的小伙伴可以看下 Flutter 官方的这篇<a href="https://flutter.cn/docs/development/tools/android-studio">在 Android Studio 或 IntelliJ 里开发 Flutter 应用</a></p></blockquote><h3 id="3-1-快捷键"><a href="#3-1-快捷键" class="headerlink" title="3.1 快捷键"></a>3.1 快捷键</h3><p><strong>以 Android Studio + Mac 为例：</strong></p><pre class="line-numbers language-none"><code class="language-none">- 快速创建Widget：在dart文件中输入stf或stl出现提示后按回车即可- 快速修复：command + .- 自动生成构造函数：选中 final 参数，快捷键：option + 回车- 添加父组件、变为子组件、删除子组件：option+回车- 万能的搜索：双击shift- 查看最近打开的文件：command + E- 重命名：fn+shift+f6- 查看当前类结构：command + fn + f12- 查看源码：将光标放到要查看源码的类名或方法名上，长按command 然后的点击- 查看类的子类：选中要查看的类，然后：command + B 或 option + command + B- 将代码更新到模拟器上：选中模拟器然后 command + R- 导入类的快捷键：将光标放在要导入类的上面，然后按 option + enter- 前进后退：当跟踪代码的时候，经常跳转到其他类，后退快捷键：option+command+方向左键，前进快捷键：option+command+方向右键- 全局搜索：command + shift + F- 全局替换：command + shift + R- 查找引用： option + shift + F7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上快捷键是 Android Studio 的 macOS 的 keymap，如果是 Windows 系统，将 command 换成 Ctrl，option 换成 Alt 即可。</p></blockquote><p>更多快捷键可参考：<a href="https://developer.android.com/studio/intro/keyboard-shortcuts?hl=zh-CN">keyboard-shortcuts</a></p><h3 id="3-2-自动补全"><a href="#3-2-自动补全" class="headerlink" title="3.2 自动补全"></a>3.2 自动补全</h3><blockquote><p>通过自动补全功能能够让开发效率提升不少，那么如何使用自动补全功能呢？</p></blockquote><p>可以在 Android Studio 的 Plugin 中搜索<code>Flutter Snippets</code>这个插件然后进行安装：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/image-20220622132735043.png"></p><p>有了这个插件后，Android Studio 可以帮你自动补全主流 widget 的代码。以下是触发自动补全各种 widget 的缩写：</p><ul><li>stful: 创建一个有状态的 Widget</li><li>stless：创建一个无状态的 Widget</li><li>column：创建一个 Column Widget</li><li>container：创建一个 Container Widget</li><li>row：创建一个 Row Widget</li><li>showDialog：创建一个 AlertDialog</li></ul><p>更多自动补全快捷键可查阅：<a href="https://github.com/georgeherby/flutter-snippets/blob/master/README.md">flutter-snippets</a>。</p><h3 id="3-3-代码自动格式化"><a href="#3-3-代码自动格式化" class="headerlink" title="3.3 代码自动格式化"></a>3.3 代码自动格式化</h3><p>虽然我们可以通过快捷键<code>option(alt)+command(ctrl)+L</code>来在提交代码是格式化，但是这种手动的方式显然不够效率。</p><p>可以借助 AS 的保存时代码自动格式化功能来释放我们的双手：</p><p>在 Settings &gt; Language &amp; Frameworks &gt; Flutter 中勾选 “Format Code on Save”这个选项：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/image-20220622131711130.png"></p><p>另外建议勾选<code>Organize imports on save</code>这个选项，它会帮你移除没有使用的导入。</p><h3 id="3-4-提取-Flutter-代码"><a href="#3-4-提取-Flutter-代码" class="headerlink" title="3.4 提取 Flutter 代码"></a>3.4 提取 Flutter 代码</h3><p>Flutter 最让人头疼的一点是的布局的嵌套，对于复杂的布局如果不进行任何重构的情况下会嵌套的非常深，从而降低代码的可读性不利于后期的维护。</p><p>推荐的做法是将复杂的布局提取成一个函数或者一个组件，这里分享一个提取 Flutter 代码的技巧：</p><p>选中一个比较复杂的 widget，鼠标右键单击，选择 Refactor &gt; Extract Method ，然后给这个方法取一个名字，AS 可以自动把这块代码抽离出一个<code>Method</code>，并为它添加对于对应的参数：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/image-20220622131925784.png"></p><blockquote><p>除此之外，我们还可以借助 AS 来将符合条件的代码块提取成一个 Widget，只需要在 Refactor 中选择 <strong>Extract Flutter Widget</strong>即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志框架与全局日志管理</title>
      <link href="/2022/06/20/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%85%A8%E5%B1%80%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
      <url>/2022/06/20/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%85%A8%E5%B1%80%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="日志框架与全局日志管理"><a href="#日志框架与全局日志管理" class="headerlink" title="日志框架与全局日志管理"></a>日志框架与全局日志管理</h1><h2 id="1-⽇志框架的体系结构"><a href="#1-⽇志框架的体系结构" class="headerlink" title="1.⽇志框架的体系结构"></a>1.⽇志框架的体系结构</h2><p>刚刚接触到⽇志的同学可能会被各种⽇志框架吓到，包括各种⽇志框架之间的 jar 总是发⽣冲突，另很多 ⼩伙伴头疼不已。本章将学习各种 Java ⽇志框架发展过程，以及他们之间的关系，以及如何选型。</p><h3 id="⼀、五花⼋⻔的⽇志⼯具包"><a href="#⼀、五花⼋⻔的⽇志⼯具包" class="headerlink" title="⼀、五花⼋⻔的⽇志⼯具包"></a>⼀、五花⼋⻔的⽇志⼯具包</h3><h4 id="1-1-⽇志框架"><a href="#1-1-⽇志框架" class="headerlink" title="1.1 ⽇志框架"></a>1.1 ⽇志框架</h4><ul><li>JDK java.util.logging 包:java.util.logging 是 jdk1.4 发布的 java ⽇志包, 可以说是应⽤⽐较久远的⽇志⼯具包</li><li>log4j： apache 的⼀个开源项⽬，提供了强有⼒的 java ⽇志⽀持，甚⾄他也提供了其他语⾔包括 C、C++、.Net、PL/SQL 的接⼝，从⽽实现多语⾔并存的分布式环境⽇志打印。⽬前已经停⽌更 新，所以不推荐使⽤。</li><li>Logback：由 log4j 创始⼈设计的另⼀个开源⽇志组件，作为 Spring Boot 默认的⽇志框架，应⽤⽐较 ⼴泛。</li><li>log4j2 ：Apache Log4j2 是对 Log4j 的升级，它⽐其前身 Log4j1.x 提供了重⼤改进，并提供了 Logback 中可⽤的许多改进，同时修复了 Logback 架构中的⼀些问题。它基于 LMAX 公司开发 Disruptor（⼀个开源的⽆锁并发框架），改善了 Log4j 和 Logback 在架构设计⽅⾯的缺陷，具有超⾼ 的吞吐量和低延迟，性能⽐ Log4j1.x 和 Logback 更好。</li></ul><h4 id="1-2-⽇志⻔⾯"><a href="#1-2-⽇志⻔⾯" class="headerlink" title="1.2 ⽇志⻔⾯"></a>1.2 ⽇志⻔⾯</h4><ul><li>commons-logging： Apache commons 类库中的⼀员，他作为⼀个⽇志⻔⾯，能够⾃动选择使⽤ log4j 还是 JDK logging，但是他不依赖 Log4j，JDK Logging 的 API。如果项⽬的 classpath 中包含了 log4j 的类库，就会使⽤ log4j，否则就使⽤ JDK Logging。</li><li>SLF4J： 可以说是⽬前应⽤最为⼴泛的⽇志⻔⾯了，它提供了⼀个⽇志抽象层，允许你在后台使⽤ 任意⼀个⽇志类库。如：log4j、log4j2、logback。</li></ul><h4 id="1-3-⽇志⻔⾯存在的意义"><a href="#1-3-⽇志⻔⾯存在的意义" class="headerlink" title="1.3 ⽇志⻔⾯存在的意义"></a>1.3 ⽇志⻔⾯存在的意义</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/bg9dbV.png"></p><p><strong>为什么不直接使⽤⽇志框架，⽽是搞出⼀个⽇志⻔⾯？</strong></p><p>⽇志⻔⾯（SLF4J）主要是为了给 Java ⽇志访问提供⼀套标准、规范的 API 框架，其主要意义在于提供接 ⼝，具体的实现可以交由其他⽇志框架来实现，例如 log4j 和 logback 等。 对于⼀般的 Java 项⽬⽽⾔，⽇ 志框架会选择 slf4j-api 作为⻔⾯，配上具体的实现框架（log4j、log4j2、logback 等），中间使⽤桥接器 完成桥接。前⾯介绍的⼏种⽇志框架，每⼀种⽇志框架都有⾃⼰单独的 API，要使⽤对应的框架就要使⽤其对应的 API，这就⼤⼤的增加应⽤程序代码对于⽇志框架的耦合性要求。有了 SLF4J 这个⻔⾯之后，程序员永远 都是⾯向 SLF4J 编程，可以实现简单快速地替换底层的⽇志框架⽽不会导致业务代码需要做相应的修改。</p><p>在使⽤ SLF4J 进⾏⽇志记录时，通常都需要在每个需要记录⽇志的类中定义 Logger 变量，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTestController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogTestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Trace ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Debug ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Info ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Warn ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这显然属于重复性劳动，降低了开发效率，如果你在项⽬中引⼊了 Lombok，那么可以使⽤它提供的 @Slf4j 注解来⾃动⽣成上⾯那个变量，默认的变量名是 log，如果我们想采⽤惯⽤的 LOGGER 变量名， 那么可以在⼯程的 main/java ⽬录中增加 lombok.config ⽂件，并在⽂件中增加 lombok.log.fieldName=LOGGER 的配置项即可。</p><h3 id="⼆、⽇志框架选型"><a href="#⼆、⽇志框架选型" class="headerlink" title="⼆、⽇志框架选型"></a>⼆、⽇志框架选型</h3><ul><li>Spring Boot 默认的⽇志记录框架使⽤的是 Logback</li><li>其中 Log4j 可以认为是⼀个过时的函数库，已经停⽌更新，不推荐使⽤，相⽐之下，性能和功能也是最差的。</li><li>logback 虽然是 Spring Boot 默认的，但性能上还是不及 Log4j2，因此，在现阶段，⽇志记录⾸选 Log4j2。</li></ul><p>SLF4J + Log4j2 是我们推荐的⽇志记录选型。</p><p>性能测试结果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/EyWSI9.png"></p><p>参考:[log4j2 官网](<a href="https://logging.apache.org/log4j/2.x/manual/async.html">Log4j – Log4j 2 Lock-free Asynchronous Loggers for Low-Latency Logging (apache.org)</a>)</p><h3 id="三、⽇志级别"><a href="#三、⽇志级别" class="headerlink" title="三、⽇志级别"></a>三、⽇志级别</h3><p>细说各⽇志框架整合配置前，我们先来⼤致了解下，最常⻅的⽇志的⼏个级别：ERROR, WARN, INFO, DEBUG 和 TRACE。像其他的，⽐如 ALL、OFF 和 FATAL 之类的开发过程中应该基本上是不会涉及的。所 以以下从低到⾼⼀次介绍下常⻅的⽇志级别。</p><ol><li>TRACE：追踪。⼀般上对核⼼系统进⾏性能调试或者跟踪问题时有⽤，此级别很低，⼀般上是不开 启的，开启后⽇志会很快就打满磁盘的。</li><li>DEBUG:调试。这个⼤家应该不陌⽣了。开发过程中主要是打印记录⼀些运⾏信息之类的。</li><li>INFO:信息。这个是最常⻅的了，⼤部分默认就是这个级别的⽇志。⼀般上记录了⼀些交互信息，⼀ 些请求参数等等。可⽅便定位问题，或者还原现场环境的时候使⽤。此⽇志相对来说是⽐较重要的。</li><li>WARN:警告。这个⼀般上是记录潜在的可能会引发错误的信息。⽐如启动时，某某配置⽂件不存在 或者某个参数未设置之类的。</li><li>ERROR:错误。这个也是⽐较常⻅的，⼀般上是在捕获异常时输出，虽然发⽣了错误，但不影响系统 的正常运⾏。但可能会导致系统出错或是宕机等。</li></ol><p>⽇志级别从⼩到⼤为 trace&lt;debug&lt;info&lt;warn&lt;error&lt;fatal，由于通常⽇志框架默认⽇志级别设置为 INFO，因此 trace 和 debug 级别的⽇志都看不到。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>-04-17 <span class="token number">13</span>:59:16.566 INFO c.z.b.l.controller.LogTestController  <span class="token builtin class-name">:</span>Info ⽇志<span class="token punctuation">..</span>.<span class="token number">2020</span>-04-17 <span class="token number">13</span>:59:16.566 WARN c.z.b.l.controller.LogTestController  <span class="token builtin class-name">:</span>Warn ⽇志<span class="token punctuation">..</span>.<span class="token number">2020</span>-04-17 <span class="token number">13</span>:59:16.566 ERROR c.z.b.l.controller.LogTestController <span class="token builtin class-name">:</span>Error ⽇志<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、常⻅术语概念解析"><a href="#四、常⻅术语概念解析" class="headerlink" title="四、常⻅术语概念解析"></a>四、常⻅术语概念解析</h3><ol><li>appender：主要控制⽇志输出到哪⾥，⽐如：⽂件、数据库、控制台打印等。</li><li>logger: ⽤来设置某⼀个包或者具体某⼀个类的⽇志打印级别、以及指定 appender。</li><li>root：也是⼀个 logger，是⼀个特殊的⽗ logger。所有的⼦ logger 最终都会将输出流交给 root，除⾮ 在⼦ logger 中配置了 additivity=”false”。</li><li>rollingPolicy：所有⽇志都放在⼀个⽂件是不好的，所以可以指定滚动策略，按照⼀定周期或⽂件⼤ ⼩切割存放⽇志⽂件。</li><li>RolloverStrategy：⽇志清理策略。通常是指⽇志保留的时间。</li><li>异步⽇志：单独开⼀个线程做⽇志的写操作，达到不阻塞主线程的⽬的。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/r4vd58.png"></p><ul><li>同步⽇志，主线程要等到⽇志写磁盘完成之后，才能继续向下执⾏。</li><li>异步⽇志，主线程写⽇志只是将⽇志消息放⼊⼀个队列，之后就继续向下执⾏，这个过程是在内存层 ⾯完成的。之后由专⻔的线程从队列中获取⽇志数据写⼊磁盘，所以不阻塞主线程。主线程（核⼼业 务代码）执⾏效率很⾼。</li></ul><h2 id="2-logback-⽇志框架配置"><a href="#2-logback-⽇志框架配置" class="headerlink" title="2.logback ⽇志框架配置"></a>2.logback ⽇志框架配置</h2><p>logback 既可以通过 application 配置⽂件进⾏⽇志的配置，⼜可以通过 logback-spring.xml 进⾏⽇志的配 置。通常情况下，使⽤全局配置⽂件 application.yml 或 properties 进⾏配置就⾜够了，如果您的⽇志输出 需求特别复杂⽽且需求⽐较个性化，可以考虑使⽤ logback-spring.xml 的配置⽅式。</p><h3 id="⼀、application-配置⽂件实现⽇志配置"><a href="#⼀、application-配置⽂件实现⽇志配置" class="headerlink" title="⼀、application 配置⽂件实现⽇志配置"></a>⼀、application 配置⽂件实现⽇志配置</h3><p>我们可以在 applicaition.properties(yml) ⽂件中进⾏⽇志的配置</p><pre class="line-numbers language-none"><code class="language-none">logging: level:   root: info   top.syhan.boot.log.controller: debug file:   path: &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;logs   name:  &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;logs&#x2F;boot.log   max-size: 10MB   max-history: 10 pattern:   console: &#39;%red(%d&#123;yyyy-MM-dd HH:mm:ss&#125;) %green([%thread])%highlight(%-5level) %boldMagenta(%logger&#123;10&#125;) - %cyan(%msg%n)&#39;   file: &#39;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger :%msg%n&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>logging.level.root=info 指定整个系统的默认⽇志级别是 info，⽇志级别统⼀化。</li><li>logging.level.com.zimug.boot.launch.controller=debug,指定某个特定的 package 的⽇志级别是 debug，⽇志级别个性化。优先级⻆度，个性配置⼤于统⼀配置。</li><li>logging.file.path 将⽇志输出到指定⽬录，如果不指定 logging.file.name，⽇志⽂件的默认名称是 spring.log。配置了 logging.file.name 之后，logging.file.path 配置失效。</li><li>⽆论何种设置，Spring Boot 都会⾃动按天分割⽇志⽂件，也就是说每天都会⾃动⽣成⼀个新的 log ⽂ 件，⽽之前的会⾃动打成 GZ 压缩包。# ⽇志⽂件⼤⼩</li><li>可以设置 logging.file.max-size=10MB 分割的每个⽇志的⽂件最⼤容量，超过这个 size 之后⽇志继续分隔。</li><li>可以设置保留的⽇志时间 logging.file.max-history=10，以天为单位。</li><li>logging.pattern.file 输出到⽂件中的⽇志的格式。</li><li>logging.pattern.console 控制台输出⽇志的格式，为了在控制台调试时候显示效果更清晰，为⽇志增 加了颜⾊。red、green 等等。</li></ul><p><strong>⽇志格式占位符</strong></p><p>配合这张图，看⼀下占位符和 logging.pattern.console 格式配置之间的关系</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/aGV75l.png"></p><ul><li>%d{HH:mm:ss.SSS}：⽇志输出时间（red）</li><li>%thread：输出⽇志的进程名字，这在 Web 应⽤以及异步任务处理中很有⽤ （green）</li><li>%-5level：⽇志级别，并且使⽤ 5 个字符靠左对⻬ （highlight ⾼亮蓝⾊）</li><li>%logger：⽇志输出类的名字 （boldMagenta 粗体洋红⾊）</li><li>%msg：⽇志消息 （cyan 蓝绿⾊）</li><li>%n：平台的换⾏符</li></ul><h3 id="⼆、使⽤-logback-spring-xml-实现⽇志配置"><a href="#⼆、使⽤-logback-spring-xml-实现⽇志配置" class="headerlink" title="⼆、使⽤ logback-spring.xml 实现⽇志配置"></a>⼆、使⽤ logback-spring.xml 实现⽇志配置</h3><h4 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h4><p>⼀般情况下，使⽤全局配置⽂件 application.yml 或 properties 进⾏配置就⾜够了，如果你的⽇志输出需求 特别复杂，可以考虑使⽤ logback-spring.xml 的配置⽅式。</p><p><strong>spring boot ⽤⾃带的 logback 打印⽇志，多环境打印：</strong></p><ol><li>⽣产环境输出到控制台和⽂件,⼀天⼀个⽂件,保留 30 天。</li><li>开发环境输出到控制台和打印 sql(mybatis)输出，⽣产环境不打印这个信息。</li><li>测试环境只输出到控制台。不输出到⽂件。</li></ol><blockquote><p>打印 Mybatis SQL，只需要把使⽤到 Mybatis 的 package 的⽇志级别调整为 DEBUG，就可以将 SQL 打印出来。</p></blockquote><p><strong>前提：</strong>项⽬已经⽀持 application.yml 的 profile 多环境配置</p><h4 id="2-2-需求实现"><a href="#2-2-需求实现" class="headerlink" title="2.2 需求实现"></a>2.2 需求实现</h4><p>因为 logback 是 spring boot 的默认⽇志框架，所以不需要引⼊ maven 依赖，直接上 logback-spring.xml 放 在 resources 下⾯。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引⼊默认的⼀些设置--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--web信息--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--写⼊⽇志到控制台的appender,⽤默认的,但是要去掉charset,否则windows下tomcat下乱码--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--定义⽇志⽂件的存储地址 勿在 LogBack 的配置中使⽤相对路径--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_PATH<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/Users/syhan/Desktop/logs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--写⼊⽇志到⽂件的appender--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--⽇志⽂件输出的⽂件名,每天⼀个⽂件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">></span></span>$&#123;LOG_PATH&#125;.%d&#123;yyyy-MM-dd&#125;.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--⽇志⽂件保留天数--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125;- %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--⽇志⽂件最⼤的⼤⼩--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxFileSize</span><span class="token punctuation">></span></span>10MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxFileSize</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--异步写⽇志到⽂件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asyncFileAppender<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--⽣产环境:打印控制台和输出到⽂件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asyncFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--开发环境:打印控制台--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 打印sql --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.boot.log<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--测试环境:打印控制台--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异步⽇志配置：</p><ul><li>异步⽇志 queueSize 默认值 256，异步⽇志队列的容量。</li><li>discardingThreshold：当异步⽇志队列的剩余容量⼩于这个阈值，会丢弃 TRACE, DEBUG or INFO 级别的⽇志。如果不希望丢弃⽇志（即全量保存），那可以设置为 0。但是当队列占满后，⾮阻塞的 异步⽇志会变成阻塞的同步⽇志。所以在⾼并发低延迟要求的系统⾥⾯针对不重要的⽇志可以设置 discardingThreshold 丢弃策略，值⼤于 0。</li></ul><h4 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h4><p>上⾯配置完成之后，可以使⽤如下代码测试⼀下，是否满⾜了 2.1 节中提出的需求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTestController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogTestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testlog"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Trace ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Debug ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Info ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Warn ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-log4j2-⽇志框架配置"><a href="#3-log4j2-⽇志框架配置" class="headerlink" title="3.log4j2 ⽇志框架配置"></a>3.log4j2 ⽇志框架配置</h2><h3 id="⼀、引⼊-maven-依赖"><a href="#⼀、引⼊-maven-依赖" class="headerlink" title="⼀、引⼊ maven 依赖"></a>⼀、引⼊ maven 依赖</h3><p>Spring Boot 默认使⽤ LogBack，但是我们没有看到显示依赖的 jar 包，其实是因为所在的 jar 包 springboot-starter-logging 都是作为 spring-boot-starter-web 或者 spring-boot-starter 依赖的⼀部分。 如果这⾥要使⽤ Log4j2，需要从 spring-boot-starter-web 中去掉 spring-boot-starter-logging 依赖， 同时显示声明使⽤ Log4j2 的依赖 jar 包，具体如下:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、添加配置⽂件-log4j2-spring-xml"><a href="#⼆、添加配置⽂件-log4j2-spring-xml" class="headerlink" title="⼆、添加配置⽂件 log4j2-spring.xml"></a>⼆、添加配置⽂件 log4j2-spring.xml</h3><p>在 resources ⽬录下新建⼀个 log4j2-spring.xml ⽂件，放在 src/main/resources ⽬录下即可被 Spring Boot 应⽤识别。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--⽇志输出位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/Users/apple/Desktop/logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 将⽇志输出到控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--设置⽇志格式及颜⾊--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%style&#123;%d&#125;&#123;bright,green&#125;][%highlight&#123;%p&#125;][%style&#123;%t&#125;&#123;bright,blue&#125;][%style&#123;%C&#125;&#123;bright,yellow&#125;]:%msg%n%style&#123;%throwable&#125;&#123;red&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">disableAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">noConsoleNoAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 将⽇志输出到⽂件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE-APPENDER<span class="token punctuation">"</span></span>                 <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/log4j2-demo.log<span class="token punctuation">"</span></span>                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/log4j2-demo-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--设置⽇志格式--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%d][%p][%t][%C] %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PatternLayout</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 设置⽇志⽂件切分参数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--设置最⼤存档数--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 根⽇志设置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE-APPENDER<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spring⽇志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- mybatis⽇志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatis<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>两个 Appender，⼀个叫做 CONSOLE ⽤于输出⽇志到控制台，⼀个叫做 FILE-APPENDER 输出⽇志到⽂件</p></li><li><p>PatternLayout ⽤于指定输出⽇志的格式，[%d] [%p] [%t] [%C] %m %n 这些占位符将结合下⽂测试 结果为⼤家介绍</p></li><li><p>Policies ⽤于指定⽂件切分参数</p><ul><li>TimeBasedTriggeringPolicy 默认的 size 是 1，结合 filePattern 定义%d{yyyy-MM-dd}，则每天 ⽣成⼀个⽂件（最⼩的时间切分粒度是⼩时）</li><li><code>&lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</code>当⽂件⼤⼩到 100MB 的时候，切分⼀个新的⽇ 志⽂件</li></ul></li><li><p><code>&lt;DefaultRolloverStrategy max=&quot;20&quot;/&gt;</code>表示⽂件最⼤的存档数量，多余的将被删除</p></li></ul><h3 id="三、⾃定义配置⽂件"><a href="#三、⾃定义配置⽂件" class="headerlink" title="三、⾃定义配置⽂件"></a>三、⾃定义配置⽂件</h3><p>但是我们通常会有这样⼀个需求，就是不同的环境使⽤不同的配置，⽐如：我们需要三个 log4j2 xml ⽂件：</p><ul><li>log4j2-dev.xml 开发环境⽇志配置</li><li>log4j2-prod.xml ⽣产环境⽇志配置</li><li>log4j2-test.xml 测试环境⽇志配置</li></ul><p>但是 Spring Boot 并不知道 log4j2-.xml 这些配置⽂件是⼲什么的，所以需要通过在 application.yml ⽂件中显示声明才⾏。</p><p>举例：在 application-dev.yml ⾥⾯使⽤ log4j2-dev.xml 配置⽂件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>log4j2<span class="token punctuation">-</span>dev.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以此类推，在 application-prod.yml ⾥⾯使⽤ log4j2-prod.xml 配置⽂件，在 application-test.yml ⾥⾯使 ⽤ log4j2-test.xml 配置⽂件。</p><p>说⼀下占位符</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%style&#123;%d&#125;&#123;bright,green&#125;][%highlight&#123;%p&#125;][%style&#123;%t&#125;&#123;bright,blue&#125;][%style&#123;%C&#125;&#123;bright,yellow&#125;]:%msg%n%style&#123;%throwable&#125;&#123;red&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">disableAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">noConsoleNoAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>%d ： date 时间</li><li>%p ： ⽇志级别</li><li>%t ： thread 线程名称</li><li>%C： class 类⽂件名称</li><li>%msg：⽇志信息</li><li>%n 换⾏</li><li><code>%style&#123;%throwable&#125;&#123;red&#125;</code> 加样式，异常信息红⾊显示</li></ul><h2 id="4-拦截器实现统⼀访问⽇志"><a href="#4-拦截器实现统⼀访问⽇志" class="headerlink" title="4.拦截器实现统⼀访问⽇志"></a>4.拦截器实现统⼀访问⽇志</h2><h3 id="⼀、需求"><a href="#⼀、需求" class="headerlink" title="⼀、需求"></a>⼀、需求</h3><p>我们本节要实现的需求</p><ul><li>针对当前系统的每⼀次接⼝访问，要记录是什么⼈访问的（⽤户名）、什么时间访问的、访问耗时多 ⻓时间、使⽤什么 HTTP method ⽅法访问的、访问结果如何等。可以称为审计⽇志。</li><li>将访问记录审计⽇志，输出到⼀个单独的⽇志⽂件 access.log</li></ul><h3 id="⼆、定义访问⽇志内容记录实体类"><a href="#⼆、定义访问⽇志内容记录实体类" class="headerlink" title="⼆、定义访问⽇志内容记录实体类"></a>⼆、定义访问⽇志内容记录实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FormatUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 访问⽇志内容记录实体类* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessLog</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 访问者⽤户名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求路径     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uri<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求消耗时⻓     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> duration<span class="token punctuation">;</span>    <span class="token comment">/**     * http ⽅法：GET、POST等     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> httpMethod<span class="token punctuation">;</span>    <span class="token comment">/**     * http 请求响应状态码     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> httpStatus<span class="token punctuation">;</span>    <span class="token comment">/**     * 访问者ip     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>    <span class="token comment">/**     * 此条记录的创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"&#123;"</span> <span class="token operator">+</span> <span class="token string">"username="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"uri="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uri <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"duration="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>duration <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"httpMethod="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpMethod <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"httpStatus="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpStatus <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"ip="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"createTime="</span> <span class="token operator">+</span> <span class="token class-name">FormatUtils</span><span class="token punctuation">.</span><span class="token function">forTime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>createTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、⾃定义⽇志拦截器"><a href="#三、⾃定义⽇志拦截器" class="headerlink" title="三、⾃定义⽇志拦截器"></a>三、⾃定义⽇志拦截器</h3><p>通过⾃定义拦截器的⽅式，记录审计⽇志。</p><ul><li>拦截器的 preHandle ⽅法，可以⽤于拦截请求处理开始。⽤于记录请求开始时间等信息保存到 Http Request，⽤于后续计算请求时⻓。</li><li>拦截器的 postHandle ⽅法，可以⽤于拦截请求处理完成。可以从 Request 对象获取开始时间，计算本次请求总的处理时⻓等信息。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">AccessLog</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">AddressIpUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: ⾃定义⽇志拦截器* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessLogInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 进⼊SpringMVC的Controller之前开始记录⽇志实体     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建⽇志实体</span>        <span class="token class-name">AccessLog</span> accessLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置IP地址</span>        accessLog<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//accessLog.setIp(AddressIpUtils.getIpAddress(request));</span>        <span class="token comment">//设置请求⽅法,GET,POST...</span>        accessLog<span class="token punctuation">.</span><span class="token function">setHttpMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求路径(端点)</span>        accessLog<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求开始时间</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"sendTime"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求实体到request内，⽅便afterCompletion⽅法调⽤</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"accessLog"</span><span class="token punctuation">,</span> accessLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//获取本次请求⽇志实体</span>      <span class="token class-name">AccessLog</span> accessLog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AccessLog</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"accessLog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取请求错误码，根据需求存⼊数据库，这⾥不保存</span>      <span class="token keyword">int</span> status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      accessLog<span class="token punctuation">.</span><span class="token function">setHttpStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置访问者</span>      accessLog<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//当前时间</span>      <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//请求开始时间</span>      <span class="token keyword">long</span> sendTime <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"sendTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//设置请求时间差</span>      accessLog<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentTime <span class="token operator">-</span> sendTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      accessLog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//打印⽇志</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>accessLog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterCompletion... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LoggerFactory.getLogger(“ACCESS-LOG”)获取⼀个⽇志配置中的 Logger 的名字，⽤于打印⽇志输 出，持久化到⽇志⽂件⾥。</p><h3 id="四、拦截器注册"><a href="#四、拦截器注册" class="headerlink" title="四、拦截器注册"></a>四、拦截器注册</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置排除路径，spring boot 2.*，注意排除掉静态资源的路径，不然静态资源⽆法访问</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> excludePath <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/static"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccessLogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、-“ACCESS-LOG”的⽇志-Logger-定义"><a href="#五、-“ACCESS-LOG”的⽇志-Logger-定义" class="headerlink" title="五、 “ACCESS-LOG”的⽇志 Logger 定义"></a>五、 “ACCESS-LOG”的⽇志 Logger 定义</h3><p>配置参考以 Log4J2 配置为例</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mHmvkV.png"></p><ul><li>LoggerFactory.getLogger(“ACCESS-LOG”) 代码去配置⽂件⾥⾯找⼀个 name 为 ACCESS-LOG 的 Logger 配置。</li><li>该 Logger 是⼀个 AsyncLogger，指向的输出⽬标是 ACCESS-APPENDER。</li><li>ACCESS-APPENDER 是⼀个⽇志⽂件输出配置，⽇志⽂件是 access-log.log。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--⽇志输出位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/Users/apple/Desktop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 将⽇志输出到⽂件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCESS-APPENDER<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/access.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/access-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--设置⽇志格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%d][%p][%t][%C] %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PatternLayout</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 设置⽇志⽂件切分参数 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--设置最⼤存档数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncLogger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCESS-LOG<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCESS-APPENDER<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncLogger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一全局异常处理</title>
      <link href="/2022/06/20/%E7%BB%9F%E4%B8%80%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/06/20/%E7%BB%9F%E4%B8%80%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="统⼀全局异常处理"><a href="#统⼀全局异常处理" class="headerlink" title="统⼀全局异常处理"></a>统⼀全局异常处理</h1><h2 id="1-设计⼀个优秀的异常处理机制"><a href="#1-设计⼀个优秀的异常处理机制" class="headerlink" title="1.设计⼀个优秀的异常处理机制"></a>1.设计⼀个优秀的异常处理机制</h2><h3 id="⼀、异常处理的乱象例举"><a href="#⼀、异常处理的乱象例举" class="headerlink" title="⼀、异常处理的乱象例举"></a>⼀、异常处理的乱象例举</h3><h4 id="乱象⼀：捕获异常后只输出到控制台"><a href="#乱象⼀：捕获异常后只输出到控制台" class="headerlink" title="乱象⼀：捕获异常后只输出到控制台"></a><strong>乱象⼀：捕获异常后只输出到控制台</strong></h4><p>前端 js-ajax 代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/user/add"</span><span class="token punctuation">,</span>  <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端业务代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">XyyyyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：</p><ol><li>后端直接将异常捕获，⽽且只做了⽇志打印。⽤户体验⾮常差，⼀旦后台出错，⽤户没有任何感知， ⻚⾯⽆状态。</li><li>后端只给出前端异常结果，没有给出异常的原因的描述。⽤户不知道是⾃⼰操作输⼊错误，还是系统 bug。⽤户⽆法判断⾃⼰需要等⼀下再操作？还是继续下⼀步？</li><li>如果没有⼈去经常关注服务端⽇志，不会有⼈发现系统出现异常。</li></ol><h4 id="乱象⼆：混乱的返回⽅式"><a href="#乱象⼆：混乱的返回⽅式" class="headerlink" title="乱象⼆：混乱的返回⽅式"></a>乱象⼆：混乱的返回⽅式</h4><p>前端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"/goods/add"</span><span class="token punctuation">,</span>    dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>    success<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    error<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goods/add"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// do something</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    reutrn map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：</p><ol><li>每个⼈返回的数据有每个⼈⾃⼰的规范，你叫 flag 他叫 isOK，你的成功 code 是 0，它的成功 code 是 0000。这样导致后端书写了⼤量的异常返回逻辑代码，前端也随之每⼀个请求⼀套异常处理逻辑。 很多重复代码。</li><li>如果是前端后端⼀个⼈开发还勉强能⽤，如果前后端分离，这就是系统灾难。</li></ol><h3 id="⼆、该如何设计异常处理"><a href="#⼆、该如何设计异常处理" class="headerlink" title="⼆、该如何设计异常处理"></a>⼆、该如何设计异常处理</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/nlKLCJ.png"></p><h4 id="⾯向相关⽅友好"><a href="#⾯向相关⽅友好" class="headerlink" title="⾯向相关⽅友好"></a>⾯向相关⽅友好</h4><ol><li>后端开发⼈员职责单⼀，只需要将异常捕获并转换为⾃定义异常⼀直对外抛出。不需要去想⻚⾯跳转 404，以及异常响应的数据结构的设计。</li><li>⾯向前端⼈员友好，后端返回给前端的数据应该有统⼀的数据结构，统⼀的规范。不能⼀个⼈⼀个响 应的数据结构。⽽在此过程中不需要后端开发⼈员做更多的⼯作，交给全局异常处理器去处理“异 常”到“响应数据结构”的转换。</li><li>⾯向⽤户友好，⽤户能够清楚的知道异常产⽣的原因。这就要求⾃定义异常，全局统⼀处理，ajax 接 ⼝请求响应统⼀的异常数据结构，⻚⾯模板请求统⼀跳转到 404 ⻚⾯。</li><li>⾯向运维友好，将异常信息合理规范的持久化，以⽇志的形式存储起来，以便查询。</li></ol><p><strong>为什么要将系统运⾏时异常捕获，转换为⾃定义异常抛出？</strong></p><p>因为⽤户不认识 ConnectionTimeOutException 类似这种异常是什么东⻄，但是转换为⾃定义异常就要求 程序员对运⾏时异常进⾏⼀个翻译，⽐如：⾃定义异常⾥⾯应该有 message 字段，后端程序员应该明确 的在 message 字段⾥⾯⽤⾯向⽤户的友好语⾔，说明服务端发⽣了什么。</p><h3 id="三、开发规范"><a href="#三、开发规范" class="headerlink" title="三、开发规范"></a>三、开发规范</h3><ol><li>Controller、Service、DAO 层拦截异常转换为⾃定义异常，不允许将异常私⾃截留。必须对外抛出。</li><li>统⼀数据响应代码，使⽤ http 状态码，不要⾃定义。⾃定义不⽅便记忆，HTTP 状态码程序员都知道。但是太多了程序员也记不住，在项⽬组规定范围内使⽤⼏个就可以。⽐如：200 请求成功，400 ⽤户输⼊错误导致的异常，500 系统内部异常，999 未知异常。</li><li>⾃定义异常⾥⾯有 message 属性，⽤对⽤户友好的语⾔描述异常的发⽣情况，并赋值给 message。</li><li>不允许对⽗类 Exception 统⼀ catch，要分⼩类 catch，这样能够清楚地将异常转换为⾃定义异常传递给前端。</li></ol><h2 id="2-⾃定义异常和相关数据结构"><a href="#2-⾃定义异常和相关数据结构" class="headerlink" title="2.⾃定义异常和相关数据结构"></a>2.⾃定义异常和相关数据结构</h2><h3 id="⼀、该如何设计数据结构"><a href="#⼀、该如何设计数据结构" class="headerlink" title="⼀、该如何设计数据结构"></a>⼀、该如何设计数据结构</h3><ol><li>CustomException ⾃定义异常。核⼼要素包含异常错误编码（400,500）、异常错误信息 message。</li><li>ExceptionTypeEnum 枚举异常分类，将异常分类固化下来，防⽌开发⼈员思维发散。</li><li>AjaxResponse ⽤于响应 HTTP 请求的统⼀数据结构。</li></ol><h3 id="⼆、枚举异常的类型"><a href="#⼆、枚举异常的类型" class="headerlink" title="⼆、枚举异常的类型"></a>⼆、枚举异常的类型</h3><p>为了防⽌开发⼈员⼤脑发散，每个开发⼈员都不断的发明⾃⼰的异常类型，我们需要规定好异常的类型 (枚举)。⽐如：系统异常、⽤户（输⼊）操作导致的异常、其他异常等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums</span><span class="token punctuation">;</span><span class="token comment">/*** @description: 异常类型枚举* @author: syhan* @date: 2022-04-11**/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CustomExceptionType</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 客户端异常     */</span>    <span class="token function">USER_INPUT_ERROR</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"您输⼊的数据错误或您没有权限访问资源！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 服务器异常     */</span>    <span class="token function">SYSTEM_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"系统出现异常，请您稍后再试或联系管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 未知异常     */</span>    <span class="token function">OTHER_ERROR</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">"系统出现未知异常，请联系管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CustomExceptionType</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 异常类型状态码     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment">/**     * 异常类型中⽂描述     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最好不要超过 5 个，否则开发⼈员将会记不住，也不愿意去记。</li><li>这⾥的 code 表示异常类型的唯⼀编码，为了⽅便⼤家记忆，就使⽤ Http 状态码 400、500。</li><li>这⾥的 desc 是通⽤的异常描述，在创建⾃定义异常的时候，为了给⽤户更友好的回复，通常异常信 息描述应该更具体更友好。</li></ul><h3 id="三、⾃定义异常"><a href="#三、⾃定义异常" class="headerlink" title="三、⾃定义异常"></a>三、⾃定义异常</h3><ul><li>⾃定义异常有两个核⼼内容，⼀个是 code。使⽤ CustomExceptionType 来限定范围。</li><li>另外⼀个是 message，这个 message 信息是要最后返回给前端的，所以需要⽤友好的提示来表达异常发⽣的原因或内容</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: ⾃定义异常* @author: syhan* @date: 2022-04-11**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 异常错误编码     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment">/**     * 异常信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span> customExceptionType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> customExceptionType<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> customExceptionType<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span> customExceptionType<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> customExceptionType<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、请求接⼝统⼀响应数据结构"><a href="#四、请求接⼝统⼀响应数据结构" class="headerlink" title="四、请求接⼝统⼀响应数据结构"></a>四、请求接⼝统⼀响应数据结构</h3><p>为了解决不同的开发⼈员使⽤不同的结构来响应给前端，导致规范不统⼀，开发混乱的问题。我们使⽤ 如下代码定义统⼀数据响应结构。</p><ul><li>isok 表示该请求是否处理成功（即是否发⽣异常）。true 表示请求处理成功，false 表示处理失败。</li><li>code 对响应结果进⼀步细化，200 表示请求成功，400 表示⽤户操作导致的异常，500 表示系统异 常，999 表示其他异常。与 CustomExceptionType 枚举⼀致。</li><li>message：友好的提示信息，或者请求结果提示信息。如果请求成功这个信息通常没什么⽤，如果 请求失败，该信息需要展示给⽤户。</li><li>data：通常⽤于查询数据请求，成功之后将查询数据响应给前端。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CustomException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 请求接⼝统⼀响应数据结构* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxResponse</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 请求响应状态码     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求结果描述信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求结果数据（通常⽤于查询操作）     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求出现异常时的响应数据封装     *     * @param e e     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> resultBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求出现异常时的响应数据封装       * @param customExceptionType customExceptionType     * @param errorMessage       errorMessage     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span> customExceptionType<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMessage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> resultBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>customExceptionType<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求成功的响应，不带查询数据（⽤于删除、修改、新增接⼝）     *     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"请求响应成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求成功的响应，带有查询数据（⽤于数据查询接⼝）     *     * @param obj obj     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"请求响应成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求成功的响应，带有查询数据（⽤于数据查询接⼝）     *     * @param obj     obj     * @param message message     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于不同的场景，提供了四种构建 AjaxResponse 的⽅法。</p><ul><li>当请求成功的情况下，可以使⽤ AjaxResponse.success()构建返回结果给前端。</li><li>当查询请求等需要返回业务数据，请求成功的情况下，可以使⽤ AjaxResponse.success(data)构建 返回结果给前端。携带结果数据。</li><li>当请求处理过程中发⽣异常，需要将异常转换为 CustomException ，然后在控制层使⽤ AjaxResponse error(CustomException)构建返回结果给前端。</li><li>在某些情况下，没有任何异常产⽣，我们判断某些条件也认为请求失败。这种使⽤ AjaxResponse error(customExceptionType,errorMessage)构建响应结果。</li></ul><h3 id="五、使⽤示例如下："><a href="#五、使⽤示例如下：" class="headerlink" title="五、使⽤示例如下："></a>五、使⽤示例如下：</h3><p>例如：更新操作，Controller ⽆需返回额外的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询接⼝，Controller 需返回结果数据(data 可以是任何类型数据)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-通⽤全局异常处理逻辑"><a href="#3-通⽤全局异常处理逻辑" class="headerlink" title="3.通⽤全局异常处理逻辑"></a>3.通⽤全局异常处理逻辑</h2><h3 id="⼀、通⽤异常处理逻辑"><a href="#⼀、通⽤异常处理逻辑" class="headerlink" title="⼀、通⽤异常处理逻辑"></a>⼀、通⽤异常处理逻辑</h3><p>程序员的异常处理逻辑要⼗分的单⼀：⽆论在 Controller 层、Service 层还是什么其他位置，程序员只负 责⼀件事：<strong>那就是捕获异常，并将异常转换为⾃定义异常。使⽤⽤户友好的信息去填充。</strong></p><p>CustomException 的 message,并将 CustomException 抛出去。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>consts<span class="token punctuation">.</span></span><span class="token class-name">MsgConsts</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CustomException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 通⽤异常处理逻辑* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 服务层，模拟系统异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">systemBizError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.cj.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span>                    <span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">,</span>"在XXX业务，<span class="token function">myBiz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>⽅法内，出现<span class="token class-name">ClassNotFoundException</span>，请将该信息告知管理员"<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 服务层，模拟⽤户输⼊数据导致的校验异常     *     * @param input ⽤户输⼊     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userBizError</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//模拟业务校验失败逻辑</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> <span class="token class-name">MsgConsts</span><span class="token punctuation">.</span>INPUT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、全局异常处理器"><a href="#⼆、全局异常处理器" class="headerlink" title="⼆、全局异常处理器"></a>⼆、全局异常处理器</h3><p>通过团队内的编码规范的要求，我们已经知道了：不允许程序员截留处理 Exception，必须把异常转换为 ⾃定义异常 CustomException 全都抛出去。那么程序员把异常跑出去之后由谁来处理？那就是 ControllerAdvice。 ControllerAdvice 注解的作⽤就是监听所有的 Controller，⼀旦 Controller 抛出 CustomException，就会 在@ExceptionHandler(CustomException.class)注解的⽅法⾥⾯对该异常进⾏处理。处理⽅法很简单就是<strong>使⽤ AjaxResponse.error(e)包装为通⽤的接⼝数据结构返回给前端</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CustomException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">AjaxResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">BindException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">FieldError</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 全局异常处理器* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebExceptionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 处理程序员主动转换的⾃定义异常     *     * @param e 异常     * @return AjaxResponse     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">customerException</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//400异常不需要持久化，将异常信息以友好的⽅式告知⽤户就可以</span>            <span class="token comment">//将500异常信息持久化处理，⽅便运维⼈员处理</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 处理程序员在程序中未能捕获（遗漏的）异常     *     * @param e 异常     * @return AjaxResponse     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//TODO 将异常信息持久化处理，⽅便运维⼈员处理</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>OTHER_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> fieldError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BindException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">BindException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> fieldError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleIllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试⼀下"><a href="#三、测试⼀下" class="headerlink" title="三、测试⼀下"></a>三、测试⼀下</h3><p>随便找⼀个 API，注⼊ ExceptionService 访问测试⼀下</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ymSGh3.png"></p><h3 id="四、业务状态与-HTTP-协议状态⼀致"><a href="#四、业务状态与-HTTP-协议状态⼀致" class="headerlink" title="四、业务状态与 HTTP 协议状态⼀致"></a>四、业务状态与 HTTP 协议状态⼀致</h3><p>不知道⼤家有没有注意到⼀个问题(看上图)？这个问题就是我们的 AjaxResponse 的 code 是 400，但是真正的 HTTP 协议状态码是 200。</p><ul><li>AjaxResponse 的 code 是 400 代表的是业务状态，也就是说⽤户的请求业务失败了</li><li>但是 HTTP 请求是成功的，也就是说数据是正常返回的。</li></ul><p>在很多的公司开发 RESTful 服务时，要求 HTTP 状态码能够体现业务的最终执⾏状态，所以说：我们有必要让业务状态与 HTTP 协议 Response 状态码⼀致。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalResponseAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span> converterType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//return returnType.hasMethodAnnotation(ResponseBody.class);</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span> <span class="token class-name">Class</span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果响应结果是JSON数据类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>selectedContentType<span class="token punctuation">.</span><span class="token function">equalsTypeAndSubtype</span><span class="token punctuation">(</span>                <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//为HTTP响应结果设置状态码，状态码就是AjaxResponse的code，⼆者达到统⼀</span>                response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>                        <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AjaxResponse</span><span class="token punctuation">)</span> body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> body<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现 ResponseBodyAdvice 接⼝的作⽤是：在将数据返回给⽤户之前，做最后⼀步的处理。也就是说，ResponseBodyAdvice 的处理过程在全局异常处理的后⾯。</li></ul><h3 id="五、进⼀步优化"><a href="#五、进⼀步优化" class="headerlink" title="五、进⼀步优化"></a>五、进⼀步优化</h3><p>我们已经知道了，ResponseBodyAdvice 接⼝的作⽤是：在将数据返回给⽤户之前，做最后⼀步的处理。将上⽂的 GlobalResponseAdvice 中 beforeBodyWrite ⽅法代码优化如下。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/DRqfmu.png"></p><ul><li>如果 Controller 或全局异常处理响应的结果 body 是 AjaxResponse，就直接 return 给前端。</li><li>如果 Controller 或全局异常处理响应的结果 body 不是 AjaxResponse，就将 body 封装为 AjaxResponse 之后再 return 给前端。</li></ul><p>我们之前的代码是这样写的，⽐如：某个 controller ⽅法返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>objList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在就可以这样写了，因为在 GlobalResponseAdvice ⾥⾯会统⼀再封装为 AjaxResponse。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> objList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>advice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">AjaxResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyAdvice</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 全局业务状态通知* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalResponseAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">Class</span> aClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">,</span> <span class="token class-name">Class</span> aClass<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> serverHttpRequest<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> serverHttpResponse<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//如果响应结果是JSON数据类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mediaType<span class="token punctuation">.</span><span class="token function">equalsTypeAndSubtype</span><span class="token punctuation">(</span>                <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">AjaxResponse</span> ajaxResponse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//999 不是标准的HTTP状态码，特殊处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ajaxResponse<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">999</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    serverHttpResponse<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>                            ajaxResponse<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> body<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                serverHttpResponse<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-服务端数据校验异常处理逻辑"><a href="#4-服务端数据校验异常处理逻辑" class="headerlink" title="4.服务端数据校验异常处理逻辑"></a>4.服务端数据校验异常处理逻辑</h2><h3 id="⼀、异常校验的规范及常⽤注解"><a href="#⼀、异常校验的规范及常⽤注解" class="headerlink" title="⼀、异常校验的规范及常⽤注解"></a>⼀、异常校验的规范及常⽤注解</h3><p>在 Web 开发时，对于请求参数，⼀般上都需要进⾏参数合法性校验的，原先的写法是⼀个个字段⼀个个 去判断，这种⽅式太不通⽤了，Java 的 JSR 303: Bean Validation 规范就是解决这个问题的。 JSR 303 只是个规范，并没有具体的实现，⽬前通常是⽤ hibernate-validator 进⾏统⼀参数校验。</p><p>JSR303 定义的校验类型</p><table><thead><tr><th>Constraint</th><th>详细信息</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为 false</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼤于等于指定的最⼩值</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼩于等于指定的最⼤值</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼤于等于指定的最⼩值</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼩于等于指定的最⼤值</td></tr><tr><td>@Size(max, min)</td><td>被注释的元素的⼤⼩必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td>被注释的元素必须是⼀个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注释的元素必须是⼀个过去的⽇期</td></tr><tr><td>@Future</td><td>被注释的元素必须是⼀个将来的⽇期</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><p>Hibernate Validator 附加的 constraint</p><table><thead><tr><th>Constraint</th><th>详细信息</th></tr></thead><tbody><tr><td>@Email</td><td>被注释的元素必须是电⼦邮箱地址</td></tr><tr><td>@Length</td><td>被注释的字符串的⼤⼩必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串的必须⾮空</td></tr><tr><td>@Range</td><td>被注释的元素必须在合适的范围内</td></tr></tbody></table><p><strong>⽤法:把以上注解加在 ArticleVO 的属性字段上，然后在参数校验的⽅法上加@Valid 注解</strong> 如:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/vAYP87.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mzxQtY.png"></p><p>当⽤户输⼊参数不符合注解给出的校验规则的时候，会抛出 BindException 或 MethodArgumentNotValidException。</p><h3 id="⼆、Assert-断⾔与-IllegalArgumentException"><a href="#⼆、Assert-断⾔与-IllegalArgumentException" class="headerlink" title="⼆、Assert 断⾔与 IllegalArgumentException"></a>⼆、Assert 断⾔与 IllegalArgumentException</h3><p>之前给⼤家讲通⽤异常处理的时候，⽤户输⼊异常判断是这样处理的。这种⽅法也是可以⽤的，但是我 们学了这么多的知识，可以优化⼀下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//服务层，模拟⽤户输⼊数据导致的校验异常</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userBizError</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//模拟业务校验失败逻辑</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span>                <span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span>                <span class="token string">"您输⼊的数据不符合业务逻辑，请确认后重新输⼊！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//…… 其他的业务</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更好的写法是下⾯这样的，使⽤ org.springframework.util.Assert 断⾔ input &gt;= 0，如果不满⾜条件就抛 出 IllegalArgumentException，参数不合法的异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//服务层，模拟⽤户输⼊数据导致的校验异常</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userBizError</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>input <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"您输⼊的数据不符合业务逻辑，请确认后重新输⼊！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//…… 其他的业务</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>org.springframework.util.Assert 断⾔提供了⼤量的断⾔⽅法，针对各种数据类型进⾏数据合法性校验， 使⽤它我们编写代码更⽅便。</p><h3 id="三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）"><a href="#三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）" class="headerlink" title="三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）"></a>三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）</h3><p>我们已知当数据校验失败的时候，会抛出异常 BindException 或 MethodArgumentNotValidException。 所以我们对这两种异常做全局处理，防⽌程序员重复编码带来困扰。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BindException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">BindException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们已知使⽤ org.springframework.util.Assert 断⾔，如果不满⾜条件就抛出 IllegalArgumentException。可以使⽤下⾯的全局异常处理函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span><span class="token function">handleIllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合分布式⽂件系统</title>
      <link href="/2022/05/01/%E6%95%B4%E5%90%88%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/05/01/%E6%95%B4%E5%90%88%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="整合分布式⽂件系统"><a href="#整合分布式⽂件系统" class="headerlink" title="整合分布式⽂件系统"></a>整合分布式⽂件系统</h1><h2 id="1-⽂件本地上传与提供访问服务"><a href="#1-⽂件本地上传与提供访问服务" class="headerlink" title="1.⽂件本地上传与提供访问服务"></a>1.⽂件本地上传与提供访问服务</h2><p>在开始介绍分布式⽂件系统之前，先来看⼀下使⽤本机存储来存放⽂件资源。</p><p>⼆者的核⼼实现过程是⼀样的：</p><ul><li>上传⽂件，保存⽂件（本节是本地磁盘）</li><li>返回⽂件 HTTP 访问服务路径给前端，进⾏上传之后的效果展示</li></ul><h3 id="⼀、复习"><a href="#⼀、复习" class="headerlink" title="⼀、复习"></a>⼀、复习</h3><p>服务端接收上传的⽬的是提供⽂件的访问服务，那么对于 SpringBoot ⽽⾔，有哪些可以提供⽂件访问的静态资源⽬录呢？</p><ul><li>classpath:/META-INF/resources/</li><li>classpath:/static/</li><li>classpath:/public/</li><li>classpath:/resources/</li></ul><p>静态资源都在 classpath 下。那么就出现了问题：</p><ul><li>应⽤的⽂件资源不能和项⽬代码分开存储（你⻅过往 github 上传代码，还附带项⽬⽂件数据的么？）</li><li>项⽬打包困难，当上传的⽂件越来越多，项⽬的打包 jar 越来越⼤。</li><li>代码与⽂件数据不能分开存储，就意味着⽂件数据的备份将变得复杂</li></ul><h3 id="⼆、⽂件上传⽬录⾃定义配置"><a href="#⼆、⽂件上传⽬录⾃定义配置" class="headerlink" title="⼆、⽂件上传⽬录⾃定义配置"></a>⼆、⽂件上传⽬录⾃定义配置</h3><p>怎么解决上述问题?</p><p>别忘记了 spring boot 为我们提供了使⽤ spring.resources.static-locations<strong>配置⾃定义静态⽂件的位置</strong>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">web</span><span class="token punctuation">:</span><span class="token key atrule">upload-path</span><span class="token punctuation">:</span> /Users/apple/Desktop<span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">resources</span><span class="token punctuation">:</span>   static<span class="token punctuation">-</span><span class="token key atrule">locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/META<span class="token punctuation">-</span>INF/resources/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/resources/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/static/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/public/<span class="token punctuation">,</span>file<span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>web.upload<span class="token punctuation">-</span>path<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置 web.upload-path 为与项⽬代码分离的静态资源路径，即：⽂件上传保存根路径</p></li><li><p>配置 spring.resources.static-locations，除了带上 Spring Boot 默认的静态资源路径之外，加上 file:${web.upload-path}指向外部的⽂件资源上传路径。该路径下的静态资源可以直接对外提供 HTTP 访问服务。</p></li></ul><h3 id="三、⽂件上传的-Controller-实现"><a href="#三、⽂件上传的-Controller-实现" class="headerlink" title="三、⽂件上传的 Controller 实现"></a>三、⽂件上传的 Controller 实现</h3><p>详情看代码注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadController</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//绑定⽂件上传路径到uploadPath</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;web.upload-path&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uploadPath<span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> uploadFile<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 在 uploadPath ⽂件夹中通过⽇期对上传的⽂件归类保存</span>        <span class="token comment">// ⽐如：/2019/06/06/cf13891e-4b95-4000-81eb-b6d70ae44930.png</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> folder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>uploadPath <span class="token operator">+</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>folder<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            folder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>                <span class="token comment">// 对上传的⽂件重命名，避免⽂件重名</span>        <span class="token class-name">String</span> oldName <span class="token operator">=</span> uploadFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> oldName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>oldName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oldName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// ⽂件保存</span>        uploadFile<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> newName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 返回上传⽂件的访问路径</span>        <span class="token comment">//https://localhost:8888/2020/10/18/a9a05df4-6615-4bb5-b859-a3f9bf4bfae0.jpg</span>        <span class="token class-name">String</span> filePath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span>   <span class="token operator">+</span> format <span class="token operator">+</span> newName<span class="token punctuation">;</span>        <span class="token keyword">return</span> filePath<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试"><a href="#四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试" class="headerlink" title="四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试"></a>四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试</h3><p>把该 upload.html ⽂件放到 classpath:public ⽬录下，对外提供访问。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请选择上传⽂件<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保存<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问测试、点击“选择⽂件”，之后保存</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_18-19-42.png" alt="测试结果"></p><p>⽂件被保存到服务端的 web.upload-path 指定的资源⽬录下，浏览器端响应返回⼀个⽂件 HTTP 访问路径。</p><p>使⽤该 HTTP 访问路径，在浏览器可以看到上传的图⽚。证明我们的⽂件已经成功上传到服务端。</p><h2 id="2-MinlO-简介与选型介绍"><a href="#2-MinlO-简介与选型介绍" class="headerlink" title="2. MinlO 简介与选型介绍"></a>2. MinlO 简介与选型介绍</h2><p>⽬前可⽤于⽂件存储的⽹络服务选择有很多，⽐如阿⾥云 OSS、七⽜云、腾讯云等等，但是收费都有点⼩贵。为了帮公司节约成本，之前⼀直是使⽤ fastDFS 作为⽂件服务器，准确的说是图⽚服务器。直到我发现了 MinIO，我决定放弃 FastDFS。下⾯我从对⽐的⻆度来说说我为什么果断的放弃了 fastDFS，转⽽使⽤ MinIO 作为图⽚存储服务器。</p><h3 id="⼀、为什么使⽤-MInIO-替换了-FastDFS"><a href="#⼀、为什么使⽤-MInIO-替换了-FastDFS" class="headerlink" title="⼀、为什么使⽤ MInIO 替换了 FastDFS"></a>⼀、为什么使⽤ MInIO 替换了 FastDFS</h3><p>MinIO 是⼀个基于 Apache License v2.0 开源协议的对象存储服务。它兼容亚⻢逊 S3 云存储服务接⼝，⾮常适合于存储⼤容量⾮结构化的数据，例如图⽚、视频、⽇志⽂件、备份数据和容器/虚拟机镜像等，⽽⼀个对象⽂件可以是任意⼤⼩，从⼏ kb 到最⼤ 5T 不等。</p><h4 id="理由⼀：安装部署-运维-复杂度"><a href="#理由⼀：安装部署-运维-复杂度" class="headerlink" title="理由⼀：安装部署(运维)复杂度"></a>理由⼀：安装部署(运维)复杂度</h4><p>如果要将⼀个 fastDFS 分布式服务部署完成，需要具备以下的知识：</p><ul><li><p>linux 基础的⽬录操作</p></li><li><p>常⽤的分布式主从原理</p></li><li><p>C 语⾔代码的编译</p></li><li><p>nginx 安装部署</p></li><li><p>nginx 插件的使⽤（防盗链）</p></li></ul><p>fastdfs 部署结构⽐较复杂。看了 MinIO 的分布式的部署<a href="https://docs.min.io/docs/distributed-minio-quickstart-guide.html">分布式 MinIO 快速⼊⻔</a>，放弃 fastdfs 的决⼼就会愈发明显。<br>fastdfs 的部署是零件的组装过程，需要你去理解 fastDFS 的架构设计，才能够正确的安装部署。MinIO 在 安装的过程是⿊盒的，你不⽤去深⼊关注它的架构，也不需要你进⾏零件组装，基本上可以做到开箱即 ⽤。普通的技术⼈员就能够参与后期运维。</p><h4 id="理由⼆：⽂档"><a href="#理由⼆：⽂档" class="headerlink" title="理由⼆：⽂档"></a>理由⼆：⽂档</h4><p>fastdfs 也有⼗年了，没有官⽅⽂档，所有的⽂档全是某某公司的⽹友总结的⽂档。从这点上看 fastdfs 真的是⼀败涂地，当然发明者：阿⾥的余庆⼤神在做这个项⽬的时候可能也没有考虑 到后来会有这么多⼈⽤。</p><h4 id="理由三：开源项⽬运营组织"><a href="#理由三：开源项⽬运营组织" class="headerlink" title="理由三：开源项⽬运营组织"></a>理由三：开源项⽬运营组织</h4><p>fastdfs 是阿⾥余庆做的⼀个个⼈项⽬，在⼀些互联⽹创业公司中有应⽤，没有官⽹，不活跃，⽬前已经很少做更新。 MinIO ⽬前是由 2014 年在硅⾕创⽴的公司 MinIO.Inc 运营的开源项⽬，社区论坛的活跃度⽬前也⾮常的不错。</p><h4 id="理由四：UI-界⾯"><a href="#理由四：UI-界⾯" class="headerlink" title="理由四：UI 界⾯"></a>理由四：UI 界⾯</h4><p>我们都知道 fastdfs 默认是不带 UI 界⾯的，⽽下⾯是 MinIO 的界⾯，这个界⾯不需要单独部署，和服务端⼀并安装，开箱即⽤。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-25-41.png" alt="图片描述"></p><h4 id="理由五：性能"><a href="#理由五：性能" class="headerlink" title="理由五：性能"></a>理由五：性能</h4><p>MinIO 号称是世界上速度最快的对象存储服务器。在标准硬件上，对象存储的读/写速度最⾼可以达到 183 GB/s 和 171 GB/s。关于 fastDFS 我曾经单线程测试写了 20 万个⽂件，总共 200G，⼤约⽤时 10 个⼩ 时。总体上是很难达到 MinIO“号称的”以 G 为单位的每秒读写速度。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-28-31.png" alt="图片描述"></p><h4 id="理由六：容器化⽀持"><a href="#理由六：容器化⽀持" class="headerlink" title="理由六：容器化⽀持"></a>理由六：容器化⽀持</h4><p>MinIO 提供了与 k8s、etcd、docker 等容器化技术深度集成⽅案，可以说就是为了云环境⽽⽣的。这点是 Fastdfs 不具备的。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-31-49.png" alt="图片描述"></p><h4 id="理由七：丰富的-SDK-⽀持"><a href="#理由七：丰富的-SDK-⽀持" class="headerlink" title="理由七：丰富的 SDK ⽀持"></a>理由七：丰富的 SDK ⽀持</h4><p>fastDFS ⽬前提供了 C 和 Java SDK ，以及 PHP 扩展 SDK。</p><p>下图是 MinIO 提供的 SDK ⽀持，MinIO ⼏乎提供了所有主流开发语⾔的 SDK 以及⽂档。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-54-56.png"></p><h4 id="理由⼋：AWS-S3-标准兼容"><a href="#理由⼋：AWS-S3-标准兼容" class="headerlink" title="理由⼋：AWS S3 标准兼容"></a>理由⼋：AWS S3 标准兼容</h4><p>Amazon 的 S3 API 是对象存储领域的事实标准。MinIO 是 S3 兼容性的事实上的标准，是第⼀个采⽤ API 和第⼀个添加对 S3 Select ⽀持的标准之⼀。包括微软 Azure 在内的 750 多家公司使⽤ MinIO 的 S3 ⽹关，这⼀数字超过了业内其他公司的总和。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_20-57-47.png" alt="图片描述"></p><p>现在为了节约成本使⽤ MinIO，等你的公司壮⼤了、有钱了。不想⾃⼰运维基础设施了，就可以把对象存储放到云上，只要云⼚商⽀持 S3 标准（⽐如阿⾥云 OSS、七⽜云等），应⽤程序是不需要重新开发的。</p><h2 id="3-MinIO-的安装与基础⽤法"><a href="#3-MinIO-的安装与基础⽤法" class="headerlink" title="3. MinIO 的安装与基础⽤法"></a>3. MinIO 的安装与基础⽤法</h2><h3 id="⼀、安装"><a href="#⼀、安装" class="headerlink" title="⼀、安装"></a>⼀、安装</h3><p>我们使⽤ Docker 来安装 MinIO，步骤如下：</p><ul><li>拉取镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull minio/minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建并运⾏容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it --name minio -p <span class="token number">9000</span>:9000 -p <span class="token number">9001</span>:9001 -d-v /usr/local/docker/minio/data:/data-v /usr/local/docker/minio/config:/root/.minio-e <span class="token string">'MINIO_ROOT_USER=admin'</span>-e <span class="token string">'MINIO_ROOT_PASSWORD=admin123'</span>minio/minio server /data --console-address <span class="token string">":9001"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>开启相应的安全组端⼝</p><p>访问：<a href="http://124.222.178.129:9000/">http://124.222.178.129:9000</a></p><p>账号：admin，密码：admin123</p><p>9000：API 调⽤端⼝</p><p>9001：控制台端⼝，不指定会随机⽣成。注：控制台⽤ 9000 也能打开，最终会跳转到 9001，效果是⼀样的</p></li><li><p>防⽕墙相关</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minio默认的服务端⼝是9000，需要开放防⽕墙端⼝firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">9000</span>/tcp --permanentfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看端⼝是否开放</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --query-port<span class="token operator">=</span><span class="token number">9000</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启防⽕墙：systemctl start firewalld</p><p>关闭防⽕墙：systemctl stop firewalld</p><p>重启防⽕墙：systemctl restart firewalld</p><p><strong>相关⽂档</strong></p><ul><li><a href="https://min.io/">https://min.io/</a></li><li><a href="https://github.com/minio/minio-java/tree/release/examples">https://github.com/minio/minio-java/tree/release/examples</a></li><li><a href="https://github.com/minio/minio-java/blob/release/docs/zh_CN/APl.md">https://github.com/minio/minio-java/blob/release/docs/zh_CN/APl.md</a></li></ul><h3 id="⼆、使⽤"><a href="#⼆、使⽤" class="headerlink" title="⼆、使⽤"></a>⼆、使⽤</h3><ul><li>登录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-18-59.png"></p><ul><li>创建 bucket</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-21-14.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-22-06.png"></p><ul><li>上传⽂件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-26-42.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-28-35.png"></p><p>● 修改 bucket 访问策略为公开</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-29-44.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-30-43.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-33-14.png"></p><ul><li>访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-34-45.png"></p><h2 id="4-整合-MinIO-的-JavaSDK"><a href="#4-整合-MinIO-的-JavaSDK" class="headerlink" title="4. 整合 MinIO 的 JavaSDK"></a>4. 整合 MinIO 的 JavaSDK</h2><h3 id="⼀、整合-MinIO"><a href="#⼀、整合-MinIO" class="headerlink" title="⼀、整合 MinIO"></a>⼀、整合 MinIO</h3><p>pom.xml 引⼊：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml，服务信息要和我们上⼀节安装的 MinIO 服务⼀致，这样我们才能正常连接测试：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endPoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//124.222.178.129<span class="token punctuation">:</span><span class="token number">9000</span>  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> admin  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> admin123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写⼀个⼯具类，这个⼯具类只为⼤家演示了基础的 API。</p><p>更多的 API 请参考官⽅⽂档：<a href="https://docs.min.io/cn/java-client-api-reference.html">https://docs.min.io/cn/java-client-api-reference.html</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>file<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: MinIO⼯具类* @author: syhan* @date: 2022-04-14**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinIoTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;minio.endPoint&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> endPoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;minio.accessKey&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;minio.secretKey&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MinioClient</span> instance<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断 bucket是否存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">BucketExistsArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建 bucket     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> isExist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isExist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span>                    <span class="token class-name">MakeBucketArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                           <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * ⽂件上传     *     * @param bucketName bucket名称     * @param objectName 对象名称，⽂件名称     * @param filepath   ⽂件路径     */</span>    <span class="token keyword">public</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">uploadObject</span><span class="token punctuation">(</span>                <span class="token class-name">UploadObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * ⽂件上传     *     * @param bucketName bucket名称     * @param objectName 对象名称，⽂件名称     * @param inputStream ⽂件输⼊流     */</span>     <span class="token keyword">public</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>               <span class="token class-name">PutObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10485760</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**      * 删除⽂件      *      * @param bucketName bucket名称      * @param objectName 对象名称      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>       instance<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>                 <span class="token class-name">RemoveObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、测试"><a href="#⼆、测试" class="headerlink" title="⼆、测试"></a>⼆、测试</h3><p>写⼀个测试⽤例测试上⾯的⽅法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>file</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>file<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">MinIoTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">ObjectWriteResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtendWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span></span><span class="token class-name">SpringExtension</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description:* @author: syhan* @date: 2022-04-14**/</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinIoTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MinIoTemplate</span> minIoTemplate<span class="token punctuation">;</span>    <span class="token comment">//测试创建bucket</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testCreateBucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        minIoTemplate<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试上传⽂件对象</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testPutObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectWriteResponse</span> response <span class="token operator">=</span> minIoTemplate<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>                <span class="token string">"img/banner.jpg"</span><span class="token punctuation">,</span>                <span class="token string">"/Users/syhan/Pictures/横版背景/img7.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试删除⽂件对象</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testDeleteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        minIoTemplate<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"img/banner.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第⼀个测试⽤例创建⼀个名称为 hello 的 bucket</li><li>第⼆个测试⽤例上传了⼀个图⽚⽂件对象</li><li>第三个测试⽤例把图⽚⽂件对象删除需要注意的是当⽂件对象名称中包含⽂件夹分隔符“/”的时候,会⾃动创建⽂件⽬录。</li><li>MinIO 不提供⽂件⽬录的创建 API，⽂件⽬录随着⽂件上传动作创建。objectName 可以是/temp/xxx.jpg，可以认为⾃动创建了 temp ⽬录。</li><li>MinIO 不提供删除⽬录的 API，把⽂件⽬录下的所有⽂件都删除，就等于⽂件⽬录被删除。</li></ul><h2 id="5-fastdfs-简介及架构说明"><a href="#5-fastdfs-简介及架构说明" class="headerlink" title="5. fastdfs 简介及架构说明"></a>5. fastdfs 简介及架构说明</h2><h3 id="⼀、简介"><a href="#⼀、简介" class="headerlink" title="⼀、简介"></a>⼀、简介</h3><ul><li>fastdfs 是⼀个轻量级的开源分布式⽂件系统。</li><li>fastdfs 主要解决了⼤容量的⽂件存储和⾼并发访问的问题，⽂件存取时实现了负载均衡。</li><li>fastdfs 实现了软件⽅式的 RAID，可以使⽤廉价的 IDE 硬盘进⾏存储</li><li>⽀持存储服务器在线扩容</li><li>⽀持相同内容的⽂件只保存⼀份，节约磁盘空间</li><li>fastdfs 特别适合⼤中型⽹站使⽤，⽤来存储资源⽂件（如：图⽚、⽂档、⾳频、视频等等）</li></ul><h3 id="⼆、架构说明"><a href="#⼆、架构说明" class="headerlink" title="⼆、架构说明"></a>⼆、架构说明</h3><ul><li>Tracker：管理集群，tracker 也可以实现集群。每个 tracker 节点地位平等。收集 Storage 集群的状态。</li><li>Storage：实际保存⽂件 Storage 分为多个组，每个组之间保存的⽂件是不同的。每个组内部可以有多个成员。组成员内部保存的内容是⼀样的，组成员的地位是⼀致的，没有主从的概念。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HcQUCO.png" alt="图片描述"></p><p>说明： nginx + fileid（⽂件路径），http 访问</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/uiHWfw.png" alt="图片描述"></p><p>三、好处</p><ol><li><p>将文件的管理与具体业务应用解耦，可以多个应用共用一套 fastDFS 集群，分成不同的组。</p></li><li><p>图片访问，只需要将 http-ur 交给浏览器。nginx 提供访问服务。</p></li><li><p>方便统一备份，一组的多个 storage 就是彼此的备份。</p></li><li><p>可以将图片浏览，文件下载的压力分散给 nginx 服务。应用自己专心做业务。</p></li><li><p>缩略图，防盗链等等。</p></li></ol><h2 id="6-使用-docker-安装-Fastdfs"><a href="#6-使用-docker-安装-Fastdfs" class="headerlink" title="6. 使用 docker 安装 Fastdfs"></a>6. 使用 docker 安装 Fastdfs</h2><p>一、安装</p><ul><li>拉取镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull delron/fastdfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建本机存储目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -fR /home/docker/fastdfs/<span class="token punctuation">&#123;</span>tracker,storage<span class="token punctuation">&#125;</span><span class="token function">mkdir</span> /home/docker/fastdfs/<span class="token punctuation">&#123;</span>tracker,storage<span class="token punctuation">&#125;</span>  -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>启动 tracker</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>--network<span class="token operator">=</span>host <span class="token punctuation">\</span>--name tracker <span class="token punctuation">\</span>-v /home/docker/fastdfs/tracker:/var/fdfs <span class="token punctuation">\</span>delron/fastdfs tracker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动 storage（改成⾃⼰的地址）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>--network<span class="token operator">=</span>host <span class="token punctuation">\</span>--name storage <span class="token punctuation">\</span>-e <span class="token assign-left variable">TRACKER_SERVER</span><span class="token operator">=</span><span class="token number">124.222</span>.178.129:22122 <span class="token punctuation">\</span>-v /home/docker/fastdfs/storage:/var/fdfs <span class="token punctuation">\</span>-e <span class="token assign-left variable">GROUP_NAME</span><span class="token operator">=</span>group1 <span class="token punctuation">\</span>delron/fastdfs storage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、开启宿主机防火墙端口"><a href="#二、开启宿主机防火墙端口" class="headerlink" title="二、开启宿主机防火墙端口"></a>二、开启宿主机防火墙端口</h3><p>morunchang/fastdfs 镜像在构建的时候，为 nginx 配置的端⼝是 8888（开相应安全组）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">22122</span>/tcp --permanentfirewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">23000</span>/tcp --permanentfirewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8888</span>/tcp --permanentfirewall-cmd --reload<span class="token comment"># 查看是否开放</span>firewall-cmd --query-port<span class="token operator">=</span><span class="token number">22122</span>/tcpfirewall-cmd --query-port<span class="token operator">=</span><span class="token number">23000</span>/tcpfirewall-cmd --query-port<span class="token operator">=</span><span class="token number">8888</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试安装结果"><a href="#三、测试安装结果" class="headerlink" title="三、测试安装结果"></a>三、测试安装结果</h3><p>FastDFS 安装包中，⾃带了客户端程序，可以使⽤这个命令⾏客户端进⾏⽂件上</p><p>传及下载测试。 在宿主机执⾏命令</p><ul><li>上传⽂件（是容器⾥⾯的⽂件）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage /usr/bin/fdfs_upload_file /etc/fdfs/client.conf./README返回结果（序号不⼀定⼀样）group1/M00/00/00/wKgBW10lZHCAC8TaAAAAMT6WPfM3645854<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看 fastdfs ⽂件系统信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage fdfs_file_info /etc/fdfs/client.confgroup1/M00/00/00/wKgBW10lZHCAC8TaAAAAMT6WPfM3645854<span class="token comment"># 结果</span><span class="token builtin class-name">source</span> storage id: <span class="token number">0</span><span class="token builtin class-name">source</span> <span class="token function">ip</span> address: <span class="token number">192.168</span>.1.91<span class="token function">file</span> create timestamp: <span class="token number">2019</span>-07-10 04:07:12<span class="token function">file</span> size: <span class="token number">49</span><span class="token function">file</span> crc32: <span class="token number">1050033651</span> <span class="token punctuation">(</span>0x3E963DF3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下载⽂件，不会下载到宿主机，要到去容器⾥⾯看（注意改成你⾃⼰的⽂件序号）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage fdfs_download_file /etc/fdfs/client.confgroup1/M00/00/00/wKgBW10lZHCAC8TaAAAAMT6WPfM3645854<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看集群状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage fdfs_monitor /etc/fdfs/storage.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-开发一个自定义-fastdfs-starter"><a href="#7-开发一个自定义-fastdfs-starter" class="headerlink" title="7. 开发一个自定义 fastdfs-starter"></a>7. 开发一个自定义 fastdfs-starter</h2><h3 id="⼀、主要实现的功能"><a href="#⼀、主要实现的功能" class="headerlink" title="⼀、主要实现的功能"></a>⼀、主要实现的功能</h3><ol><li><p>实现 FastDFSClientUtil 及 properties 的⾃动装配（如何开发⼀个⾃定义的 spring-boot-starter）</p></li><li><p>加⼊连接线程池管理</p></li></ol><h3 id="⼆、实现-FastDFSClientUtil-及-properties-的⾃动装配"><a href="#⼆、实现-FastDFSClientUtil-及-properties-的⾃动装配" class="headerlink" title="⼆、实现 FastDFSClientUtil 及 properties 的⾃动装配"></a>⼆、实现 FastDFSClientUtil 及 properties 的⾃动装配</h3><p>实际上就是要⾃⼰实现⼀个 starter</p><p>第⼀步：创建项⽬</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/yA4u1f.png" alt="图片描述"></p><p>第⼆步：引⼊ maven 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.syhan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>syhan-fastdfs-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>syhan-fastdfs-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.oschina.zcx7878<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastdfs-client-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.27.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 spring-boot-configuration-processor 的作⽤是编译时⽣成 spring-configuration-metadata.json， 此⽂件主要给 IDE 使⽤，⽤于提示。</p><p>fastdfs-client-java 和 commons-pool2 是实现 fastdfs 功能及连接池的，与⾃动装配⽆关。</p><p>第三步：FastDFS 属性类 FastDFSProperties</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>fastdfs</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @program: fastdfs-spring-boot-starter * @description: * @author: SYH * @create: 2022-04-14 20:58 **/</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"syhan.fastdfs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastDFSProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> connect_timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> network_timeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tracker_server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> max_total<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> http_anti_steal_token <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> http_secret_key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> http_tracker_http_port <span class="token operator">=</span> <span class="token number">8987</span><span class="token punctuation">;</span>    <span class="token comment">//下面这个实际上不是fastdfs的属性，为了方便实用自定义属性，表示访问nginx的http地址</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> httpserver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getHttp_tracker_http_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> http_tracker_http_port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttp_tracker_http_port</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> http_tracker_http_port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>http_tracker_http_port <span class="token operator">=</span> http_tracker_http_port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getHttp_anti_steal_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> http_anti_steal_token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttp_anti_steal_token</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> http_anti_steal_token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>http_anti_steal_token <span class="token operator">=</span> http_anti_steal_token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHttp_secret_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> http_secret_key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttp_secret_key</span><span class="token punctuation">(</span><span class="token class-name">String</span> http_secret_key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>http_secret_key <span class="token operator">=</span> http_secret_key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getMax_total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> max_total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMax_total</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> max_total<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>max_total <span class="token operator">=</span> max_total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHttpserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> httpserver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttpserver</span><span class="token punctuation">(</span><span class="token class-name">String</span> httpserver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpserver <span class="token operator">=</span> httpserver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getTracker_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> tracker_server<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTracker_server</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tracker_server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tracker_server <span class="token operator">=</span> tracker_server<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getConnect_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> connect_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConnect_timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> connect_timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>connect_timeout <span class="token operator">=</span> connect_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getNetwork_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> network_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNetwork_timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> network_timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>network_timeout <span class="token operator">=</span> network_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> charset<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCharset</span><span class="token punctuation">(</span><span class="token class-name">String</span> charset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>charset <span class="token operator">=</span> charset<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余如 Base64 ⼯具类、FastDFSClient、FastDFSClientFactory、FastDFSClientPool 等查看代码</p><p>第四步：⾃动装配配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>fastdfs</span><span class="token punctuation">;</span><span class="token comment">/** * @program: fastdfs-spring-boot-starter * @description: * @author: SYH * @create: 2022-04-14 20:59 **/</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnClass</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token comment">/** * 实现最终目标把FastDFSClientUtil自动注入Spring，提供外部使用 */</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//当classpath下面有这三个类才做自动装配</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">FastDFSClientFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FastDFSClientPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FastDFSClientUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//@EnableConfigurationProperties 相当于把使用 @ConfigurationProperties的类注入。</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">FastDFSProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">FastDFSProperties</span> properties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">AutoConfigure</span><span class="token punctuation">(</span><span class="token class-name">FastDFSProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">FastDFSClientPool</span> <span class="token function">fastDFSClientPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FastDFSClientPool</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token comment">//当没有FastDFSClientUtil，就把FastDFSClientUtil作为Bean注入Spring</span>    <span class="token class-name">FastDFSClientUtil</span> fastDFSClientUtil <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">FastDFSClientUtil</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：在 resources/META-INF/下创建 spring.factories ⽂件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\top.syhan.boot.fastdfs.AutoConfigure</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、总结-Starter-的⼯作原理"><a href="#三、总结-Starter-的⼯作原理" class="headerlink" title="三、总结 Starter 的⼯作原理"></a>三、总结 Starter 的⼯作原理</h3><ul><li>Spring Boot 在启动时扫描项⽬所依赖的 JAR 包，寻找包含 spring.factories ⽂件的 JAR 包</li><li>根据 spring.factories 配置加载 AutoConfigure 类</li><li>根据 @Conditional 注解的条件，进⾏⾃动配置并将 Bean 注⼊ Spring Context</li></ul><h3 id="四、打包安装"><a href="#四、打包安装" class="headerlink" title="四、打包安装"></a>四、打包安装</h3><p>依次执⾏ mvn clean、mvn install 命令，在本地仓库安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_15-31-05.png" alt="图片描述"></p><h2 id="8-整合-fastdfs-操作文件数据"><a href="#8-整合-fastdfs-操作文件数据" class="headerlink" title="8. 整合 fastdfs 操作文件数据"></a>8. 整合 fastdfs 操作文件数据</h2><ul><li>在需要上传⽂件的项⽬中引⼊ maven 依赖坐标</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.syhan.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>syhan-fastdfs-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写配置</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syhan</span><span class="token punctuation">:</span> <span class="token key atrule">fastdfs</span><span class="token punctuation">:</span>   httpserver<span class="token punctuation">:</span> http<span class="token punctuation">:</span>//124.222.178.129<span class="token punctuation">:</span>8888/ <span class="token comment"># 在使⽤FastDFSClientUtil会得到完 整的http⽂件访问路径</span>   connect_timeout<span class="token punctuation">:</span> <span class="token number">5</span>   network_timeout<span class="token punctuation">:</span> <span class="token number">30</span>   charset<span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>   tracker_server<span class="token punctuation">:</span> <span class="token comment"># tracker_server 可以配置成数组</span>     <span class="token punctuation">-</span> 124.222.178.129<span class="token punctuation">:</span><span class="token number">22122</span>   max_total<span class="token punctuation">:</span> <span class="token number">50</span>   http_anti_steal_token<span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 如果有防盗链的话，这⾥true</span>   http_secret_key<span class="token punctuation">:</span> <span class="token comment"># 有防盗链，这⾥填secret_key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写上传接⼝</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fastdfs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastDfsController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">FastDFSClientUtil</span> fastDFSClientUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> fileId<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> originalFileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">assert</span> originalFileName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            fileId <span class="token operator">=</span> fastDFSClientUtil<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>originalFileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>fastDFSClientUtil<span class="token punctuation">.</span><span class="token function">getSourceUrl</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">,</span><span class="token string">"⽂件上传图⽚服务器失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>postman 测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/CEABzb.png"></p><ul><li>访问返回的图⽚地址，可以成功访问到上传的图⽚</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/9FwjRN.png" alt="图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis和缓存</title>
      <link href="/2022/05/01/redis%E5%92%8C%E7%BC%93%E5%AD%98/"/>
      <url>/2022/05/01/redis%E5%92%8C%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-和缓存"><a href="#redis-和缓存" class="headerlink" title="redis 和缓存"></a>redis 和缓存</h1><h2 id="1-redis-数据结构与应用场景"><a href="#1-redis-数据结构与应用场景" class="headerlink" title="1.redis 数据结构与应用场景"></a>1.redis 数据结构与应用场景</h2><h3 id="⼀、简介"><a href="#⼀、简介" class="headerlink" title="⼀、简介"></a>⼀、简介</h3><p>Redis 是开源免费， key-value 内存数据库，主要解决⾼并发、⼤数据场景下，热点数据访问的性能问题，提供⾼性能的数据快速访问。项⽬中部分数据访问⽐较频繁，对下游 DB（例如 MySQL）造成服务压⼒，这时候可以使⽤缓存来提⾼效率。<br>Redis 的主要特点包括：</p><ul><li>Redis 数据存储在内存中，可以提高热点数据的访问效率</li><li>Redis 除了支持 key-value 类型的数据，同时还支持其他多种数据结构的存储；</li><li>Redis 支持数据持久化存储，可以将数据存储在磁盘中，机器重启数据将从磁盘重新加载数据;Redis 作为缓存数据库和 MySQL 这种结构化数据库进行对比。</li><li>从数据库类型上，Redis 是 NoSQL 半结构化缓存数据库，MySQL 是结构化关系型数据库；</li><li>从读写性能上，MySQL 是持久化硬盘存储，读写速度较楼，Redis 数据存储读取都在内存，同时也可以持久化到磁盘，读写速度较快；</li><li>从使用场景上，Redis 一般作为 MySQL 数据读取性能优化的技术送型，彼此配合使用。Redis 用于存储热数据或者级存数据，并不存在相互替换的关系。</li></ul><h3 id="⼆、Redis-基本数据结构与实战场景"><a href="#⼆、Redis-基本数据结构与实战场景" class="headerlink" title="⼆、Redis 基本数据结构与实战场景"></a>⼆、Redis 基本数据结构与实战场景</h3><ol><li><p>redis 的数据结构可以理解为 Java 数据类型中的 Map&lt;String,Object&gt;,key 是 String 类型，value 是下⾯ 的类型。只不过作为⼀个独⽴的数据库单独存在，所以 Java 中的 Map 怎么⽤，redis 就怎么⽤，⼤同⼩异。</p></li><li><p>字符串类型的数据结构可以理解为 Map&lt;String,String&gt;</p></li><li><p>list 类型的数据结构可以理解为 Map&lt;String,List<String>&gt;</p></li><li><p>set 类型的数据结构可以理解为 Map&lt;String,Set<String>&gt;</p></li><li><p>hash 类型的数据结构可以理解为 Map&lt;String,HashMap&lt;String,String&gt;&gt;</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_13-23-32.png" alt="图片描述"></p><p>上图中命令行更正：Irange，不是 lrang</p><h3 id="三、redis-应用场景解析"><a href="#三、redis-应用场景解析" class="headerlink" title="三、redis 应用场景解析"></a>三、redis 应用场景解析</h3><h4 id="3-1-String-类型使用场景"><a href="#3-1-String-类型使用场景" class="headerlink" title="3.1 String 类型使用场景"></a>3.1 String 类型使用场景</h4><h5 id="场景一：商品库存数"><a href="#场景一：商品库存数" class="headerlink" title="场景一：商品库存数"></a>场景一：商品库存数</h5><p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">incr key     <span class="token comment">#增加⼀个库存</span>decr key    <span class="token comment"># 减少⼀个库存</span>incrby key <span class="token number">10</span> <span class="token comment"># 增加20个库存</span>decrby key <span class="token number">15</span>   <span class="token comment"># 减少15个库存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>set goods_id 10；设置 id 为 goodid 的商品的库存初始值为 10；</li><li>decr goods_id；当商品被购买时候，库存数据减 1。</li></ul><p>依此类推的场景：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p><h5 id="场景二：时效信息存储"><a href="#场景二：时效信息存储" class="headerlink" title="场景二：时效信息存储"></a>场景二：时效信息存储</h5><p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间，SETEX mykey 60 “value”中的第 2 个参数就是过期时间。比如，用户登录某个 App 需要获取登录验证码，验证码在 30 秒内有效。</p><ul><li>生成验证码：生成验证码并使用 String 类型在 reids 存储验证码，同时设置 30 秒的失效时间。如：SETEX validcode 30 “value”</li><li>验证过程：用户获得验证码之后，我们通过 get validcode 获取验证码，如果获取不到说明验证码过期了。</li></ul><h4 id="3-2-List-类型使用场景"><a href="#3-2-List-类型使用场景" class="headerlink" title="3.2 List 类型使用场景"></a>3.2 List 类型使用场景</h4><p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1))。</p><h5 id="场景一：消息队列实现"><a href="#场景一：消息队列实现" class="headerlink" title="场景一：消息队列实现"></a>场景一：消息队列实现</h5><p>目前有很多专业的消息队列组件 Kafka、 RabbitMQ 等。我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。list 存储就是一个队列的存储形式：</p><ul><li><p>Ipush key value； 在 key 对应 list 的头部添加字符串元素；</p></li><li><p>rpop key； 移除列表的最后一个元素，返回值为移除的元素。</p></li></ul><h5 id="场景二：最新上架商品"><a href="#场景二：最新上架商品" class="headerlink" title="场景二：最新上架商品"></a>场景二：最新上架商品</h5><p>在交易网站首页经常会有新上架产品推荐的模块，这个模块是存储了最新上架前 100 名。这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。Redis trim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrim key start end<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>start 和 end 都是由 0 开始计数的，这⾥的 0 是列表⾥的第⼀个元素（表头），1 是第⼆个元素。</p><p>如下伪代码演示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//把新上架商品添加到链表⾥ret <span class="token operator">=</span> r.lpush<span class="token punctuation">(</span><span class="token string">"new:goods"</span>, goodsId<span class="token punctuation">)</span>//保持链表 <span class="token number">100</span> 位ret <span class="token operator">=</span> r.ltrim<span class="token punctuation">(</span><span class="token string">"new:goods"</span>, <span class="token number">0</span>, <span class="token number">99</span><span class="token punctuation">)</span>//获得前 <span class="token number">100</span> 个最新上架的商品 <span class="token function">id</span> 列表newest_goods_list <span class="token operator">=</span> r.lrange<span class="token punctuation">(</span><span class="token string">"new:goods"</span>, <span class="token number">0</span>, <span class="token number">99</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-set-类型使用场景"><a href="#3-3-set-类型使用场景" class="headerlink" title="3.3 set 类型使用场景"></a>3.3 set 类型使用场景</h4><p>set 也是存储了⼀个集合列表功能。和 list 不同，set 具备去重功能(和 Java 的 Set 数据类型⼀样)。当需要存储⼀个列表信息，同时要求列表内的元素不能有重复，这时候使⽤ set ⽐较合适。与此同时，set 还提供的交集、并集、差集。</p><p>例如，在交易⽹站，我们会存储⽤户感兴趣的商品信息，在进⾏相似⽤户分析的时候， 可以通过计算两个不同⽤户之间感兴趣商品的数量来提供⼀些依据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//userid 为⽤户 ID ， goodID 为感兴趣的商品信息。sadd <span class="token string">"user:userId"</span> goodIDsadd <span class="token string">"user:101"</span> <span class="token number">1</span>sadd <span class="token string">"user:101"</span> <span class="token number">2</span>sadd <span class="token string">"user:102"</span> <span class="token number">1</span>sadd <span class="token string">"user:102"</span> <span class="token number">3</span>sinter <span class="token string">"user:101"</span> <span class="token string">"user:102"</span>    <span class="token comment"># 返回值是1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到两个⽤户相似的产品， 然后确定相似产品的类⽬就可以进⾏⽤户分析。类似的应⽤场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的⽀持。</p><h4 id="3-4-Hash-类型使用场景"><a href="#3-4-Hash-类型使用场景" class="headerlink" title="3.4 Hash 类型使用场景"></a>3.4 Hash 类型使用场景</h4><p>Redis 在存储对象（例如：⽤户信息）的时候需要对对象进⾏序列化转换然后存储，还有⼀种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。对于⼀些对象类型，还有另外⼀种⽐较⽅便的类型，那就是按照 Redis 的 Hash 类型进⾏存储。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hset key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，我们存储⼀些⽹站⽤户的基本信息， 我们可以使⽤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hset user101 name <span class="token string">"⼩明"</span>hset user101 phone <span class="token string">"123456"</span>hset user101 sex <span class="token string">"男"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就存储了⼀个⽤户基本信息，存储信息有：{name : ⼩明， phone : “123456”，sex : “男”}<br>当然这种类似场景还⾮常多， ⽐如存储订单的数据，产品的数据，商家基本信息等。⼤家可以参考来进⾏存储选型。但是不适合存储关联关系⽐较复杂的数据，那种场景还得⽤关系型数据库⽐较⽅便。</p><h4 id="3-5-Sorted-Set-类型使用场景"><a href="#3-5-Sorted-Set-类型使用场景" class="headerlink" title="3.5 Sorted Set 类型使用场景"></a>3.5 Sorted Set 类型使用场景</h4><p>Redis sorted set 的使⽤场景与 set 类似，区别是 set 不是⾃动有序的，⽽ sorted set 可以通过提供⼀个 score 参数来为存储数据排序，并且是⾃动排序，插⼊既有序。<strong>业务中如果需要⼀个有序且不重复的集合列表，就可以选择 sorted set 这种数据结构。</strong>⽐如：商品的购买热度可以将购买总量 num 当做商品列表的 score，这样获取最热⻔的商品时就是可以⾃动按售卖总量排好序。</p><h2 id="2-整合单例模式"><a href="#2-整合单例模式" class="headerlink" title="2. 整合单例模式"></a>2. 整合单例模式</h2><p>redis 集群模式和哨兵模式⾼可⽤的安装与运维，需要去专⻔的 redis 课程学习。这⾥主要⾯向 SpringBoot 整合 redis 来开发，不涉及 redis 集群⾼可⽤及运维知识。</p><h3 id="⼀、spring-data-redis-简介"><a href="#⼀、spring-data-redis-简介" class="headerlink" title="⼀、spring-data-redis 简介"></a>⼀、spring-data-redis 简介</h3><p>Spring Boot 提供了对 Redis 集成的组件包：spring-boot-starter-data-redis，它依赖于 spring-data-redis 和 lettuce。Spring Boot 1.0 默认使⽤的是 Jedis 客户端，2.0 替换成了 Lettuce， spring-boot-starter-data-redis 为我们隔离了其中的差异性。</p><ol><li><p>Lettuce：是⼀个可伸缩线程安全的 Redis 客户端，多个线程可以共享同⼀个 RedisConnection，它 利⽤优秀 Netty NIO 框架来⾼效地管理多个连接。</p></li><li><p>Spring Data：是 Spring 框架中的⼀个主要项⽬，⽬的是为了简化构建基于 Spring 框架应⽤的数据访问，包括⾮关系数据库、Map-Reduce 框架、云数据服务等，另外也包含对关系数据库的访问⽀持。</p></li><li><p>Spring Data Redis：是 Spring Data 项⽬中的⼀个主要模块，实现了对 Redis 客户端 API 的⾼度封装，使对 Redis 的操作更加便捷。</p></li></ol><h3 id="⼆、整合-spring-data-redis"><a href="#⼆、整合-spring-data-redis" class="headerlink" title="⼆、整合 spring data redis"></a>⼆、整合 spring data redis</h3><p>引入依赖包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入 commons-pool 2 是因为 Lettuce 需要使用 commons-pool 2 创建 Redis 连接池.<br>application 全局配置 redis 的单节点实例:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    database<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># Redis 数据库索引（默认为 0）</span>    host<span class="token punctuation">:</span> 127.0.0.1 <span class="token comment"># Redis 服务器地址</span>    port<span class="token punctuation">:</span> <span class="token number">6379</span> <span class="token comment"># Redis 服务器连接端⼝</span>    password<span class="token punctuation">:</span> <span class="token number">123456</span> <span class="token comment"># Redis 服务器连接密码（默认为空）</span>    timeout<span class="token punctuation">:</span>  5000  <span class="token comment"># 连接超时，单位ms</span>    lettuce<span class="token punctuation">:</span>      pool<span class="token punctuation">:</span>        max<span class="token punctuation">-</span><span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment"># 连接池最⼤连接数（使⽤负值表示没有限制） 默认 8</span>        max<span class="token punctuation">-</span><span class="token key atrule">wait</span><span class="token punctuation">:</span> <span class="token number">-1</span> <span class="token comment"># 连接池最⼤阻塞等待时间（使⽤负值表示没有限制） 默认 -1</span>        max<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment"># 连接池中的最⼤空闲连接 默认 8</span>        min<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 连接池中的最⼩空闲连接 默认 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用-redisTemplate-操作数据"><a href="#3-使用-redisTemplate-操作数据" class="headerlink" title="3.使用 redisTemplate 操作数据"></a>3.使用 redisTemplate 操作数据</h2><h3 id="⼀、redis-模板封装类"><a href="#⼀、redis-模板封装类" class="headerlink" title="⼀、redis 模板封装类"></a>⼀、redis 模板封装类</h3><p>RedisTemplate 的封装使我们能够更⽅便的进⾏ redis 数据操作，⽐直接使⽤ Jedis 或者 Lettuce 的 javaSDK 要⽅便很多。RedisTemplate 作为 java 操作 redis 数据库的 API 模板更通⽤，可以操作所有的 redis 数据类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注⼊RedisTemplate，更通⽤</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span><span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token class-name">ValueOperations</span> <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作字符串</span><span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作 hash</span><span class="token class-name">ListOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> listOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作 list</span><span class="token class-name">SetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> setOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作 set</span><span class="token class-name">ZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> zSetOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作有序 set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ListOperations、ValueOperations、HashOperations、SetOperations、ZSetOperations 等都是针对专有数据类型进⾏操作，使⽤起来更简洁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> valueOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis string类型存取Java Object(序列化反序列化)</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的hash类型存储java Object</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">ListOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> listOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的list类型 存储java Object</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">SetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> setOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis的set类型存 储java Object</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">ZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> zSetOperations<span class="token punctuation">;</span>  <span class="token comment">//以redis的zset类型存储java Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、基础数据-Java-类"><a href="#⼆、基础数据-Java-类" class="headerlink" title="⼆、基础数据 Java 类"></a>⼆、基础数据 Java 类</h3><p>为了⽅便后⾯写代码解释 API 的使⽤⽅法，写测试⽤例。我们需要先准备数据对象 Person，注意要实现 Serializable 接⼝，为什么⼀定要实现这个接⼝？我们下⽂解释。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8985545025228238754L</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> id<span class="token punctuation">;</span>  <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>  <span class="token class-name">Address</span> address<span class="token punctuation">;</span>   <span class="token comment">//注意这⾥，不是基础数据类型</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> lastname<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备数据对象 Address</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8985545025228238771L</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> city<span class="token punctuation">;</span>  <span class="token class-name">String</span> country<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">,</span> <span class="token class-name">String</span> country<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、StringRedisTemplate"><a href="#三、StringRedisTemplate" class="headerlink" title="三、StringRedisTemplate"></a>三、StringRedisTemplate</h3><p>除了 RedisTemplate 模板类，还有另⼀个模板类叫做 StringRedisTemplate 。⼆者都提供了⽤来操作 redis 数据库的 API。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>   <span class="token comment">//以String序列化⽅式 保存数据的通⽤模板类</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>   <span class="token comment">//默认以JDK⼆进 制⽅式保存数据的通⽤模板类</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将数据存⼊redis数据库</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"player:srt"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"player:rt"</span><span class="token punctuation">,</span>person<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⼆者的区别在于</p><ul><li><p>操作的数据类型不同，以 List 类型为例：RedisTemplate 操作 <code>List&lt;Object&gt;</code>,StringRedisTemplate 操作 <code>List&lt;String&gt;</code></p></li><li><p>序列化数据的⽅式不同，RedisTemplate 使⽤的是 JdkSerializationRedisSerializer 存⼊数据会将数据先序列化成字节数组然后在存⼊ Redis 数据库。 StringRedisTemplate 使⽤的是 StringRedisSerializer redis 持久化的 java 数据类为什么要实现 Serializable 接⼝？因为 RedisTemplate 默认使⽤的是 JdkSerializationRedisSerializer，也就是使⽤ Java JDK 默认的序列化⽅式存储数据。如果不实现 Serializable 接⼝，JDK 序列化就会报错，这是 java 基础知识。如果我们可以不使⽤ JDK 默认的序列化⽅式，就不需要实现这个 Serializable 接⼝。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-17-02.png" alt="图片描述"></p><p>需要注意的是因为 RedisTemplate 和 StringRedisTemplate 的默认序列化存储⽅式不⼀样，所以⼆者存储的数据并不能通⽤。也就是说 RedisTemplate 存的数据只能⽤ RedisTemplate 去取，对于 StringRedisTemplate 也是⼀样。</p><h3 id="四、解决-key-value-乱码问题"><a href="#四、解决-key-value-乱码问题" class="headerlink" title="四、解决 key-value 乱码问题"></a>四、解决 key-value 乱码问题</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-43-28.png" alt="图片描述"></p><p>其实这个不是严格意义上的乱码，是 JDK 的⼆进制序列化之后的存储⽅式。</p><p>如何解决？看下⽂的配置类代码</p><ul><li><p>采⽤ StringRedisSerializer 对 key 进⾏序列化（字符串格式）</p></li><li><p>采⽤ Jackson2JsonRedisSerializer 对 value 将进⾏序列化（JSON 格式）</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>              objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重点在这四⾏代码</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乱码问题的症结在于对象的序列化问题：RedisTemplate 默认使⽤的是 JdkSerializationRedisSerializer （⼆进制存储），StringRedisTemplate 默认使⽤的是 StringRedisSerializer（redis 字符串格式存储）。</p><p>序列化⽅式对⽐：</p><ul><li><p>JdkSerializationRedisSerializer: 使⽤ JDK 提供的序列化功能。 优点是反序列化时不需要提供类型信息(class)，但缺点是需要实现 Serializable 接⼝，还有序列化后的结果⾮常庞⼤，是 JSON 格式的 5 倍左右，这样就会消耗 redis 服务器的⼤量内存。⽽且是以⼆进制形式保存，⾃然⼈⽆法理解。</p></li><li><p>Jackson2JsonRedisSerializer： 使⽤ Jackson 库将对象序列化为 JSON 字符串。优点是速度快，序列化后的字符串短⼩精悍，不需要实现 Serializable 接⼝。似乎没啥缺点。</p></li><li><p>StringRedisSerializer 序列化之后的结果，⾃然⼈也是可以理解，但是 value 只能是 String 类型，不能是 Object。</p></li></ul><h3 id="五、使用-redisTemplate-存取-redis-各种数据类型"><a href="#五、使用-redisTemplate-存取-redis-各种数据类型" class="headerlink" title="五、使用 redisTemplate 存取 redis 各种数据类型"></a>五、使用 redisTemplate 存取 redis 各种数据类型</h3><p>下⾯的各种数据类型操作的 api 和 redis 命令⾏ api 的含义⼏乎是⼀致的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigTest2</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> valueOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis string类型存取Java Object(序列化反序列化)</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的hash类型存储java Object</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">ListOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> listOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的list类型存储java Object</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">SetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> setOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis的set类型存储java Object</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">ZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> zSetOperations<span class="token punctuation">;</span>  <span class="token comment">//以redis的zset类型存储java Object</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testValueObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//向redis数据库保存数据(key,value),数据有效期20秒</span>         valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"player:1"</span><span class="token punctuation">,</span>person<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20秒之后数据消失</span>         <span class="token comment">//根据key把数据取出来</span>         <span class="token class-name">Person</span> getBack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"player:1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getBack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"playerset"</span><span class="token punctuation">,</span>person<span class="token punctuation">,</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//向Set中添加数据项</span>        <span class="token comment">//members获取Redis Set中的所有记录</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> setOperations<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token string">"playerset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//包含kobe和curry的数组</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HashOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"kobe"</span><span class="token punctuation">,</span><span class="token string">"byrant"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使⽤hash的⽅法存储对象数据（⼀个属性⼀个属性的存，下节教⼤家简单的⽅法）</span>              hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"lastname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取出⼀个对象的属性值，有没有办法⼀次将整个对象取出来？有，下节介绍</span>        <span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>hashOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//kobe</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token class-name">ListOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将数据对象放⼊队列</span>        listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三丰"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三⻛"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从左侧存，再从左侧取，所以取出来的数据是后放⼊的curry</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> listOperations<span class="token punctuation">.</span><span class="token function">leftPop</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//curry对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-使用-Redis-Repository-操作数据"><a href="#4-使用-Redis-Repository-操作数据" class="headerlink" title="4. 使用 Redis Repository 操作数据"></a>4. 使用 Redis Repository 操作数据</h2><p>通过集成 spring-boot-starter-data-redis 之后⼀共有三种 redis hash 数据操作⽅式可以供我们选择</p><ul><li><p>⼀个属性、⼀个属性的存取</p></li><li><p>使⽤ Jackson2HashMapper 存取对象</p></li><li><p>使⽤ RedisRepository 的对象操作（本节核⼼内容）</p></li></ul><h3 id="一、一个属性、一个属性的存取"><a href="#一、一个属性、一个属性的存取" class="headerlink" title="一、一个属性、一个属性的存取"></a>一、一个属性、一个属性的存取</h3><p>这种⽅式在上⼀节中的代码，已经得以体现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HashOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使⽤hash的⽅法存储对象数据（⼀个属性⼀个属性的存，下节教⼤家简单的⽅法）</span>    hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"lastname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>hashOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>⼀个 hash 代表⼀个对象的数据</p></li><li><p>⼀个对象有多个属性 key、value 键值对数据，每⼀组键值对都可以单独存取</p></li></ul><h3 id="⼆、使⽤-Jackson2HashMapper-存取对象"><a href="#⼆、使⽤-Jackson2HashMapper-存取对象" class="headerlink" title="⼆、使⽤ Jackson2HashMapper 存取对象"></a>⼆、使⽤ Jackson2HashMapper 存取对象</h3><p>上⼀⼩节我们操作 hash 对象的时候是⼀个属性⼀个属性设置的，那我们有没有办法将对象⼀次性 hash ⼊库呢？可以使⽤ jacksonHashOperations 和 Jackson2HashMapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigTest3</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> jacksonHashOperations<span class="token punctuation">;</span>        <span class="token comment">//注意这⾥的false，下⽂会讲解</span>    <span class="token keyword">private</span> <span class="token class-name">HashMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> jackson2HashMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2HashMapper</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHashPutAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"洛杉矶"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将对象以hash的形式放⼊redis数据库</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> mappedHash <span class="token operator">=</span> jackson2HashMapper<span class="token punctuation">.</span><span class="token function">toHash</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        jacksonHashOperations<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"player:"</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mappedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将对象从数据库取出来</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> loadedHash <span class="token operator">=</span> jacksonHashOperations<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">"player:"</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> map <span class="token operator">=</span> jackson2HashMapper<span class="token punctuation">.</span><span class="token function">fromHash</span><span class="token punctuation">(</span>loadedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> getback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Junit5,验证放进去的和取出来的数据⼀致</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>getback<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使⽤这种⽅式可以⼀次性存取 Java 对象为 redis 数据库的 hash 数据类型。需要注意的是：执⾏上⾯的测试⽤例，Person 和 Address ⼀定要有 public ⽆参构造⽅法，在将 map 转换成 Person 或 Address 对象的时候⽤到，如果没有的话会报错。</p><h3 id="三、使⽤-RedisRepository-的对象操作"><a href="#三、使⽤-RedisRepository-的对象操作" class="headerlink" title="三、使⽤ RedisRepository 的对象操作"></a>三、使⽤ RedisRepository 的对象操作</h3><p>使⽤ RedisRepository 进⾏ redis 数据操作，它不只是能简单地存取数据，还可以做很多 CURD 操作。使⽤起来和⽤ JPA 进⾏关系型数据库的单表操作，⼏乎是⼀样的。</p><p>⾸先，我们需要在需要操作的 java 实体类上⾯加上@RedisHash 注解，并使⽤@Id 为该实体类指定 id。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span>   <span class="token comment">//注意这⾥的person，下⽂会说明</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Id</span>  <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token comment">//其他和上⼀节代码⼀样</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后写⼀个 PersonRepository ，继承 CrudRepository，是不是也和 JPA 差不多？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//泛型第⼆个参数是id的数据类型</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">// 继承CrudRepository，获取基本的CRUD操作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CrudRepository 默认为我们提供了下⾯的这么多⽅法，我们直接调⽤就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-53-02.png" alt="图片描述"></p><p>然后进⾏下⾯的测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisRepositoryTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">PersonRepository</span> personRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rand<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存</span>        personRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//取</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> op <span class="token operator">=</span> personRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//统计Person的数量</span>        personRepository<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除person对象rand</span>        personRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：需要注意的是 RedisRepository 在存取对象数据的时候，实际上使⽤了 redis 的 2 种数据类型</p><ul><li><p>第⼀种是 Set 类型，⽤于保存每⼀个存⼊ redis 的对象（Person）的 id。我们可以利⽤这个 Set 实现 person 对象集合类的操作，⽐如说：count()统计 redis 数据库中⼀共保存了多少个 person。</p></li><li><p>第⼆种是 Hash 类型，是⽤来保存 Java 对象的，id 是 RedisRepository 帮我们⽣成的。</p></li></ul><h2 id="5-spring-cache-缓存基本用法"><a href="#5-spring-cache-缓存基本用法" class="headerlink" title="5. spring cache 缓存基本用法"></a>5. spring cache 缓存基本用法</h2><h3 id="一、为什么要做缓存"><a href="#一、为什么要做缓存" class="headerlink" title="一、为什么要做缓存"></a>一、为什么要做缓存</h3><ul><li><p>提升性能绝⼤多数情况下，关系型数据库 select 查询是出现性能问题最⼤的地⽅。⼀⽅⾯，select 会有很多像 join、group、order、like 等这样丰富的语义，⽽这些语义是⾮常耗性能的；另⼀⽅⾯，⼤多数应⽤都是读多写少，所以加剧了慢查询的问题。分布式系统中远程调⽤也会耗很多性能，因为有⽹络开销，会导致整体的响应时间下降。为了挽救这样的性能开销，在业务允许的情况（不需要太实时的数据）下，使⽤缓存是⾮常必要的事情。</p></li><li><p>缓解数据库压⼒当⽤户请求增多时，数据库的压⼒将⼤⼤增加，通过缓存能够⼤⼤降低数据库的压⼒。</p></li></ul><h3 id="⼆、常⽤缓存操作流程"><a href="#⼆、常⽤缓存操作流程" class="headerlink" title="⼆、常⽤缓存操作流程"></a>⼆、常⽤缓存操作流程</h3><p>使⽤缓存最关键的⼀点就是保证：缓存与数据库的数据⼀致性，该怎么去做？下图是⼀种最常⽤的缓存操作模式，来保证数据⼀致性。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-55-32.png" alt="图片描述"></p><ul><li><p><strong>更新写数据</strong>：先把数据存到数据库中，然后再让缓存失效或更新。缓存操作失败，数据库事务回滚。</p></li><li><p><strong>删除写数据</strong>: 先从数据库⾥⾯删掉数据，再从缓存⾥⾯删掉。缓存操作失败，数据库事务回滚。</p></li><li><p><strong>查询读数据</strong></p><ul><li><strong>缓存命中</strong>：先去缓存 cache 中取数据，取到后返回结果。</li><li><strong>缓存失效</strong>：应⽤程序先从 cache 取数据，没有得到，则从数据库中取数据，成功后，在将数据放到缓存中。</li></ul></li></ul><p>如果上⾯的这些更新、删除、查询操作流程全都由程序员通过编码来完成的话</p><ul><li><p>因为加⼊缓存层，程序员的编码量⼤⼤增多</p></li><li><p>缓存层代码和业务代码耦合，造成难以维护的问题。</p></li></ul><h3 id="三、整合-Spring-Cache"><a href="#三、整合-Spring-Cache" class="headerlink" title="三、整合 Spring Cache"></a>三、整合 Spring Cache</h3><p>我们可以使⽤ Spring cache 解决上⾯遇到的两个问题，Spring cache 通过注解的⽅式来操作缓存，⼀定程度上减少了程序员缓存操作代码编写量。注解添加和移除都很⽅便，不与业务代码耦合，容易维护。</p><p>第⼀步：pom.xml 添加 Spring Boot 的 jar 依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第⼆步：添加⼊⼝启动类 @EnableCaching 注解开启 Caching</p><p>在 Spring Boot 中通过@EnableCaching 注解⾃动化配置合适的缓存管理器（CacheManager），SpringBoot 根据下⾯的顺序去侦测缓存提供者，也就是说 Spring Cache ⽀持下⾯的这些缓存框架：</p><ul><li><p>Generic</p></li><li><p>JCache (JSR-107) (EhCache 3, Hazelcast, Infinispan, and others)</p></li><li><p>EhCache 2.x</p></li><li><p>Hazelcast</p></li><li><p>Infinispan</p></li><li><p>Couchbase</p></li><li><p>Redis</p></li><li><p>Caffeine</p></li><li><p>Simple</p></li></ul><h3 id="四、在-ArticleController-类上实现一个简单的例子"><a href="#四、在-ArticleController-类上实现一个简单的例子" class="headerlink" title="四、在 ArticleController 类上实现一个简单的例子"></a>四、在 ArticleController 类上实现一个简单的例子</h3><p>第⼀次访问⾛数据库，第⼆次访问就⾛缓存了, 可以⾃⼰打⽇志试⼀下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span> <span class="token string">"/article/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span>  <span class="token class-name">AjaxResponse</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使⽤ redis 缓存，被缓存的对象（函数返回值）有⼏个⾮常需要注意的点：</p><ol><li><p>必须实现⽆参的构造函数</p></li><li><p>需要实现 Serializable 接⼝和定义 serialVersionUID （因为缓存需要使⽤ JDK 的⽅式序列化和反序列化）。</p></li></ol><h3 id="五、更改-Redis-缓存的序列化方式"><a href="#五、更改-Redis-缓存的序列化方式" class="headerlink" title="五、更改 Redis 缓存的序列化方式"></a>五、更改 Redis 缓存的序列化方式</h3><p>让缓存使⽤ JDK 默认的序列化和反序列化⽅式⾮常不友好，我们可以修改为使⽤ JSON 序列化与反序列化的⽅式，可读性更强，体积更⼩，速度更快。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这个函数是上⼀节的内容</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>                     objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重点在这四⾏代码</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//本节的重点配置，让Redis缓存的序列化⽅式使⽤</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//不在使⽤JDK默认的序列化⽅式</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">RedisCacheWriter</span> redisCacheWriter <span class="token operator">=</span> <span class="token class-name">RedisCacheWriter</span><span class="token punctuation">.</span><span class="token function">nonLockingRedisCacheWriter</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">RedisCacheConfiguration</span> redisCacheConfiguration <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span>redisCacheWriter<span class="token punctuation">,</span> redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步任务与定时任务</title>
      <link href="/2022/05/01/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/05/01/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="异步任务与定时任务"><a href="#异步任务与定时任务" class="headerlink" title="异步任务与定时任务"></a>异步任务与定时任务</h1><h2 id="1-实现-Async-异步任务"><a href="#1-实现-Async-异步任务" class="headerlink" title="1. 实现 Async 异步任务"></a>1. 实现 Async 异步任务</h2><h3 id="⼀、环境准备"><a href="#⼀、环境准备" class="headerlink" title="⼀、环境准备"></a>⼀、环境准备</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HkuXGu.png"></p><p>在 Spring Boot ⼊⼝类上配置 @EnableAsync 注解开启异步处理。</p><p>创建任务抽象类 AbstractTask，并分别配置三个任务⽅法 doTaskOne()，doTaskTwo()，doTaskThree()。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始做任务⼀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务⼀，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始做任务⼆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务⼆，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始做任务三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务三，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、同步调⽤"><a href="#⼆、同步调⽤" class="headerlink" title="⼆、同步调⽤"></a>⼆、同步调⽤</h3><p>下⾯通过⼀个简单示例来直观的理解什么是同步调⽤：</p><ul><li>定义 Task 类，继承 AbstractTask，三个处理函数分别模拟三个执⾏任务的操作，操作消耗时间随机取（10 秒内）。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<strong>单元测试</strong>⽤例中，注⼊ SyncTask 对象，并在测试⽤例中执⾏ doTaskOne()，doTaskTwo()， doTaskThree() 三个⽅法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SyncTaskTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">SyncTask</span> syncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSyncTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        syncTask<span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        syncTask<span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        syncTask<span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执⾏单元测试，可以看到类似如下输出：</li></ul><p>开始做任务⼀ 完成任务⼀，耗时：6720 毫秒 开始做任务⼆ 完成任务⼆，耗时：6604 毫秒 开始做任务三 完成任务三，耗时：9448 毫秒</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/tyjy5t.png"></p><p>任务⼀、任务⼆、任务三顺序的执⾏完了，换⾔之 doTaskOne()，doTaskTwo()，doTaskThree() 三个⽅法按调⽤顺序的先后执⾏完成。</p><h3 id="三、异步调⽤"><a href="#三、异步调⽤" class="headerlink" title="三、异步调⽤"></a>三、异步调⽤</h3><p>上述的<strong>同步调⽤</strong>虽然顺利的执⾏完了三个任务，但是可以看到<strong>执⾏时间⽐较⻓</strong>，若这三个任务本身之间<strong>不存在依赖关系</strong>，可以<strong>并发执⾏</strong>的话，同步调⽤在<strong>执⾏效率</strong>⽅⾯就⽐较差，可以考虑通过<strong>异步调⽤</strong>的⽅式来 并发执⾏。</p><ul><li><p>在 Application 启动类上⾯加上@EnableAsync</p></li><li><p>创建 AsyncTask 类，分别在⽅法上配置 @Async 注解，将原来的<strong>同步⽅法</strong>变为<strong>异步⽅法</strong>。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>单元测试</strong>⽤例中，注⼊ AsyncTask 对象，并在测试⽤例中执⾏ doTaskOne()，doTaskTwo()，doTaskThree() 三个⽅法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AsyncTaskTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncTask</span> asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyncTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执⾏其他代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执⾏单元测试，可以看到类似如下输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">开始做任务三开始做任务⼀开始做任务⼆<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果反复执⾏单元测试，可能会遇到各种不同的结果，⽐如：</p><ol><li><p>没有任何任务相关的输出</p></li><li><p>有部分任务相关的输出</p></li><li><p>乱序的任务相关的输出</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/L9U836.png"></p><p>原因是⽬前 doTaskOne()，doTaskTwo()，doTaskThree() 这三个⽅法已经异步并发执⾏了。主程序在<strong>异步调⽤</strong>之后，主程序并不会理会这三个函数是否执⾏完成了，由于没有其他需要执⾏的内容，所以程序就<strong>⾃动结束</strong>了，导致了任务<strong>不完整</strong>或是<strong>没有输出</strong>相关内容的情况。</p><blockquote><p>注意：@Async 所修饰的函数不要定义为 static 类型，这样异步调⽤不会⽣效。</p></blockquote><h3 id="四、-异步回调"><a href="#四、-异步回调" class="headerlink" title="四、 异步回调"></a>四、 异步回调</h3><p>为了让 doTaskOne()，doTaskTwo()，doTaskThree() 能正常结束，假设我们需要统计⼀下三个任务<strong>并发执⾏</strong>共耗时多少，这就需要等到上述三个函数都完成动⽤之后记录时间，并计算结果。</p><p>那么我们如何判断上述三个<strong>异步调⽤</strong>是否已经执⾏完成呢？我们需要使⽤<code>Future&lt;T&gt;</code>来返回<strong>异步调⽤</strong>的<strong>结果</strong>。</p><ul><li>创建 AsyncCallBackTask 类， 声明 doTaskOneCallback()，doTaskTwoCallback()，doTaskThreeCallback() 三个⽅法，对原有的 三个⽅法进⾏包装。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCallBackTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼀完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼆完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务三完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>单元测试</strong>⽤例中，注⼊ AsyncCallBackTask 对象，并在测试⽤例中执⾏ doTaskOneCallback()，doTaskTwoCallback()，doTaskThreeCallback() 三个⽅法。循环调⽤ Future 的 isDone() ⽅法 等待三个<strong>并发任务</strong>执⾏完成，记录最终执⾏时间。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">AsyncCallBackTask</span> asyncCallBackTask<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyncCallbackTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task1 <span class="token operator">=</span> asyncCallBackTask<span class="token punctuation">.</span><span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task2 <span class="token operator">=</span> asyncCallBackTask<span class="token punctuation">.</span><span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task3 <span class="token operator">=</span> asyncCallBackTask<span class="token punctuation">.</span><span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 三个任务都调⽤完成，退出循环等待</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>task1<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>task2<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>task3<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务全部完成，总耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看都做了哪些改变：</p><ul><li><p>在测试⽤例⼀开始记录开始时间；</p></li><li><p>在调⽤三个异步函数的时候，返回 Future 类型的结果对象；</p></li><li><p>在调⽤完三个异步函数之后，开启⼀个循环，根据返回的 Future 对象来判断三个异步函数是否都结束了。若都结束，就结束循环；若没有都结束，就等 1 秒后再判断。</p></li><li><p>跳出循环之后，根据结束时间 - 开始时间，计算出三个任务并发执⾏的总耗时。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/2vqFvR.png"></p><p>执⾏⼀下上述的单元测试，可以看到如下结果：</p><p>开始做任务三 开始做任务⼀ 开始做任务⼆ 完成任务⼆，耗时：2572 毫秒 完成任务⼀，耗时：7333 毫秒完成任务三，耗时：7647 毫秒 任务全部完成，总耗时：8013 毫秒</p><p>可以看到，通过<strong>异步调⽤</strong>，让任务⼀、任务⼆、任务三<strong>并发执⾏</strong>，有效减少了程序的<strong>运⾏总时间</strong>。</p><h2 id="2-为异步任务规划线程池"><a href="#2-为异步任务规划线程池" class="headerlink" title="2. 为异步任务规划线程池"></a>2. 为异步任务规划线程池</h2><h3 id="一、Spring-Boot-任务线程池"><a href="#一、Spring-Boot-任务线程池" class="headerlink" title="一、Spring Boot 任务线程池"></a>一、Spring Boot 任务线程池</h3><p><strong>线程池的作用</strong></p><ol><li>防止资源占用无限的扩张</li><li>调用过程省去资源的创建和销毀所占用的时间</li></ol><p>在上⼀节中，我们的⼀个异步任务打开了⼀个线程，完成后销毁。在⾼并发环境下，不断的分配新资源，可能导致系统资源耗尽。所以为了避免这个问题，我们为异步任务规划⼀个线程池。当然，如果没有配置线程池的话，springboot 会⾃动配置⼀个 ThreadPoolTaskExecutor 线程池到 bean 当中。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 核⼼线程数</span><span class="token key attr-name">spring.task.execution.pool.core-size</span><span class="token punctuation">=</span><span class="token value attr-value">8  </span><span class="token comment"># 最⼤线程数</span><span class="token key attr-name">spring.task.execution.pool.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">16</span><span class="token comment"># 空闲线程存活时间</span><span class="token key attr-name">spring.task.execution.pool.keep-alive</span><span class="token punctuation">=</span><span class="token value attr-value">60s</span><span class="token comment"># 是否允许核⼼线程超时</span><span class="token key attr-name">spring.task.execution.pool.allow-core-thread-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># 线程队列数量</span><span class="token key attr-name">spring.task.execution.pool.queue-capacity</span><span class="token punctuation">=</span><span class="token value attr-value">100</span><span class="token comment"># 线程关闭等待</span><span class="token key attr-name">spring.task.execution.shutdown.await-termination</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">spring.task.execution.shutdown.await-termination-period</span><span class="token punctuation">=</span><span class="token comment"># 线程名称前缀</span><span class="token key attr-name">spring.task.execution.thread-name-prefix</span><span class="token punctuation">=</span><span class="token value attr-value">task-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、⾃定义线程池"><a href="#⼆、⾃定义线程池" class="headerlink" title="⼆、⾃定义线程池"></a>⼆、⾃定义线程池</h3><p>有的时候，我们希望将系统内的⼀类任务放到⼀个线程池，另⼀类任务放到另外⼀个线程池，所以使⽤ Spring Boot ⾃带的任务线程池就捉襟⻅肘了。下⾯介绍⾃定义线程池的⽅法。</p><p>创建⼀个<strong>线程池配置类</strong>TaskConfiguration ，并配置⼀个<strong>任务线程池对象</strong>taskExecutor。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">taskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"taskExecutor-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/qsyDx7.png"></p><p>上⾯我们通过使⽤ ThreadPoolTaskExecutor 创建了⼀个 线程池，同时设置了以下这些参数：</p><table><thead><tr><th>线程池属性</th><th>属性的作用</th><th>上下文的设置初始值</th></tr></thead><tbody><tr><td>核⼼线程数 CorePoolSize</td><td>线程池创建时候初始化的线程</td><td>10</td></tr><tr><td>最⼤线程数 MaxPoolSize</td><td>线程池最大的线程数，只有在缓冲队列满了之后，才会利请超过核心线程数的线程</td><td>20</td></tr><tr><td>缓冲任务队列 QueueCapacity</td><td>用来缓冲执行任务的队列</td><td>200</td></tr><tr><td>允许线程的空闲时间 KeepAliveSeconds</td><td>超过了核心线程之外的线程，在空闲时间到达之后，没活干的线程会被销毀</td><td>60 秒</td></tr><tr><td>线程池名的前缀 ThreadNamePrefix</td><td>可以用于定位处理任务所在的线程池</td><td>taskExecutor-</td></tr><tr><td>线程池对任务的 Reject 策略 RejectedExecutionHandler</td><td>当线程池运行饱和，或者线程池处于 shutdown 临界状态时，用来拒绝一个任务的执行</td><td>CallerRunsPolicy</td></tr></tbody></table><p>Reject 策略预定义有四种：</p><ul><li><p>AbortPolicy，⽤于被拒绝任务的处理程序，它将抛出 RejectedExecutionException。</p></li><li><p>CallerRunsPolicy，⽤于被拒绝任务的处理程序，它直接在 execute ⽅法的调⽤线程中运⾏被拒绝的任务。</p></li><li><p>DiscardOldestPolicy，⽤于被拒绝任务的处理程序，它放弃最旧的未处理请求，然后重试 execute。</p></li><li><p>DiscardPolicy，⽤于被拒绝任务的处理程序，默认情况下它将丢弃被拒绝的任务。</p></li></ul><p>创建 AsyncExecutorTask 类，三个任务的配置和 AsyncTask ⼀样，不同的是 @Async 注解需要指定前⾯配置的<strong>线程池的名称</strong>taskExecutor。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncExecutorTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务⼀，当前线程："</span> <span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼀完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务⼆，当前线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼆完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务三，当前线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务三完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>单元测试</strong>⽤例中，注⼊ AsyncExecutorTask 对象，并在测试⽤例中执⾏ doTaskOne()，doTaskTwo()，doTaskThree() 三个⽅法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncExecutorTaskTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncExecutorTask</span> task<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyncExecutorTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        task<span class="token punctuation">.</span><span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器推送技术</title>
      <link href="/2022/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器推送技术"><a href="#服务器推送技术" class="headerlink" title="服务器推送技术"></a>服务器推送技术</h1><h2 id="1-主流服务器推送技术说明"><a href="#1-主流服务器推送技术说明" class="headerlink" title="1. 主流服务器推送技术说明"></a>1. 主流服务器推送技术说明</h2><h3 id="⼀、需求与背景"><a href="#⼀、需求与背景" class="headerlink" title="⼀、需求与背景"></a>⼀、需求与背景</h3><p>若⼲年前，所有的请求都是由浏览器端发起，浏览器本身并没有接受请求的能⼒。所以⼀些特殊需求都是⽤ ajax 轮询的⽅式来实现的。⽐如：</p><ul><li>股价展示页面实时的获取股价更新</li><li>赛事的文字直播，实时更新赛况</li><li>通过页面启动一个任务，前媏想知道任务后台的实时运行状态</li></ul><p>通常的做法就是需要以较⼩的间隔，频繁的向服务器建⽴ http 连接询问任务状态的更新，然后刷新⻚⾯显示状态。但这样做的后果就是浪费⼤量流量，对服务端造成了⾮常⼤的压⼒。</p><h3 id="⼆、服务端推送常⽤技术"><a href="#⼆、服务端推送常⽤技术" class="headerlink" title="⼆、服务端推送常⽤技术"></a>⼆、服务端推送常⽤技术</h3><p>在 html5 被⼴泛推⼴之后，我们可以使⽤服务端主动推送数据，浏览器接收数据的⽅式来解决上⾯提到的问题。下⾯我们就为⼤家介绍两种服务端数据推送技术。</p><h4 id="全双⼯通信-WebSocket"><a href="#全双⼯通信-WebSocket" class="headerlink" title="全双⼯通信:WebSocket"></a>全双⼯通信:WebSocket</h4><p>全双⼯就是双向通信。如果说 http 协议是“对讲机”之间的通话（你⼀句我⼀句，有来有回），那 websocket 就是移动电话(可以随时发送信息与接收信息，就是全双⼯)。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_13-48-35.png" alt="图片描述"></p><p>本质上是⼀个额外的 tcp 连接，建⽴和关闭时握⼿使⽤ http 协议，其他数据传输不使⽤ http 协议 ，更加复杂⼀些，⽐较适⽤于需要进⾏复杂双向实时数据通讯的场景。在 web ⽹⻚上⾯的客服、聊天室⼀般都是使⽤ WebSocket 协议来开发的。</p><h4 id="服务端主动推送-SSE-Server-Send-Event"><a href="#服务端主动推送-SSE-Server-Send-Event" class="headerlink" title="服务端主动推送:SSE (Server Send Event)"></a>服务端主动推送:SSE (Server Send Event)</h4><p>html5 新标准，⽤来从服务端实时推送数据到浏览器端， 直接建⽴在当前 http 连接上，本质上是保持⼀个 http ⻓连接，轻量协议 。客户端发送⼀个请求到服务端 ，服务端保持这个请求连接直到⼀个新的消息准备好，将消息返回⾄客户端。除⾮主动关闭，这个连接会⼀直保持。</p><ul><li>建⽴连接</li><li>服务端 -&gt; 浏览器(连接保持）</li><li>关闭连接</li></ul><p>SSE 的⼀⼤特⾊就是<strong>重复利⽤ 1 个连接来接收服务端发送的消息</strong>（⼜称 event），从⽽避免不断轮询请求建⽴连接，造成服务资源紧张。</p><h3 id="三、websocket-与-SSE-⽐较"><a href="#三、websocket-与-SSE-⽐较" class="headerlink" title="三、websocket 与 SSE ⽐较"></a>三、websocket 与 SSE ⽐较</h3><table><thead><tr><th>1</th><th>是否基于新协议</th><th>是否双向通信</th><th>是否支持跨域</th></tr></thead><tbody><tr><td>SSE</td><td>否（Http）</td><td>否（单向）</td><td>否（Firefox ⽀持跨域）</td></tr><tr><td>WebSocket</td><td>是（ws）</td><td>是</td><td>是</td></tr></tbody></table><p><strong>但是 IE 和 Edge 浏览器不⽀持 SSE，所以 SSE ⽬前的应⽤场景⽐较少。</strong> 虽然</p><p>websocket 在很多⽐较旧的版本浏览器上⾯也不兼容，但是总体上⽐ SSE 要好不少。另外还有⼀些开源的 JS 前端产品，如 <a href="https://github.com/sockjs/sockjs-client"> SockJS</a>，<a href="https://socket.io/"> Socket.IO</a>，在浏览器</p><p>端提供了更好的 websocket 前端 js 编程体验，与浏览器有更好的兼容性。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-03-41.png" alt="图片描述"></p><h2 id="2-服务端推送事件-SSE"><a href="#2-服务端推送事件-SSE" class="headerlink" title="2. 服务端推送事件 SSE"></a>2. 服务端推送事件 SSE</h2><h3 id="⼀、模拟⽹络⽀付场景"><a href="#⼀、模拟⽹络⽀付场景" class="headerlink" title="⼀、模拟⽹络⽀付场景"></a>⼀、模拟⽹络⽀付场景</h3><p>⼤家应该都⽤过⽀付系统，⽐如淘宝买⼀个产品之后进⾏扫码⽀付。如果结</p><p>合 SSE，该如何实现这个过 程？</p><ol><li><p>⽤户扫码向⽀付系统（⽀付宝）进⾏⽀付</p></li><li><p>⽀付完成之后，告知商户系统（淘宝卖家系统）我已经发起⽀付了（建⽴ SSE 连接）</p></li><li><p>⽀付系统(⽀付宝)告诉商户系统(淘宝卖家系统)，这个⽤户确实⽀付成功了</p></li><li><p>商户系统(淘宝卖家系统)向⽤户发送消息：你已经⽀付成功，跳转到⽀付成功⻚⾯。（<strong>通过 SSE 连接，由服务器端告知⽤户客户端浏览器</strong>）</p></li></ol><p><strong>注意：在返回最终⽀付结果的操作，实现了服务端向客户端的事件推送，以</strong></p><p><strong>使⽤ SSE 来实现</strong></p><h3 id="⼆、SSE-起步练习"><a href="#⼆、SSE-起步练习" class="headerlink" title="⼆、SSE 起步练习"></a>⼆、SSE 起步练习</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyEmitter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SseEmitter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DecimalFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: SSE练习* @author: syhan* @date: 2022-04-18**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SseController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/server/info"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/event-stream;charset=UTF-8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseBodyEmitter</span> <span class="token function">pushMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">SseEmitter</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SseEmitter</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"emitter push message ....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            emitter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_EVENT_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> emitter<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/server/data"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/event-stream;charset=UTF-8"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">ResponseBodyEmitter</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">SseEmitter</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SseEmitter</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">DecimalFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">".00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> param <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            emitter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"⽩菜价格⾏情:"</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">"元"</span> <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_EVENT_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> emitter<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于服务器端向浏览器发送的数据，浏览器端需要在 JavaScript 中使⽤ EventSource 对象来进⾏处理。EventSource 使⽤的是标准的事件监听器⽅式，只需要在对象上添加相应的事件处理⽅法即可。EventSource 提供了三个标准事件</p><table><thead><tr><th>事件名称</th><th>事件触发说明</th><th>事件处理方法</th></tr></thead><tbody><tr><td>open</td><td>当服务器向浏览器第⼀次发送数据</td><td>onopen</td></tr><tr><td>message</td><td>当收到服务器发送的消息时产⽣</td><td>onmessage</td></tr><tr><td>error</td><td>当出现异常时产⽣</td><td>onerror</td></tr></tbody></table><p>除了使⽤标准的事件处理⽅法，还可以使⽤<strong>addEventListener</strong>⽅法对事件进⾏监听。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> es <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token char">'事件源名称'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">//与事件源建⽴连接</span><span class="token comment">//标准事件处理⽅法,还有onopen、onerror</span>es<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//可以监听⾃定义的事件名称</span>es<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>'⾃定义事件名称'<span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>public/sse-demo1.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>sse-demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg_from_server<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>window<span class="token punctuation">.</span>EventSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/server/info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>          <span class="token string">"open"</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接打开."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          s <span class="token operator">+=</span> e<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>          document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"msg_from_server"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>          <span class="token string">"error"</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>readyState <span class="token operator">===</span> EventSource<span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"没有sse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-33-54.png" alt="运行效果"></p><p>public/sse-demo2.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>sse-demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">//需要判断浏览器⽀不⽀持，可以去w3c进⾏查看</span>      <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/server/data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      source<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏效果：1 秒后出现服务端推送的数据</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-50-19.png" alt="运行效果"></p><h2 id="3-双向实时通信-websocket"><a href="#3-双向实时通信-websocket" class="headerlink" title="3. 双向实时通信 websocket"></a>3. 双向实时通信 websocket</h2><h3 id="⼀、整合-websocket"><a href="#⼀、整合-websocket" class="headerlink" title="⼀、整合 websocket"></a>⼀、整合 websocket</h3><ul><li>添加依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引⼊websocket依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写配置类，开启 websocket 功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServerEndpointExporter</span> <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、兼容-HTTPS-协议"><a href="#⼆、兼容-HTTPS-协议" class="headerlink" title="⼆、兼容 HTTPS 协议"></a>⼆、兼容 HTTPS 协议</h3><ul><li>WebSocket 的 ws 协议是基于 HTTP 协议实现的</li><li>WebSocket 的 wss 协议是基于 HTTPS 协议实现的</li></ul><p>⼀旦你的项⽬⾥⾯使⽤了 https 协议，websocket 就要使⽤ wss 协议才可以。</p><p>在 TomcatCustomizer 配置的基础之上加上如下的代码，就可以⽀持 wss 协议。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TomcatContextCustomizer</span> <span class="token function">tomcatContextCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatContextCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WsSci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、WebSocket-编程基础"><a href="#三、WebSocket-编程基础" class="headerlink" title="三、WebSocket 编程基础"></a>三、WebSocket 编程基础</h3><h4 id="3-1-连接的建⽴"><a href="#3-1-连接的建⽴" class="headerlink" title="3.1 连接的建⽴"></a>3.1 连接的建⽴</h4><p>前端 js 向后端发送 wss 连接建⽴请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"wss://localhost:8888/ws/asset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SpringBoot 服务端 WebSocket 服务接收类定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/ws/asset"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-全双工数据交互"><a href="#3-2-全双工数据交互" class="headerlink" title="3.2 全双工数据交互"></a>3.2 全双工数据交互</h4><p>前端后端都有</p><ul><li><p>onopen 事件监听，处理连接建⽴事件</p></li><li><p>onmessage 事件监听，处理对⽅发过来的消息数据</p></li><li><p>onclose 事件监听，处理连接关闭</p></li><li><p>onerror 事件监听，处理交互过程中的异常</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-58-17.png" alt="图片描述"></p><h4 id="3-3-数据发送"><a href="#3-3-数据发送" class="headerlink" title="3.3 数据发送"></a>3.3 数据发送</h4><h5 id="浏览器与服务器交换数据"><a href="#浏览器与服务器交换数据" class="headerlink" title="浏览器与服务器交换数据"></a>浏览器与服务器交换数据</h5><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-00-07.png" alt="图片描述"></p><p>前端 JS</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后端 Java，向某⼀个 javax.websocket.Session ⽤户发送消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送消息，每次浏览器刷新，session会发⽣变化。* @param session session* @param message 消息*/</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>    session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>"<span class="token operator">%</span>s <span class="token punctuation">(</span><span class="token class-name">From</span> <span class="token class-name">Server</span>，<span class="token class-name">Session</span> ID<span class="token operator">=</span><span class="token operator">%</span>s<span class="token punctuation">)</span>"<span class="token punctuation">,</span>message<span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="⼀个⽤户向其他⽤户群发"><a href="#⼀个⽤户向其他⽤户群发" class="headerlink" title="⼀个⽤户向其他⽤户群发"></a>⼀个⽤户向其他⽤户群发</h5><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-04-47.png" alt="图片描述"></p><p>服务器向所有在线的 javax.websocket.Session ⽤户发送消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 群发消息* @param message 消息*/</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">broadCastInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Session</span> session <span class="token operator">:</span> <span class="token class-name">SessionSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、websocket-实现简单聊天"><a href="#四、websocket-实现简单聊天" class="headerlink" title="四、websocket 实现简单聊天"></a>四、websocket 实现简单聊天</h3><p>WebSocketServer 核⼼代码</p><ol><li><p>@ServerEndpoint(value = “/ws/asset”)表示 websocket 的接⼝服务地址</p></li><li><p>@OnOpen 注解的⽅法，为连接建⽴成功时调⽤的⽅法</p></li><li><p>@OnClose 注解的⽅法，为连接关闭调⽤的⽅法</p></li><li><p>@OnMessage 注解的⽅法，为收到客户端消息后调⽤的⽅法</p></li><li><p>@OnError 注解的⽅法，为出现异常时调⽤的⽅法</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">PathParam</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerEndpoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token comment">/*** @author syhan* @description: webSocket服务层，连接webSocket的时候，路径中传⼀个参数值id，⽤ 来区分不同⻚⾯推送不同的数据* @date 2022-04-18*/</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/socket/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 静态变量，⽤来记录当前在线连接数，线程安全     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> onlineCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/**     * concurrent包的线程安全Set，⽤来存放每个客户端对应的MyWebSocket对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">></span></span>webSocketSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 与某个客户端的连接会话，需要通过它来给客户端发送数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span>    <span class="token comment">/**     * 传过来的id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 连接建⽴成功调⽤的⽅法     */</span>      <span class="token annotation punctuation">@OnOpen</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> param<span class="token punctuation">,</span> <span class="token class-name">Session</span>session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//接收到发送消息的⼈员编号</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> param<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>        <span class="token comment">//加⼊set中</span>        webSocketSet<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在线数加1</span>        <span class="token function">addOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"有新连接加⼊！当前在线⼈数为"</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"-连接已建⽴-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 连接关闭调⽤的⽅法     */</span>    <span class="token annotation punctuation">@OnClose</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从set中删除</span>            webSocketSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在线数减1</span>            <span class="token function">subOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"有⼀连接关闭！当前在线⼈数为"</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 收到客户端消息后调⽤的⽅法     *     * @param message 客户端发送过来的消息     */</span>    <span class="token annotation punctuation">@OnMessage</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"来⾃客户端的消息:"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 发⽣错误时调⽤     **/</span>    <span class="token annotation punctuation">@OnError</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发⽣错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        error<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发⽣错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 给指定的⼈发送消息     *     * @param id     id     * @param message message     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendToMessageById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>webSocketSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            webSocketSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"webSocketSet中没有此key，不推送消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 群发⾃定义消息    */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">broadcastInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebSocketServer</span> item <span class="token operator">:</span> webSocketSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token class-name">Session</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> session<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> onlineCount<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebSocketServer</span><span class="token punctuation">.</span>onlineCount<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">subOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebSocketServer</span><span class="token punctuation">.</span>onlineCount<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码，public/websocket.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>websocket⻚⾯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>              输⼊昵称                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span>            <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span>            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输⼊昵称<span class="token punctuation">"</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>open<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>连接websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>             输⼊内容                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span>            <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span>            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输⼊内容<span class="token punctuation">"</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nickname <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"昵称不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ws://localhost:8888/websocket?nickname=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nickname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已经连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket出现异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运⾏效果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-19-11.png" alt="运行效果"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-19-58.png" alt="运行效果"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件发送的整合与使用</title>
      <link href="/2022/04/27/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/27/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="邮件发送的整合与使用"><a href="#邮件发送的整合与使用" class="headerlink" title="邮件发送的整合与使用"></a>邮件发送的整合与使用</h1><h2 id="1-基础协议及邮件配置整合"><a href="#1-基础协议及邮件配置整合" class="headerlink" title="1. 基础协议及邮件配置整合"></a>1. 基础协议及邮件配置整合</h2><h3 id="一、名词概念解释"><a href="#一、名词概念解释" class="headerlink" title="一、名词概念解释"></a>一、名词概念解释</h3><ul><li><p>什么是 POP3、SMTP 和 IMAP？</p><p>简单的说：POP3 和 IMAP 是⽤来从服务器上下载邮件的。SMTP 适⽤于发送或中转信件时找到下⼀个⽬的地。所以我们发送邮件应该使⽤ SMTP 协议。</p></li></ul><p><a href="http://help.mail.163.com/faqDetail.do?code=d7a5dc8471cd0c0e8b4b8f4f8e49998b374173cfe9171305fa1ce630d7f67ac2f56104105f35a05d">IMAP 和 POP3 有什么区别？</a></p><ul><li><p>什么是免费邮箱客户端授权码功能？</p><p>邮箱客户端授权码是为了避免您的邮箱密码被盗后，盗号者通过客户端登录邮箱⽽独特设计的安防功能。可以理解为客户端授权码为邮件发送的⼆次密码。</p></li></ul><h3 id="⼆、-整合邮件发送功能"><a href="#⼆、-整合邮件发送功能" class="headerlink" title="⼆、 整合邮件发送功能"></a>⼆、 整合邮件发送功能</h3><h4 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-邮箱配置"><a href="#2-2-邮箱配置" class="headerlink" title="2.2 邮箱配置"></a>2.2 邮箱配置</h4><p><strong>QQ 系邮箱配置</strong></p><p>官方配置说明：<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=369">参考官方帮助中心</a></p><p>获取客户端授权码：<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=1001256&&id=28">参考官方帮助中心</a></p><p>详细的配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span>    host<span class="token punctuation">:</span> smtp.qq.com <span class="token comment">#发送邮件服务器</span>    username<span class="token punctuation">:</span> xx@qq.com <span class="token comment">#QQ邮箱</span>    password<span class="token punctuation">:</span> xxxxxxxxxxx <span class="token comment">#客户端授权码</span>    protocol<span class="token punctuation">:</span> smtp <span class="token comment">#发送邮件协议</span>    properties.mail.smtp.auth<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.port<span class="token punctuation">:</span> <span class="token number">465</span> <span class="token comment">#端⼝号465或587</span>    properties.mail.display.sendmail<span class="token punctuation">:</span> Javen <span class="token comment">#可以任意</span>    properties.mail.display.sendname<span class="token punctuation">:</span> Spring Boot Guide Email <span class="token comment">#可以任意</span>    properties.mail.smtp.starttls.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.starttls.required<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.ssl.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    default<span class="token punctuation">-</span><span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：开启 SSL 时使⽤<strong>587</strong>端⼝时⽆法连接 QQ 邮件服务器</p></blockquote><p><strong>⽹易系(126/163/yeah)邮箱配置</strong></p><p>网易邮箱客户端授码：<a href="http://help.mail.163.com/faq.do?m=list&categoryID=197">参考官方帮助中心</a></p><p>客户端端口配置说明：<a href="http://mail.163.com/html/110127_imap/index.htm#tab=android">参考官方帮助中心</a></p><p>详细的配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span>    host<span class="token punctuation">:</span> smtp.126.com    username<span class="token punctuation">:</span> xx@126.com    password<span class="token punctuation">:</span> xxxxxxxx    protocol<span class="token punctuation">:</span> smtp    properties.mail.smtp.auth<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.port<span class="token punctuation">:</span> <span class="token number">994</span> <span class="token comment">#465或者994</span>    properties.mail.display.sendmail<span class="token punctuation">:</span> Javen    properties.mail.display.sendname<span class="token punctuation">:</span> Spring Boot Guide Email    properties.mail.smtp.starttls.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.starttls.required<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.ssl.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    default<span class="token punctuation">-</span><span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>    from<span class="token punctuation">:</span> xx@126.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别说明:</p><ul><li>126 邮箱 SMTP 服务器地址:smtp.126.com,端⼝号:465 或者 994</li><li>163 邮箱 SMTP 服务器地址:smtp.163.com,端⼝号:465 或者 994</li><li>yeah 邮箱 SMTP 服务器地址:smtp.yeah.net,端⼝号:465 或者 994</li></ul><blockquote><p>有的邮件服务器接受使⽤客户端授权码发邮件，有的邮件服务器接受使⽤邮箱密码来发送邮件，所以 password 的配置不能⼀概⽽论。客户端授权码不⾏，就试试⽤邮箱密码；邮箱密码不⾏，就试试客户 端授权码。</p></blockquote><h3 id="三、发送简单邮件"><a href="#三、发送简单邮件" class="headerlink" title="三、发送简单邮件"></a>三、发送简单邮件</h3><p>这⾥的简单邮件就是指邮件的内容只是普通⽂字的这种邮件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">JavaMailSender</span> mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.mail.username&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fromEmail<span class="token punctuation">;</span>    <span class="token comment">/**     * 发送⽂本邮件     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sendSimpleMail 的三个参数依次是：邮件的发送⽬标，邮件的标题，邮件的内容.</p><p>测试代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span>DEFINED_PORT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailServiceTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">MailService</span> mailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mailService<span class="token punctuation">.</span><span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token string">"16422802@qq.com"</span><span class="token punctuation">,</span>                <span class="token string">"普通⽂本邮件"</span><span class="token punctuation">,</span>                <span class="token string">"普通⽂本邮件内容测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-42-07.png" alt="测试结果"></p><p>附录：QQ 邮箱发邮件设置</p><p>1.开启 SMTP 服务</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-38-49.png" alt="图片描述"></p><p>2.在配置开启 SMTP 之后，会返回给我们⼀个客户端授权码。这个授权码就是上⽂中⽤来发邮件的 password。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-39-36.png" alt="图片描述"></p><h2 id="2-发送-html-和基于模板的邮件"><a href="#2-发送-html-和基于模板的邮件" class="headerlink" title="2. 发送 html 和基于模板的邮件"></a>2. 发送 html 和基于模板的邮件</h2><h3 id="⼀、发送-html-邮件服务"><a href="#⼀、发送-html-邮件服务" class="headerlink" title="⼀、发送 html 邮件服务"></a>⼀、发送 html 邮件服务</h3><p>sendHtmlMail 函数的第⼀个参数是发送⽬标邮箱，第⼆个参数是邮件标题，第三个参数是邮件的正⽂(html)。</p><ul><li>上⼀节中发送普通的⽂本⽂件邮件，使⽤的是 SimpleMailMessage</li><li>下⽂代码中发送的正⽂是 HTML 的邮件，使⽤的是 MimeMessage</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送html邮件*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注意这⾥使⽤的是MimeMessage</span>    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第⼆个参数是否是html，true表示发送的邮件正⽂是html⽂本</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试⽤例，我们将 HTML 以字符串拼接的⽅式写在 Java 代码⾥⾯，这样对于开发者⽽⾔不太友好。可以 结合 Java 模板引擎，如 Freemarker 来来发送 HTML 邮件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>  mailService<span class="token punctuation">.</span><span class="token function">sendHtmlMail</span><span class="token punctuation">(</span>    <span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span>    <span class="token string">"一封HTML测试邮件"</span><span class="token punctuation">,</span>    <span class="token triple-quoted-string string">"""    &lt;body>    &lt;div style="width:600px;height:400px;margin:auto;background:#bdd8f6;color:#fff;text-align:center;">    &lt;h3>涵的邮件&lt;/h3>    &lt;img src="https://syhan.oss-cn-hangzhou.aliyuncs.com/img/me.png"\040    style="width:100px;height:100px;">    &lt;p>    &lt;a style="text-decoration: none;color: #fff;" href="http://syhan.top" target="_bank">    &lt;strong>我的博客主页&lt;/strong>    &lt;/a>    &lt;/p>    &lt;/div>    &lt;/body>    """</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-46-11.png" alt="测试结果"></p><h3 id="⼆、基于-freemarker-模板的邮件"><a href="#⼆、基于-freemarker-模板的邮件" class="headerlink" title="⼆、基于 freemarker 模板的邮件"></a>⼆、基于 freemarker 模板的邮件</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-47-01.png" alt="图片描述"></p><p>基于 freemarker 模板邮件本质上，还是发送 html 邮件，只不过是有⼀个把模板转换成 html 字符串的过程。</p><ul><li>先添加 freemarker 依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>application.yml 配置 freemarker</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">freemarker</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 缓存配置 开发阶段应该配置为false 因为经常会改</span>  <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .ftl <span class="token comment"># 模版⽂件后缀名</span>  <span class="token key atrule">charset</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># ⽂件编码</span>  <span class="token key atrule">template-loader-path</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Article 实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写模板邮件发送测试代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTemplateMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 添加动态数据，替换模版里面的占位符</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"syhan"</span><span class="token punctuation">,</span> <span class="token string">"今天星期一"</span><span class="token punctuation">,</span> <span class="token string">"内容一"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"syhan"</span><span class="token punctuation">,</span> <span class="token string">"今天下雨天"</span><span class="token punctuation">,</span> <span class="token string">"内容二"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Template</span> template <span class="token operator">=</span> freeMarkerConfigurer<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"freemarker-temp.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将模版文件及数据渲染完成后，转换为html字符串</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"articles"</span><span class="token punctuation">,</span> articles<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> templateHtml <span class="token operator">=</span> <span class="token class-name">FreeMarkerTemplateUtils</span><span class="token punctuation">.</span><span class="token function">processTemplateIntoString</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 发送邮件</span>  mailService<span class="token punctuation">.</span><span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"这是一封freemarker模版的html测试邮件"</span><span class="token punctuation">,</span>templateHtml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>templates ⽬录新建 freemarker-temp.ftl 模板⽂件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>freemarker简单示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>作者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>教程名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">articles</span> <span class="token attr-name">as</span> <span class="token attr-name">article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.author&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.content&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试结果：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-49-58.png" alt="测试结果"></p><h2 id="3-发送带附件和内联附件邮件"><a href="#3-发送带附件和内联附件邮件" class="headerlink" title="3. 发送带附件和内联附件邮件"></a>3. 发送带附件和内联附件邮件</h2><h3 id="⼀、发送带附件的邮件"><a href="#⼀、发送带附件的邮件" class="headerlink" title="⼀、发送带附件的邮件"></a>⼀、发送带附件的邮件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送带附件的邮件*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentsMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span>content<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//带附件第⼆个参数true</span>    <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加附件资源</span>    <span class="token class-name">FileSystemResource</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> fileName <span class="token operator">=</span>filePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filePath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送邮件</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sendAttachmentsMail 的第⼀个参数是发送⽬标邮箱，第⼆个参数是邮件的内容，第三个参数是邮件的附件。</p><p>运⾏如下的测试⽤例进⾏测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentsMailTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"/Users/apple/Desktop/me.png"</span><span class="token punctuation">;</span>  mailService<span class="token punctuation">.</span><span class="token function">sendAttachmentsMail</span><span class="token punctuation">(</span>    <span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span>    <span class="token string">"这是一封带附件的邮件--来自syhan"</span><span class="token punctuation">,</span>    <span class="token string">"邮件中有附件，请注意查收!"</span><span class="token punctuation">,</span>    filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-52-41.png" alt="测试结果"></p><h3 id="⼆、发送内联附件的邮件"><a href="#⼆、发送内联附件的邮件" class="headerlink" title="⼆、发送内联附件的邮件"></a>⼆、发送内联附件的邮件</h3><p>所谓的内联附件就是附件⽂件在邮件正⽂内显示，通常是⼀图⽚资源。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-53-41.png" alt="图片描述"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送正⽂中有静态资源的邮件*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendResourceMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span><span class="token class-name">String</span> rscPath<span class="token punctuation">,</span> <span class="token class-name">String</span> rscId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加内联附件，指定⼀个资源id:rscId</span>    <span class="token class-name">FileSystemResource</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>rscPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span>rscId<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sendResourceMail ⽅法的参数说明：</p><ul><li><p>参数⼀：发送邮件的⽬标邮箱</p></li><li><p>参数⼆：⽂件的标题</p></li><li><p>参数三：邮件的正⽂：html（含图⽚资源 id：rscId）</p></li><li><p>参数四：图⽚资源⽂件本地磁盘路径 res</p></li><li><p>参数五：图⽚资源⽂件的资源 Id：rscId</p></li></ul><p>参数三 HTML ⽂本发现正⽂中包含<code>&lt;img src=cid: rscId&gt;</code>,就会根据参数五 helper.addInline(rscId, res);，找 到参数四对应的资源⽂件 res，并渲染到 HTML ⾥⾯。</p><p>测试⽤例，执⾏之后看结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendResourceMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> rscId <span class="token operator">=</span> <span class="token string">"syhan"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;body>这是有图片的邮件&lt;br/>&lt;img src='cid:"</span> <span class="token operator">+</span> rscId <span class="token operator">+</span> <span class="token string">"'>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> imgPath <span class="token operator">=</span> <span class="token string">"/Users/apple/Desktop/vlog.png"</span><span class="token punctuation">;</span>  mailService<span class="token punctuation">.</span><span class="token function">sendResourceMail</span><span class="token punctuation">(</span>            <span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span>            <span class="token string">"这邮件中包含图片"</span><span class="token punctuation">,</span>            content<span class="token punctuation">,</span>            imgPath<span class="token punctuation">,</span>            rscId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-57-13.png" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用程序监控管理</title>
      <link href="/2022/04/27/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/"/>
      <url>/2022/04/27/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="应用程序监控管理"><a href="#应用程序监控管理" class="headerlink" title="应用程序监控管理"></a>应用程序监控管理</h1><h2 id="1-Actuator-应用监控快速入门"><a href="#1-Actuator-应用监控快速入门" class="headerlink" title="1. Actuator 应用监控快速入门"></a>1. Actuator 应用监控快速入门</h2><h3 id="一、大纲"><a href="#一、大纲" class="headerlink" title="一、大纲"></a>一、大纲</h3><ul><li>Spring Boot Actuator 简介</li><li>Actuator 开启与配置</li><li>常用监控端点说明</li></ul><h3 id="二、Spring-Boot-Actuator-简介"><a href="#二、Spring-Boot-Actuator-简介" class="headerlink" title="二、Spring Boot Actuator 简介"></a>二、Spring Boot Actuator 简介</h3><p>Spring Boot 作为构建微服务节点的方案，一定要提供全面而且细致的监控指标，使微服务更易于管理！微服务不同于单体应用，微服务的每个服务节点都单独部署，独立运行，大型的微服务项目甚至有成百上干个服务节点。这就为我们进行系统监控与运维提出了挑战。为了应对这个挑战，其中最重要的工作之一就是：微服务节点能够合理的暴露服务的相关监控指标，用以对服务进行健康检查、监控管理，从而进行合理的流量规划与安排系统运维工作！</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-19-32.png" alt="图片描述"></p><p>Spring Boot Actuator 模块提供了生产级别的功能，比如健康检查，审计，指标收集，HTTP 跟踪等，帮助我们监控和管理 Spring Boot 应用、Bean 加载情况、环境变量、日志信息、线程信息，JVM 堆信息等。这个模块是一个采集应用内部信息暴露给外部的模块，上述的功能都可以通过 HTTP 和 JMX 访问。</p><p>Actuator 也可以和⼀些外部的应⽤监控系统整合（Prometheus, Graphite, DataDog, Influx, Wavefront, New Relic 等）。这些监控系统提供了出⾊的仪表板，图形，分析和警报，可帮助你通过⼀个统⼀友好的 界⾯，监视和管理你的应⽤程序。</p><h3 id="三、Actuator-开启与配置"><a href="#三、Actuator-开启与配置" class="headerlink" title="三、Actuator 开启与配置"></a>三、Actuator 开启与配置</h3><blockquote><p>新建 boot-actuator 模块</p></blockquote><h4 id="3-1-开启监控"><a href="#3-1-开启监控" class="headerlink" title="3.1 开启监控"></a>3.1 开启监控</h4><p>在 Spring Boot 项目中开启 Actuator 非常简单，只需要引入如下的 maven 坐标即可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-默认开放访问的监控端点"><a href="#3-2-默认开放访问的监控端点" class="headerlink" title="3.2 默认开放访问的监控端点"></a>3.2 默认开放访问的监控端点</h4><p>Spring Boot Actuator 启⽤之后，HTTP 协议下默认开放了两个端点的访问：</p><ul><li>/actuator/health ⽤以监控应⽤状态。返回值是应⽤状态信息，包含四种状态 DOWN(应⽤不正常), OUT_OF_SERVICE(服务不可⽤),UP(状态正常), UNKNOWN(状态未知)。如果服务状态正常，我们访问 http:/host:port/actuator/health 得到如下响应信息：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>  <span class="token string">"status"</span><span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上⾯的响应结果看，该监控端点的监控信息⾮常有限，如果我们想让展示信息更加丰富的话，可以做如下配置。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">management.endpoint.health.show-details</span><span class="token punctuation">=</span><span class="token value attr-value">always</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>/actuator/info ⽤来响应应⽤相关信息，默认为空。可以根据我们⾃⼰的需要，向服务调⽤者暴露相 关信息。如下所示,配置属性可以随意起名，但都要挂在 info 下⾯：</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">info.app-name</span><span class="token punctuation">=</span><span class="token value attr-value">spring-boot-actuator-demo</span><span class="token key attr-name">info.description</span><span class="token punctuation">=</span><span class="token value attr-value">spring-boot-actuator-demo indexs monitor</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-27-38.png"></p><h4 id="3-3-开放端点配置（exposure）"><a href="#3-3-开放端点配置（exposure）" class="headerlink" title="3.3 开放端点配置（exposure）"></a>3.3 开放端点配置（exposure）</h4><p>如果我们希望开放更多的监控端点给服务调⽤者，需要配置：<strong>开放部分监控端点</strong>，端点名称⽤逗号分隔。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## 开放访问的服务端点</span><span class="token key attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token value attr-value">beans,env</span><span class="token comment">## 不暴露对外开放的服务端点</span><span class="token key attr-name">management.endpoints.web.exposure.exclude</span><span class="token punctuation">=</span><span class="token value attr-value">mappings</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>开放所有监控端点:</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token value attr-value">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>星号在 YAML 配置⽂件中中有特殊的含义，所以在 YAML 配置⽂件使⽤星号⼀定要加引号，如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    web<span class="token punctuation">:</span>      exposure<span class="token punctuation">:</span>        include<span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-开启端点配置（enabled）"><a href="#3-4-开启端点配置（enabled）" class="headerlink" title="3.4.开启端点配置（enabled）"></a>3.4.开启端点配置（enabled）</h4><ul><li><p>针对 actuator 提供的服务端点，开启启⽤(enabled)不等于开放访问(include)。</p></li><li><p>绝⼤部分的监控端点是默认开启的（下图中的 Yes），少部分监控端点默认是不开启的，⽐如：shutdown。</p></li><li><p>对于默认不启⽤的监控服务端点，⼀定要先开启(enabled)，开启的配置⽅法如下：</p></li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># shutdown是服务端点名称，可以替换</span><span class="token key attr-name">management.endpoint.shutdown.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、常⽤监控端点说明"><a href="#四、常⽤监控端点说明" class="headerlink" title="四、常⽤监控端点说明"></a>四、常⽤监控端点说明</h3><p>Spring Boot Actuator 监控端点的分类</p><ul><li><p>静态配置类：主要是⼀些静态配置信息，⽐如： Spring Bean 加载信息、yml 或 properties 配置信息、环境变量信息、请求接⼝关系映射信息等；</p></li><li><p>动态指标类：主要⽤于展现程序运⾏期状态，例如内存堆栈信息、请求链信息、健康指标信息等；</p></li><li><p>操作控制类：主要是 shutdown 功能，⽤户可以远程发送 HTTP 请求，从⽽关闭监控功能。</p></li></ul><table><thead><tr><th>ID(监控端点名称)</th><th>描述</th><th>服务是否默认启⽤</th></tr></thead><tbody><tr><td>auditevents</td><td>应⽤程序的审计事件相关信息</td><td>Yes</td></tr><tr><td>beans</td><td>应⽤中所有 Spring Beans 的完整列表</td><td>Yes</td></tr><tr><td>conditions</td><td>(confguration and auto-confgurationclasses)的状态及它们被应用或未被应用的原因</td><td>Yes</td></tr><tr><td>configprops</td><td>@ConfigurationProperties 的集合列表</td><td>Yes</td></tr><tr><td>env</td><td>Spring 的 ConfigurableEnvironment 的属性</td><td>Yes</td></tr><tr><td>flyway</td><td>flyway 数据库迁移路径，如果有的话</td><td>Yes</td></tr><tr><td>liquibase</td><td>Liquibase 数据库迁移路径，如果有的话</td><td>Yes</td></tr><tr><td>metrics</td><td>应⽤的 metrics 指标信息</td><td>Yes</td></tr><tr><td>mappings</td><td>所有@RequestMapping 路径的集合列表</td><td>Yes</td></tr><tr><td>scheduledtasks</td><td>应⽤程序中的计划任务</td><td>Yes</td></tr><tr><td>sessions</td><td>允许从 Spring 会话支持的会话存储中检索和删除(retrieval and deletion)用户会话.使用 Spring Session 对反应性 Web 应用程序的支持时不可用</td><td>Yes</td></tr><tr><td>shutdown</td><td>允许应⽤以优雅的⽅式关闭（默认情况下不启⽤）</td><td>No</td></tr><tr><td>threaddump</td><td>线程名、线程 ID、线程的状态、是否等待锁资源、线程堆栈等信息</td><td>Yes</td></tr><tr><td>httptrace 显示</td><td>HTTP 跟踪信息（默认显示最后 100 个 HTTP 请求-响应交换）</td><td>Yes</td></tr></tbody></table><p>如果使⽤ web 应⽤(Spring MVC, Spring WebFlux, 或者 Jersey)，还可以使⽤以下端点：</p><table><thead><tr><th>ID (监控端点名称)</th><th>描述</th><th>默认启⽤</th></tr></thead><tbody><tr><td>heapdump</td><td>返回⼀个 GZip 压缩的 hprof 堆 dump ⽂件</td><td>Yes</td></tr><tr><td>jolokia</td><td>通过 HTTP 暴露 JMX beans(当 Jolokia 在类路径上时,WebFlux 不可用）</td><td>Yes</td></tr><tr><td>logfile</td><td>返回日志文件内容（如果设置了 logging.file 或 logging。path 展性的话），支持使用 HTTPRange 头接收日志文件内容的部分信息</td><td>Yes</td></tr><tr><td>prometheus</td><td>以可以被 Prometheus 服务器抓取的格式显示 metrics 信息</td><td>Yes</td></tr></tbody></table><h2 id="2-SpringBootAdmin-界面化监控"><a href="#2-SpringBootAdmin-界面化监控" class="headerlink" title="2. SpringBootAdmin 界面化监控"></a>2. SpringBootAdmin 界面化监控</h2><p>在之前的内容中，我们学习了如何使用 Spring Boot Actuator 对单个 Spring Boot 应用进行监控。通过浏览器访问 url 可以各个监控应用端点，可以知道应用的运行状态信息。但是这种方式返回的数据都是 JSON 的格式，各种指标需要单独访问查看。我们迫切希望有一种方式：可以通过方便地通过鼠标点击和友好的 U！界面的展现方式查看应用的各种运行指标。Spring Boot Admin 应运而生！</p><h3 id="⼀、Spring-Boot-Admin-介绍"><a href="#⼀、Spring-Boot-Admin-介绍" class="headerlink" title="⼀、Spring Boot Admin 介绍"></a>⼀、Spring Boot Admin 介绍</h3><ul><li><p>Spring Boot Admin 是⼀个针对 Spring Boot Actuator 的 JSON 数据响应结果进⾏ UI 美化封装的监控⼯具</p></li><li><p>通过 Spring Boot Admin，可以在可视化⻚⾯中浏览所有被监控的 spring-boot 项⽬的 Actuator 运⾏时信息，甚⾄还可以直接修改 logger 的 level</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-48-34.png" alt="图片描述"></p><ul><li>Spring Boot Admin 包括客户端和服务端两个部分，⼀个服务端可以展示多个客户端的监控结果：<ul><li>客户端：<strong>即需要监控的应⽤服务</strong>，需集成 spring-boot-admin-starter-client,通过 HTTP 协议注册到 Spring Boot Admin 服务端,从⽽进⾏集中展示。（也可以结合 Spring Cloud 服务注册中⼼）</li><li>服务端：访问客户端的 Actuator 运⾏时数据，并使⽤ UI 界⾯进⾏展示。<strong>是⼀个独⽴的 Spring Boot 应⽤</strong>,需集成 spring-boot-admin-starter-server</li></ul></li></ul><h3 id="⼆、创建-SpringBoot-Admin-服务端"><a href="#⼆、创建-SpringBoot-Admin-服务端" class="headerlink" title="⼆、创建 SpringBoot Admin 服务端"></a>⼆、创建 SpringBoot Admin 服务端</h3><p>新建⼀个模块：boot-admin ，maven 坐标引⼊</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在项⽬启动类上⾯加上@EnableAdminServer 注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAdminServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootActuatorAdminApplication</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">BootLaunchActuatorAdminApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定访问端⼝</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 <code>http://localhost:8081/</code>，因为⽬前没有任何的客户端应⽤注册上来，所以界⾯上没有相关的展示信息。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-51-46.png"></p><h3 id="三、集成-SpringBoot-Admin-客户端"><a href="#三、集成-SpringBoot-Admin-客户端" class="headerlink" title="三、集成 SpringBoot Admin 客户端"></a>三、集成 SpringBoot Admin 客户端</h3><p>在我们之前的项⽬ boot-actuator ⾥⾯引⼊下⾯的依赖，作为被 SpringBoot Admin 监控的客户端存在。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进⾏ application.yml 配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">boot</span><span class="token punctuation">:</span>    admin<span class="token punctuation">:</span>      client<span class="token punctuation">:</span>        url<span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    health<span class="token punctuation">:</span>      show<span class="token punctuation">-</span><span class="token key atrule">details</span><span class="token punctuation">:</span> always  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    web<span class="token punctuation">:</span>      exposure<span class="token punctuation">:</span>        include<span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>spring.boot.admin.client.url 体现的是服务端的访问地址，也就是监控注册的地址。</p></li><li><p>当客户端注册到 spring boot admin 服务端之后，admin 服务端就会访问客户端应⽤的”/actuator”访问端点信息，因为我们为 boot-launch 配置了⽤户密码的访问权限(上⼀节)，所以需要将⽤户名密码告知服务端，它才能正确的获取”/actuator”访问端点信息。这就是 metadata.user 配置段的作⽤</p></li></ul><p>另外，为了让 Spring Boot Admin 展示的内容更加丰富，我们将所有的服务端点都开放出来。如果不开放，spring boot admin 只能获取健康检查”/health”和“/info”两个默认开放访问的基础信息，也就失去了使⽤ Spring Boot Admin 的意义。</p><p>再次访问 <code>http://localhost:8081/</code> ，这次展示的监控信息内容就很多了：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-54-24.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-54-58.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-动态路由</title>
      <link href="/2022/04/21/8-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
      <url>/2022/04/21/8-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><p>在网页中，用户进行多模块或多页面需要进行交互时，从这个页面到另外一个页面都需要通过链接跳转，所以路由就应运而生了。</p><ul><li>实例工厂 getCurrentInstance()</li><li>创建路由函数 createRouter()</li><li>添加路由 router.addRoute()</li><li>路由判断 router.hasRoute()</li><li>获取路由 router.getRoutes()</li><li>移除路由 router.removeRoute()</li></ul><h2 id="2、实例工厂-getCurrentInstance"><a href="#2、实例工厂-getCurrentInstance" class="headerlink" title="2、实例工厂 getCurrentInstance()"></a>2、实例工厂 getCurrentInstance()</h2><p>我们来看看，到底这个实例方法都隐藏着些什么？</p><p>为了测试，在页面给定一个按钮，绑定点击事件，拿到实例化对象的 <code>ctx</code> 上下文对象。</p><p>在 <code>src/views</code> 新建 <code>TestRoute.vue</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toHome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>toHome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toAbout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>toAbout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getCurrentInstance<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> OtherRoute <span class="token keyword">from</span> <span class="token string">'./OtherRoute.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'TestRoute'</span><span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> ctx <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./Home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./About.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        routes<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> removeRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/otherroute'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'OtherRoute'</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> OtherRoute<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> isHasRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> route <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> isRemove <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      route <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$props<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$options<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$refs<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$root<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$router<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$slots<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$store<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$toast<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$watch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token function-variable function">toHome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token function-variable function">toAbout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        click<span class="token punctuation">,</span>        toHome<span class="token punctuation">,</span>        toAbout<span class="token punctuation">,</span>        root<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们点击一下 <code>click</code> 按钮，在浏览器控制台会打印出一个对象：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-51-13.png" alt="图片描述"></p><h4 id="ctx-调用方法"><a href="#ctx-调用方法" class="headerlink" title="ctx 调用方法"></a>ctx 调用方法</h4><p>我们可以通过 <code>ctx</code> 访问三个按钮的事件：</p><ul><li>ctx.click()</li><li>ctx.toHome()</li><li>ctx.toAbout()</li></ul><h4 id="ctx-attrs"><a href="#ctx-attrs" class="headerlink" title="ctx.$attrs"></a>ctx.$attrs</h4><p>$attrs 包含父范围属性绑定和未识别（提取）为组件 <a href="https://v3.vuejs.org/api/options-data.html#props">prop</a> 或<a href="https://v3.vuejs.org/api/options-data.html#emits">自定义事件的事件</a>。当组件没有任何已声明的 prop 或自定义事件时，它实质上包含所有父作用域绑定，在创建高阶组件时很有用。</p><p>$data 组件实例正在观察的数据对象。组件实例代理对其数据对象上属性的访问。</p><ul><li><code>console.log(ctx.$data)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-50-38.png" alt="图片描述"></p><h4 id="ctx-props"><a href="#ctx-props" class="headerlink" title="ctx.$props"></a>ctx.$props</h4><p>$props 表示组件已接收到的当前 <code>props</code> 的对象。组件实例代理访问其 <code>props</code> 对象上的属性。</p><ul><li><code>console.log(ctx.$props)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-50-02.png" alt="图片描述"></p><h4 id="ctx-el"><a href="#ctx-el" class="headerlink" title="ctx.$el"></a>ctx.$el</h4><p>$el 组件实例正在管理的根 <code>DOM</code> 元素。</p><ul><li><code>console.log(ctx.$el)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-49-35.png" alt="图片描述"></p><h4 id="ctx-options"><a href="#ctx-options" class="headerlink" title="ctx.$options"></a>ctx.$options</h4><p>$options 用于当前组件实例的实例化选项。当您要在选项中包括自定义属性时，这很有用。</p><ul><li><code>console.log(ctx.$options)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-49-02.png" alt="图片描述"></p><h4 id="ctx-refs"><a href="#ctx-refs" class="headerlink" title="ctx.$refs"></a>ctx.$refs</h4><p>$refs DOM 元素和组件实例的对象，已向 <a href="https://v3.vuejs.org/guide/component-template-refs.html"><code>ref</code>attribute</a> 注册。</p><ul><li><code>console.log(ctx.$refs)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-47-16.png" alt="图片描述"></p><h4 id="ctx-root"><a href="#ctx-root" class="headerlink" title="ctx.$root"></a>ctx.$root</h4><p>$root 当前组件树的根组件实例。如果当前实例没有父代，则此值为自身。</p><ul><li><code>console.log(ctx.$root)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-46-40.png" alt="图片描述"></p><h4 id="ctx-router"><a href="#ctx-router" class="headerlink" title="ctx.$router"></a>ctx.$router</h4><p>$router 存储路由对象的方法，属性。</p><ul><li><code>console.log(ctx.$router)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-42-57.png" alt="图片描述"></p><h4 id="ctx-slots"><a href="#ctx-slots" class="headerlink" title="ctx.$slots"></a>ctx.$slots</h4><p>$slots 存储插槽对象。</p><ul><li><code>console.log(ctx.$slots)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-42-32.png" alt="图片描述"></p><h4 id="ctx-store"><a href="#ctx-store" class="headerlink" title="ctx.$store"></a>ctx.$store</h4><p>$store 存储 <code>vuex</code> 仓库管理操作方法，属性。</p><ul><li><code>console.log(ctx.$store)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-42-05.png" alt="图片描述"></p><h4 id="ctx-watch"><a href="#ctx-watch" class="headerlink" title="ctx.$watch"></a>ctx.$watch</h4><p>$watch 监听器</p><ul><li><code>console.log(ctx.$watch)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-41-30.png" alt="图片描述"></p><h2 id="3、创建路由函数-createRouter"><a href="#3、创建路由函数-createRouter" class="headerlink" title="3、创建路由函数 createRouter()"></a>3、创建路由函数 createRouter()</h2><p>首先我们在 <code>src/views/TestRoute.vue</code> 引入 <code>createRouter</code>，<code>createHistory</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着我们在 <code>setup</code> 方法定义 <code>routes</code>，并创建路由对象 <code>router</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./Home.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./About.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        routes    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        click    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们点击 <code>click</code> 按钮，可以看到：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-40-58.png" alt="图片描述"></p><h2 id="4、添加路由-router-addRoute"><a href="#4、添加路由-router-addRoute" class="headerlink" title="4、添加路由 router.addRoute()"></a>4、添加路由 router.addRoute()</h2><p>我们在 <code>src/views</code> 新建 <code>OtherRoute.vue</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是新增的路由<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'OtherRoute'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们在 <code>src/views/TestRoute.vue</code> 导入上面 <code>OtherRoute.vue</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> OtherRoute <span class="token keyword">from</span> <span class="token string">'./OtherRoute.vue'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们给上文提到的 <code>router</code> 对象添加一个 <code>/otherroute</code> 路由，其路由名称为 <code>OtherRoute</code>，对应的组件 <code>OtherRoute.vue</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/otherroute'</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'OtherRoute'</span><span class="token punctuation">,</span>  <span class="token literal-property property">component</span><span class="token operator">:</span> OtherRoute<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、路由判断-router-hasRoute"><a href="#5、路由判断-router-hasRoute" class="headerlink" title="5、路由判断 router.hasRoute()"></a>5、路由判断 router.hasRoute()</h2><p>我们可以使用 <code>hasRoute</code> 方法来判断我们上面添加路由是否成功。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> isHasRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印 <code>isHasRoute</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> isHasRoute<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-40-22.png" alt="图片描述"></p><h2 id="6、获取路由-router-getRoutes"><a href="#6、获取路由-router-getRoutes" class="headerlink" title="6、获取路由 router.getRoutes()"></a>6、获取路由 router.getRoutes()</h2><p>首先我们在 <code>setup()&#123;&#125;</code> 内定义 <code>route</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> route <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印 <code>route</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-39-50.png" alt="图片描述"></p><h2 id="7、移除路由-router-removeRoute"><a href="#7、移除路由-router-removeRoute" class="headerlink" title="7、移除路由 router.removeRoute()"></a>7、移除路由 router.removeRoute()</h2><p>有了添加路由，判断路由，路由获取，当然会有路由移除。</p><ul><li>先移除路由</li><li>判断是否存在</li><li>打印所有路由</li></ul><p>我们在 <code>setup()&#123;&#125;</code> 方法中写下如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> isRemove <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>route <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在 <code>click</code> 方法打印出 <code>isRemove</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'remove route===>'</span><span class="token punctuation">,</span> isRemove<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-38-18.png" alt="图片描述"></p><h2 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h2><p>学习以下几点知识：</p><ul><li>如何拿到实例对象的上下文 <code>ctx</code>。</li><li>使用 <code>createRoute</code> 方法创建路由。</li><li>学会路由的增删改，以及判断路由是否存在。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-异步组件</title>
      <link href="/2022/04/21/7-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/04/21/7-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h1><p>当我们的项目达到一定的规模时，对于某些组件来说，我们并不希望一开始全部加载，而是需要的时候进行加载；这样的做得目的可以很好的提高用户体验。</p><p>为了实现这个功能，Vue3中为我们提供了一个方法，即defineAsyncComponent，这个方法可以传递两种类型的参数，分别是函数类型和对象类型，接下来我们分别学习。</p><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>defineAsyncComponent() 定义异步加载组件</li><li>defineAsyncComponent() options 配置</li></ul><h2 id="2、传递工厂函数作为参数"><a href="#2、传递工厂函数作为参数" class="headerlink" title="2、传递工厂函数作为参数"></a>2、传递工厂函数作为参数</h2><p><code>defineAsyncComponent</code>方法接收一个工厂函数是它的基本用法，这个工厂函数必须返回一个<code>Promise</code>，<code>Promise</code>的<code>resolve</code>应该返回一个组件。</p><p>新建<code>views/TestAsync.vue</code>，页面用两个组件来呈现，代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script&gt;import LogoImg from &quot;..&#x2F;components&#x2F;LogoImg.vue&quot;;import HelloWorld from &quot;..&#x2F;components&#x2F;HelloWorld.vue&quot;;export default &#123;  name: &quot;TestAnync&quot;,  components: &#123;    LogoImg,    HelloWorld,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>components目录新建<code>LogoImg.vue</code>组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;      &lt;img src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; alt&#x3D;&quot;&quot;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;LogoImg&quot;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>components目录<code>HelloWorld</code>组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;hello&quot;&gt;    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;HelloWorld&quot;,  props: &#123;    msg: String,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置路由和导航，看效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-15-45.png" alt="图片描述"></p><p>现在我们将<code>&lt;hello-world&gt;</code>组件修改为异步组件，修改<code>TestAsync.vue</code>代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; defineAsyncComponent &#125; from &#39;vue&#39;import LogoImg from &#39;..&#x2F;components&#x2F;LogoImg.vue&#39;&#x2F;&#x2F; 修改为异步组件const HelloWorld &#x3D; defineAsyncComponent(() &#x3D;&gt;  import(&#39;..&#x2F;components&#x2F;HelloWorld.vue&#39;),)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了看到效果，将<code>import</code>延迟执行，完整代码</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;import LogoImg from &quot;..&#x2F;components&#x2F;LogoImg.vue&quot;;&#x2F;&#x2F; 定义一个耗时执行的函数，t 表示延迟的时间，callback 表示需要执行的函数，可选const time &#x3D; (t, callback &#x3D; () &#x3D;&gt; &#123;&#125;) &#x3D;&gt; &#123;  return new Promise((resolve) &#x3D;&gt; &#123;    setTimeout(() &#x3D;&gt; &#123;      callback();      resolve();    &#125;, t);  &#125;);&#125;;&#x2F;&#x2F; 定义异步组件，这里这样写是为了查看效果const HelloWorld &#x3D; defineAsyncComponent(() &#x3D;&gt; &#123;  return new Promise((resolve, reject) &#x3D;&gt; &#123;    (async function () &#123;      try &#123;        await time(2000);        const res &#x3D; await import(&quot;..&#x2F;components&#x2F;HelloWorld.vue&quot;);        resolve(res);      &#125; catch (error) &#123;        reject(error);      &#125;    &#125;)();  &#125;);&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/2022-04-19%2010.02.37.gif" alt="GIF描述"></p><p>当2s后才会加载<code>&lt;hello-world&gt;</code>组件。</p><h2 id="3、传递对象类型作为参数"><a href="#3、传递对象类型作为参数" class="headerlink" title="3、传递对象类型作为参数"></a>3、传递对象类型作为参数</h2><p>defineAsyncComponent方法也可以接收一个对象作为参数，该对象中有如下几个参数：</p><ul><li>loader：同工厂函数；</li><li>loadingComponent：加载异步组件时展示的组件；</li><li>errorComponent：加载组件失败时展示的组件；</li><li>delay：显示loadingComponent之前的延迟时间，单位毫秒，默认200毫秒；</li><li>timeout：如果提供了timeout，并且加载组件的时间超过了设定值，将显示错误组件，默认值为Infinity（单位毫秒）；</li><li>suspensible：异步组件可以退出<Suspense>控制，并始终控制自己的加载状态。具体可以<a href="https://v3.cn.vuejs.org/guide/component-dynamic-async.html#%E4%B8%8E-suspense-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">参考文档</a></li><li>onError：一个函数，该函数包含4个参数，分别是error、retry、fail和attempts，这4个参数分别是错误对象、重新加载的函数、加载程序结束的函数、已经重试的次数。</li></ul><p>components目录新建<code>error.vue</code>组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;发生错误！&lt;&#x2F;h1&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;error&quot;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>views新建<code>TestAsync1.vue</code>，使用defineAsyncComponent`方法的对象类型参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;import LogoImg from &quot;..&#x2F;components&#x2F;LogoImg.vue&quot;;import ErrorComponent from &quot;..&#x2F;components&#x2F;error.vue&quot;;&#x2F;&#x2F; 定义一个耗时执行的函数，t 表示延迟的时间， callback 表示需要执行的函数，可选const time &#x3D; (t, callback &#x3D; () &#x3D;&gt; &#123;&#125;) &#x3D;&gt; &#123;  return new Promise((resolve) &#x3D;&gt; &#123;    setTimeout(() &#x3D;&gt; &#123;      callback();      resolve();    &#125;, t);  &#125;);&#125;;&#x2F;&#x2F; 记录加载次数let count &#x3D; 0;const HelloWorld &#x3D; defineAsyncComponent(&#123;  &#x2F;&#x2F; 工厂函数  loader: () &#x3D;&gt; &#123;    return new Promise((resolve, reject) &#x3D;&gt; &#123;      (async function () &#123;        await time(2000);        const res &#x3D; await import(&quot;..&#x2F;components&#x2F;HelloWorld.vue&quot;);        if (++count &lt; 3) &#123;          &#x2F;&#x2F; 前两次加载手动设置加载失败          reject(res);        &#125; else &#123;          &#x2F;&#x2F; 大于3次成功          resolve(res);        &#125;      &#125;)();    &#125;);  &#125;,  errorComponent: ErrorComponent,  delay: 0,  timeout: 1000,  suspensible: false,  onError(retry, fail, attempts) &#123;    &#x2F;&#x2F; 注意，retry&#x2F;fail 就像 promise 的 resolve&#x2F;reject 一样：    &#x2F;&#x2F; 必须调用其中一个才能继续错误处理。    if (attempts &lt; 3) &#123;      &#x2F;&#x2F; 请求发生错误时重试，最多可尝试 3 次      console.log(attempts);      retry();    &#125; else &#123;      fail();    &#125;  &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载组件时前两次会请求错误，只有第三次加载才会成功，如果加载失败则会展示<code>ErrorComponent</code>组件。运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/2022-04-19%2010.18.08.gif" alt="GIF描述"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-传送组件</title>
      <link href="/2022/04/21/6-%E4%BC%A0%E9%80%81%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/04/21/6-%E4%BC%A0%E9%80%81%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="传送组件"><a href="#传送组件" class="headerlink" title="传送组件"></a>传送组件</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><p><code>Vue</code> 鼓励我们将 <code>UI</code> 及其相关行为封装成组件，我们可以将这些组件嵌套在一起以构成应用程序 <code>UI</code> 的树。但是有时候组件模板的一部分在逻辑上是属于该组件的，最好的做法是将该模板的这部分移到 <code>Vue</code> 应用程序外部的 <code>DOM</code> 的其他位置。</p><ul><li>teleport 传送组件</li><li>to 属性</li><li>disabled 属性</li><li>teleport 组件更新</li></ul><h2 id="2、teleport-传送组件"><a href="#2、teleport-传送组件" class="headerlink" title="2、teleport 传送组件"></a>2、teleport 传送组件</h2><p>常见的情况下是在创建一个包含全屏模式的组件。在大多数情况下，我们希望模态框的逻辑存在于组件中，但是模态框的定位很难通过 <code>CSS</code> 来解决，或者需要更改组件的组成部分。</p><p>首先来想一个组件 <code>modal-button</code>，该组件将具有一个 <code>button</code> 元素来触发模态框的打开，以及一个 <code>div</code> 具有的类名的元素 <code>.modal</code>，其中将包含模态框的内容和一个用于自动关闭的按钮。</p><p>在 <code>src/views/</code> 新建 <code>ModalButton.vue</code>，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Open full screen modal!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        I'm a modal!        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'modalButton'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">modalOpen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到一个问题，深度嵌套 <code>div</code> 和 <code>position: absolute</code> 模态框相对定位于父级元素 <code>div</code> 作为参考。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style lang="scss" scoped>.modal</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.modal div</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/views/</code> 新建 <code>tele.vue</code>，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modal-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modal-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> modalButton <span class="token keyword">from</span> <span class="token string">'./ModalButton'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'tele'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      modalButton<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/router/index.js</code> 中添加路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/tele'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'tele'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/tele.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue添加导航</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to&#x3D;&quot;&#x2F;tele&quot;&gt;tele&lt;&#x2F;router-link&gt; |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、to-属性"><a href="#3、to-属性" class="headerlink" title="3、to 属性"></a>3、to 属性</h2><p><code>Teleport</code> 提供了一种干净的方式，允许我们控制在 DOM 中哪个⽗节点下呈现 HTML，而不必污染全局状态或将其拆分为两个组件。</p><p>修改 <code>modal-button</code> 来使用并告诉 <code>Vue</code> “teleport this HTML to the body” 标签。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Open full screen modal!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          I'm a teleported modal! (My parent is "body")          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码，我们看到模态框被移到了 <code>body</code> 中。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-23-01.png" alt="图片描述"></p><h2 id="4、diabled-属性"><a href="#4、diabled-属性" class="headerlink" title="4、diabled 属性"></a>4、diabled 属性</h2><p>给 <code>teleport</code> 组件添加 <code>disabled</code> 属性。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Open full screen modal!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          I'm a teleported modal! (My parent is "body")          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-24-29.png" alt="图片描述"></p><p>使用 <code>disabled</code> 属性，设置为 <code>true</code>，告诉 <code>teleport</code> 传送组件不要将模态框移除到 <code>body</code> 下。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>学习了使用 <code>teleport</code> 组件实现模态框，学习了两大属性：</p><ul><li><code>to</code> 表示将模态框放置在什么位置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-哪些 API 发生了变化</title>
      <link href="/2022/04/21/5-%E5%93%AA%E4%BA%9B%20API%20%E5%8F%91%E7%94%9F%E4%BA%86%E5%8F%98%E5%8C%96/"/>
      <url>/2022/04/21/5-%E5%93%AA%E4%BA%9B%20API%20%E5%8F%91%E7%94%9F%E4%BA%86%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="哪些API发生了变化"><a href="#哪些API发生了变化" class="headerlink" title="哪些API发生了变化"></a>哪些API发生了变化</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>全局 api</li><li>自定义指令</li><li>移除过滤</li><li>不再支持 keycode</li><li>动画类名</li></ul><h2 id="2、全局-api-变化"><a href="#2、全局-api-变化" class="headerlink" title="2、全局 api 变化"></a>2、全局 api 变化</h2><p>在 Vue2 非常熟悉的全局组件注册、全局插件注册、全局混入 <code>mixin</code>、全局指令注册，以及组件挂载，原型链上属性，方法定义，都发生了变化。通常我们会在 <code>src/main.js</code> 进行如下全局配置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span> <span class="token comment">// 引入 Vue</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span> <span class="token comment">// 引入 App.vue</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ignoredElements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^app-</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 全局忽略配置</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局注册 install</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局混入</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局组件注册</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局指令注册</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">customProperty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 自定义方法</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 组件挂载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Vue3 中，更多的操作是直接放在实例中，通常我们如下处理：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span> <span class="token comment">// 不再是导出一整个 Vue, 而是导出创建实例的方法</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 vue 实例</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">isCustomElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token operator">=></span> tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'app-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局配置</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局插件注册</span>app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局混入注册</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局组件注册</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局指令注册</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span><span class="token function-variable function">customProperty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 定义全局方法，属性</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 挂载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、自定义指令"><a href="#3、自定义指令" class="headerlink" title="3、自定义指令"></a>3、自定义指令</h2><p>在开发过程中，如果遇到需要输入框自动获取焦点，优化浏览器滚动条等比较难以处理的情况，我们就需要自己定义符合开发需求的指令。</p><p>在 <code>Vue 2</code> 中，自定义指令的生命周期如下：</p><p>指令钩子函数会被传入以下参数：</p><ul><li><p><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</p></li><li><p>```<br>binding</p><pre class="line-numbers language-none"><code class="language-none">  ：一个对象，包含以下 property。  - &#96;name&#96;：指令名。  - &#96;value&#96;：指令的绑定值。  - &#96;oldValue&#96;：指令绑定的前一个值，仅在 &#96;update&#96; 和 &#96;componentUpdated&#96; 钩子中可用。无论值是否改变都可用。  - &#96;expression&#96;：字符串形式的指令表达式。  - &#96;arg&#96;：传给指令的参数，可选。  - &#96;modifiers&#96;：一个包含修饰符的对象。- &#96;vnode&#96;：Vue 编译生成的虚拟节点。移步 [VNode API](https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;api&#x2F;#VNode-接口) 来了解更多详情。- &#96;oldVnode&#96;：上一个虚拟节点，仅在 &#96;update&#96; 和 &#96;componentUpdated&#96; 钩子中可用。&#96;&#96;&#96;jsconst MyDirective &#x3D; &#123;  bind(el, binding, vnode, prevVnode) &#123;&#125;,  inserted() &#123;&#125;,  update() &#123;&#125;,  componentUpdated() &#123;&#125;,  unbind() &#123;&#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在 <code>Vue 3</code>中，自定义指令生命周期更加接近于组件的生命周期。</p><p>指令定义对象可以提供多个挂钩函数（所有可选）：</p><ul><li><p><code>beforeMount</code>：在指令首次绑定到元素时以及挂载父组件之前调用。在这里您可以进行一次性设置工作。</p></li><li><p><code>mounted</code>：在安装绑定元素的父组件时调用。</p></li><li><p><code>beforeUpdate</code>：在包含组件的 <code>VNode</code> 更新之前调用</p></li><li><p><code>updated</code>：在包含组件的 <code>VNode</code> 及其子组件的 <code>VNode</code> 更新后调用。</p></li><li><p><code>beforeUnmount</code>：在卸载绑定元素的父组件之前调用</p></li><li><p><code>unmounted</code>：仅当指令从元素取消绑定并且父组件已卸载时，才调用一次。</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MyDirective <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// new</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、全局组件"><a href="#4、全局组件" class="headerlink" title="4、全局组件"></a>4、全局组件</h2><p>components下的HelloWorld.vue组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;hello&quot;&gt;    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;HelloWorld&quot;,  props: &#123;    msg: String,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js全局挂载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> helloWorld <span class="token keyword">from</span> <span class="token string">"./components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 app</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"hello-world"</span><span class="token punctuation">,</span> helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册全局组件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随便找个页面，可以直接使用</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-29-56.png" alt="图片描述"></p><p>效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-30-56.png" alt="图片描述"></p><h2 id="5、自定义拖拽指令"><a href="#5、自定义拖拽指令" class="headerlink" title="5、自定义拖拽指令"></a>5、自定义拖拽指令</h2><p>首先新建 <code>src/views/GlobalApi.vue</code> ，在其中添加一个宽高都为 <code>50px</code> 的 <code>div</code>，注意必须加上定位样式，否则不会生效，代码如下所示：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>global-api<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drag<span class="token punctuation">"</span></span> <span class="token attr-name">v-drag</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"globalApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.drag</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> // 必须加上定位样式，否则不会生效  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #2194c5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着新建 <code>src/drag.js</code>，定义一个 <code>drag</code> 对象，在挂载之前，需要监听绑定指令元素鼠标是否按下，获取按下时的起始位置，保存在 <code>disX</code>，<code>disY</code> 中。</p><p>鼠标按下拖动，获取此时移动的位置差 <code>l</code>，<code>t</code>，重新改变元素的位置</p><p>鼠标停止移动，需要将监听鼠标是否抬起，将 <code>onmousemove</code>，<code>onmouseup</code> 移除。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// src/drag.js</span><span class="token keyword">let</span> drag <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取鼠标点击出分别与 div 左边和上边的距离：鼠标位置 div 位置</span>      <span class="token keyword">var</span> disX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> el<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>      <span class="token keyword">var</span> disY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> el<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取移动后 div 的位置：鼠标的位置 -disX/disY</span>        <span class="token keyword">var</span> l <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> disX<span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> disY<span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">// 停止移动</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// new</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> drag<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/main.js</code> 全局注册指令。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> helloWorld <span class="token keyword">from</span> <span class="token string">"./components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> drag <span class="token keyword">from</span> <span class="token string">"./drag"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 app</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"hello-world"</span><span class="token punctuation">,</span> helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册全局组件</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"drag"</span><span class="token punctuation">,</span> drag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注册全局指令</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加路由，导航跳转，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/drag.gif" alt="GIF描述"></p><h2 id="6、移除过滤"><a href="#6、移除过滤" class="headerlink" title="6、移除过滤"></a>6、移除过滤</h2><p>在 <code>Vue 2</code> 允许你自定义过滤器，可被用于一些常见的文本格式化。</p><p>过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong>。</p><p>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 在双花括号中 --></span>    &#123;&#123; message | capitalize &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'filters'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'ken'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">capitalize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是<strong>在 <code>Vue 3</code> 中，过滤器被移除了</strong>，原因有如下：</p><ul><li>过滤器的功能可以很容易地通过方法调用或计算的属性来复制，因此它主要提供语法而不是实用的价值。</li><li>过滤器需要一种自定义的微语法，该语法打破了表达式只是 <code>JavaScript</code> 的假设-这增加了学习和实现成本。</li><li>实际上，它与 JavaScript 自己的按位或运算符（<code>|</code>）冲突，并使表达式解析更加复杂。</li><li>过滤器还会在模板 IDE 支持中增加额外的复杂性（由于它们不是真正的 JavaScript）。</li></ul><h2 id="7、不再支持-keycode"><a href="#7、不再支持-keycode" class="headerlink" title="7、不再支持 keycode"></a>7、不再支持 <code>keycode</code></h2><p>在 <code>Vue 2</code> 中，<code>keyCode</code> 的事件用法<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">已经被废弃了</a>，并可能不会被最新的浏览器支持。</p><p>使用 <code>keyCode</code> attribute 也是允许的：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>有一些按键 (<code>.esc</code> 以及所有的方向键) 在 IE9 中有不同的 <code>key</code> 值, 如果你想支持 IE9，这些内置的别名应该是首选。</p><p>但是在 <code>Vue 3</code> 中，不再支持以下内容：</p><ul><li><p>不再支持使用数字（keyCodes）作为<code>v-on</code>修饰符。</p></li><li><p>去掉 <code>config.keyCodes</code>。</p></li></ul><h2 id="8、动画过渡类名"><a href="#8、动画过渡类名" class="headerlink" title="8、动画过渡类名"></a>8、动画过渡类名</h2><p>首先我们在 <code>src/views</code> 新建 <code>Transition.vue</code>，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bounce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris        facilisis enim libero, at lacinia diam fermentum id. Pellentesque        habitant morbi tristique senectus et netus.      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写JS代码，定义变量控制文字展示隐藏。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      show    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义样式：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">&lt;style lang="scss" scoped>#example </span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #2194c5<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span>  <span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.bounce-enter-active </span><span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in 0.5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bounce-leave-active </span><span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in 0.5s reverse<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> bounce-in</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">50% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>src/router/index.js</code>，创建路由。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/transition'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'transition'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Transition.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在 <code>src/App.vue</code> 引入 <code>router-view</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/transition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>transition<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果自行运行。</p><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>主要学习了如下几点：</p><ul><li>全局 <code>API</code> 注册的变化</li><li>知道如何使用自定义指令，</li><li>Vue3 移除了过滤器，</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-玩转动态指令</title>
      <link href="/2022/04/21/4-%E7%8E%A9%E8%BD%AC%E5%8A%A8%E6%80%81%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/04/21/4-%E7%8E%A9%E8%BD%AC%E5%8A%A8%E6%80%81%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转动态指令"><a href="#玩转动态指令" class="headerlink" title="玩转动态指令"></a>玩转动态指令</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><p>Vue 具有模板编译功能，模板编译生成渲染函数。通过执行渲染函数生成最新的虚拟节点，最后根据虚拟节点进行渲染，编译过程中包含对指令的解析 。</p><ul><li>模板插值</li><li>JavaScript 表达式</li><li>动态指令</li><li>动态指令计算</li></ul><h2 id="2、模板插值"><a href="#2、模板插值" class="headerlink" title="2、模板插值"></a>2、模板插值</h2><p>插值，是 <code>Vue.js</code> 数据绑定最基本形式，使用 <code>Mustache</code> 语法，也就是双花括号 <code>&#123;&#123;&#125;&#125;</code>。</p><p>首先在 <code>src/views</code> 中新建 <code>DynamicArguments.vue</code>，引入响应式计算方法 <code>ref</code>，定义变量 <code>msg</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      模板插值      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      &#123;&#123; msg &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"DynamicArguments"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"旅行包都买好了，就差一个时机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      msg<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">input</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>src/router/index.js</code> 注册路由。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/dynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">'../views/DynamicArguments.vue'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在 <code>src/App.vue</code> 添加 <code>router-view</code>，来控制路由跳转。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dynamicArguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>DynamicArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行 <code>npm run serve</code> 之后，效果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-34-06.png" alt="图片描述"></p><p><code>JavaScript</code> 表达式</p><p>目前为止，<code>Vue</code> 是支持 <code>JavaScript</code> 中所有表达式的插值使用的。比如像数组操作，字符串操作等。</p><p>在上面代码的基础上，我们先在 <code>setup</code> 函数中定义两个变量分别为 <code>num</code>、<code>arr</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"旅行包都买好了，就差一个时机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'前端开发'</span><span class="token punctuation">,</span> <span class="token string">'Python100天'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       msg<span class="token punctuation">,</span>       num<span class="token punctuation">,</span>       arr   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模板中进行数值计算，字符串分割，数组元素操作。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>  JavaScript 表达式  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  字符串 split 操作：&#123;&#123; msg.split("，")[0] &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  数值计算：&#123;&#123; num + 1 &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  数组操作：&#123;&#123; arr[0] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-34-56.png" alt="图片描述"></p><h2 id="3、动态指令"><a href="#3、动态指令" class="headerlink" title="3、动态指令"></a>3、动态指令</h2><p>Vue3 新增了动态指令，简单来说就是我们可以通过定义变量来控制指令的名字，这样可以提高指令操作效率，提高代码可读性。</p><p>动态指令有点类似定义变量：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">'name'</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面这串代码中的 <code>[key]</code> 会被解析成为 <code>name</code></p><h3 id="v-bind-varName-绑定变量"><a href="#v-bind-varName-绑定变量" class="headerlink" title="v-bind:[varName] 绑定变量"></a>v-bind:[varName] 绑定变量</h3><p>在 Vue 中，我们可以使用 <code>v-bind</code> 来绑定属性。</p><p>在 <code>setup</code> 函数中定义一个 <code>a</code> 变量，将 a 变量绑定在 href 属性上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    v-bind: 绑定属性    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mqxu.top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'syhan.top'</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-39-37.png" alt="图片描述"></p><p>我们使用变量来替换 <code>href</code> 属性，在 <code>setup</code> 函数中定义一个 <code>urlKey</code> 变量，然后通过 <code>[urlKey]</code> 解析变量。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    v-bind: 绑定属性    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[urlKey]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mqxu.top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'mqxu.top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> urlKey <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">,</span>        urlKey<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-bind-varName-简写模式"><a href="#v-bind-varName-简写模式" class="headerlink" title="v-bind:[varName] 简写模式"></a>v-bind:[varName] 简写模式</h3><p>在简写模式中，我们可以将 <code>v-bind</code> 去掉，只剩下 <code>:[varName]</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-bind: 简写模式      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[urlKey]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aaa.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'aaa.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> urlKey <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        urlKey<span class="token punctuation">,</span>        a<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-on-handlerEventName-绑定事件名变量"><a href="#v-on-handlerEventName-绑定事件名变量" class="headerlink" title="v-on:[handlerEventName] 绑定事件名变量"></a>v-on:[handlerEventName] 绑定事件名变量</h3><p>我们可以设计一个计数器，在 <code>setup</code> 函数定义一个 <code>num</code> 变量，初始化值为 0，定义方法来操作这个变量。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-on:[handlerEventName] 绑定事件名变量      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increase<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;num&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">,</span>        increase<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，我们也可以使用变量来定义事件名字。在 <code>setup</code> 函数中定义一个点击事件名字。代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-on:[handlerEventName] 绑定事件名变量      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[clickEventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increase<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; num &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> clickEventName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">,</span>        clickEventName<span class="token punctuation">,</span>        increase<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用 <code>@[clickEventName]</code> 提高效率，减少代码量</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-on:[handlerEventName] 简写模式      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@[clickEventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increase<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;num&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> clickEventName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">,</span>        clickEventName<span class="token punctuation">,</span>        increase<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果一样。</p><h3 id="v-slot-slotName-具名插槽"><a href="#v-slot-slotName-具名插槽" class="headerlink" title="v-slot:[slotName] 具名插槽"></a>v-slot:[slotName] 具名插槽</h3><p>在 <code>src/views</code> 新建 <code>aaa.vue</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'child'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>src/views</code> 新建 <code>bbb.vue</code>，使用 <code>slot</code> 具名插槽为子组件占住位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>父级元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'parent'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面两个组件引入到 <code>src/views/DynamicArguments.vue</code> 中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-slot:[slotName] 具名插槽      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>child</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> parent <span class="token keyword">from</span> <span class="token string">'./bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./aaa'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      parent<span class="token punctuation">,</span>      child<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-40-59.png" alt="图片描述"></p><p>我们也可以使用动态变量来设置插槽名字。</p><p>使用 <code>ref</code> 定义一个响应式变量 <code>child</code>，然后通过 <code>[child]</code> 的方式来绑定插槽的名字。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-slot:[slotName] 具名插槽      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[child]</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> parent <span class="token keyword">from</span> <span class="token string">'./bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./aaa'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      parent<span class="token punctuation">,</span>      child<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        child<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果一样。</p><p>接下来我们通过使用 <code>#slotName</code> 的方式给插槽进行标志。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      #[slotName] 简写模式      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[child]</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> parent <span class="token keyword">from</span> <span class="token string">'./bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./aaa'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      parent<span class="token punctuation">,</span>      child<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        child<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-42-14.png" alt="图片描述"></p><h2 id="4、动态指令计算"><a href="#4、动态指令计算" class="headerlink" title="4、动态指令计算"></a>4、动态指令计算</h2><p>字符串可以互相拼接，数值可以相加，相乘等操作。动态指令也能做这些操作。在 <code>javascript</code> 中，<code>key1</code> 跟 <code>key2</code> 可以拼接成 <code>key3</code>，同样可以使用 <code>[key1+key2]</code> 动态计算。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> key1 <span class="token operator">=</span> <span class="token string">'nam'</span><span class="token punctuation">;</span><span class="token keyword">let</span> key2 <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span><span class="token keyword">let</span> key3 <span class="token operator">=</span> key1 <span class="token operator">+</span> key2<span class="token punctuation">;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>key1 <span class="token operator">+</span> key2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Ken'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>key3<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Ken'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-42-53.png" alt="图片描述"></p><p>在 <code>vue</code> 中，是不是可以这样写呢？</p><p>我们先来定义两个变量，<code>key1</code>，<code>key2</code>，然后使用 <code>[key1+key2]</code> 来拼接字符串变量。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      动态指令计算      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[key1</span> <span class="token attr-name">+</span> <span class="token attr-name">key2]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aaa.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> key1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'nam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> key2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        key1<span class="token punctuation">,</span>        key2<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 npm run serve 之后，发现控制台报错了，说明 Vue 不能这样使用。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>学习了以下知识点：</p><ul><li>v-bind 动态指令</li><li>v-on 动态指令</li><li>v-slot 动态指令</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-玩转插槽新特性</title>
      <link href="/2022/04/21/3-%E7%8E%A9%E8%BD%AC%E6%8F%92%E6%A7%BD%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/04/21/3-%E7%8E%A9%E8%BD%AC%E6%8F%92%E6%A7%BD%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="3-玩转插槽新特性"><a href="#3-玩转插槽新特性" class="headerlink" title="3-玩转插槽新特性"></a>3-玩转插槽新特性</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>普通插槽</li><li>具名插槽</li><li>作用域插槽</li><li>插槽简写语法</li></ul><h2 id="2、插槽介绍"><a href="#2、插槽介绍" class="headerlink" title="2、插槽介绍"></a>2、插槽介绍</h2><p>为什么要有插槽语法呢？</p><p>我们知道前端组件化开发，要达到组件的高效复用，插槽是必不可少的开发利器。</p><p>插槽可以减少我们在开发过程中 if 语句的频繁使用，提高代码的可读性。</p><p>举个例子：比如一个按钮，原生按钮的样式实在太丑了，要求可以自定义按钮样式等内容。我们就可以使用插槽来自定义内容，避免写了很多种按钮组件。把不同的部分抽离出来，让用户自定义想要的内容。</p><p>当然，插槽也不是用得越多越好，插槽只是组件最大化利用的一种手段，而不是替代组件的方案。应该看应用场景而定。</p><h3 id="普通插槽"><a href="#普通插槽" class="headerlink" title="普通插槽"></a>普通插槽</h3><p>普通插槽，默认名字为 <code>default</code>，就是在子组件中使用 <code>&lt;slot&gt;</code> 标签来占用位置。</p><p>接下来举一个简单的例子，在 <code>src/views</code> 新建一个 <code>Slots.vue</code>。</p><h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>插槽默认内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'slots'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><p>在 <code>src/views</code> 新建父组件 <code>Parent.vue</code>，引入子组件 <code>Slots.vue</code>，在 <code>components</code> 中注册组件之后才能以标签的形式使用。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>父级元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slots</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>插槽内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>插槽内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slots</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> slots <span class="token keyword">from</span> <span class="token string">'./Slots'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'parent'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      slots<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>router/index.js</code> 引入父组件，配置路由：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/parent'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'parent'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Parent.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>App.vue</code> 中添加一行路由跳转代码。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>slots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行效果，可以看到插槽的内容被两个 <code>p</code> 标签替换了。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-46-19.png" alt="图片描述"></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>当我们需要知道哪些东西明确地放在哪个位置，具名插槽就派上用场了。</p><p>例如一个页面有头部区块内容，中间页面内容，页脚底部内容，我们就可以定义一个大的框架，使用三个具名插槽来占用位置，将头部区块抽成一个组件，中间内容抽成一个组件，页脚也抽成一个组件，这样更加能够提高代码可读性，也能减少每个组件文件的代码量。</p><p>来实现简单的案例。</p><h4 id="头部组件-HeaderSlot-vue"><a href="#头部组件-HeaderSlot-vue" class="headerlink" title="头部组件 HeaderSlot.vue"></a>头部组件 HeaderSlot.vue</h4><p>在 <code>src/views</code> 目录新建 <code>HeaderSlot.vue</code>，写下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>头部组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'headerSlot'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中间内容组件-BodySlot-vue"><a href="#中间内容组件-BodySlot-vue" class="headerlink" title="中间内容组件 BodySlot.vue"></a>中间内容组件 BodySlot.vue</h4><p>在 <code>src/views</code> 目录新建 <code>BodySlot.vue</code>，写下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bodySlot'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="页脚组件-FooterSlot-vue"><a href="#页脚组件-FooterSlot-vue" class="headerlink" title="页脚组件 FooterSlot.vue"></a>页脚组件 FooterSlot.vue</h4><p>在 <code>src/views</code> 目录新建 <code>FooterSlot.vue</code>，写下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>页脚组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'footerSlot'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="框架组件-Layout-vue"><a href="#框架组件-Layout-vue" class="headerlink" title="框架组件 Layout.vue"></a>框架组件 Layout.vue</h4><p>在 <code>src/views</code> 新建 <code>Layout.vue</code>，使用三个具名插槽占住位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"layout"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SlotName-vue"><a href="#SlotName-vue" class="headerlink" title="SlotName.vue"></a>SlotName.vue</h4><p>在 <code>src/views</code> 新建 <code>SlotName.vue</code>。</p><p>我们需要引入框架组件 <code>Layout.vue</code>，头部组件 ，页脚组件，中间内容组件，使用模板插槽来指定组件放在哪个位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--头部插槽放置的内容的区块--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--中间内容放置的区块--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--页脚内容放置的区块--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> layout <span class="token keyword">from</span> <span class="token string">"./Layout"</span><span class="token punctuation">;</span><span class="token keyword">import</span> headerSlot <span class="token keyword">from</span> <span class="token string">"./HeaderSlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> bodySlot <span class="token keyword">from</span> <span class="token string">"./BodySlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> footerSlot <span class="token keyword">from</span> <span class="token string">"./FooterSlot"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"slotName"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    layout<span class="token punctuation">,</span>    headerSlot<span class="token punctuation">,</span>    bodySlot<span class="token punctuation">,</span>    footerSlot<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加路由配置和路由跳转，运行效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-47-01.png" alt="image-20220415111358732"></p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>插槽能携带数据，在插槽内部可以使用绑定的数据。</p><h4 id="子组件-Child-vue"><a href="#子组件-Child-vue" class="headerlink" title="子组件 Child.vue"></a>子组件 Child.vue</h4><p>在 <code>src/views</code> 目录下新建 <code>Child.vue</code>。</p><p>然后在 data() 函数里定义 <code>data</code> 数据，将定义好的数据传递到插槽中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"child"</span><span class="token punctuation">,</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"小龙女"</span><span class="token punctuation">,</span> <span class="token string">"杨过"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父级组件-SlotScopes-vue"><a href="#父级组件-SlotScopes-vue" class="headerlink" title="父级组件 SlotScopes.vue"></a>父级组件 SlotScopes.vue</h4><p>在 <code>src/views</code> 目录下新建 <code>SlotScopes.vue</code>，将 <code>Child.vue</code> 引入进来，在 <code>components</code> 注册组件，父级组件使用 <code>child</code> 组件时，默认会把数据传递进来，通过 <code>slot-scope</code> 指令接收参数 <code>res</code>，这样我们就能使用绑定到插槽的数据了。</p><ul><li>第一种，使用 <code>v-for</code> 指令 和 <code>li</code> 标签渲染数据。</li><li>第二种，直接展示数据 <code>res.data</code>。</li><li>第三种，不使用其提供的数据，作用域插槽则变成匿名插槽。</li></ul><p>在 <strong>vue2.6及已上</strong> 版本，<strong>slot 和slot-scope</strong> 已经开始 <strong>废弃</strong>， 有了新的替代: <strong>v-slot</strong>，v-slot只能用在template 上和组件标签上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--用列表展示数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>res<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`key$&#123;index&#125;`<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in res.data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; item &#125;&#125;          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--直接显示数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>res<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; res.data &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--不使用其提供的数据，作用域插槽退变成匿名插槽--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"slotScopes"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    child<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">ul</span> <span class="token punctuation">&#123;</span>  <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加路由配置和路由跳转，运行效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-47-47.png" alt="图片描述"></p><h3 id="解构插槽"><a href="#解构插槽" class="headerlink" title="解构插槽"></a>解构插槽</h3><p>我们将上面的例子进一步改造。</p><h4 id="Child-vue"><a href="#Child-vue" class="headerlink" title="Child.vue"></a>Child.vue</h4><p>修改 <code>Child.vue</code>在 data 函数中定义 <code>obj</code> 数据，将 <code>obj</code> 数据绑定到 <code>slot</code> 标签上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;slot :data="data">&lt;/slot> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"child"</span><span class="token punctuation">,</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// data: ["张三", "张三丰", "小龙女", "杨过"],</span>      <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Parent-vue"><a href="#Parent-vue" class="headerlink" title="Parent.vue"></a>Parent.vue</h4><p>修改 <code>Parent.vue</code>，引入 <code>Child.vue</code>，组件注册完之后使用 <code>v-slot</code> 来解构 <code>obj</code> 。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- &lt;div class="parent">    &lt;h1>父级元素&lt;/h1>    &lt;slots>      &lt;p>插槽内容1&lt;/p>      &lt;p>插槽内容2&lt;/p>    &lt;/slots>  &lt;/div> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; obj &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          &#123;&#123; obj &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// import slots from "./Slots";</span><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"parent"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    child<span class="token punctuation">,</span>    <span class="token comment">// slots,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-48-36.png" alt="图片描述"></p><h2 id="3、插槽简写语法"><a href="#3、插槽简写语法" class="headerlink" title="3、插槽简写语法"></a>3、插槽简写语法</h2><p>在 Vue3 中，对插槽语法进行了升级，新增了 <code>#</code> 属性来替代 <code>v-slot</code> ，插槽简写模式是 <code>#slotName</code>。</p><h3 id="插槽简写"><a href="#插槽简写" class="headerlink" title="插槽简写"></a>插槽简写</h3><p>改造一下上面讲到的具名插槽，可以将 <code>v-slot:header</code> 改成 <code>#header</code>，将 <code>v-slot:body</code> 改成 <code>#body</code>，将 <code>v-slot:footer</code> 改成 <code>#footer</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-49-20.png"></p><p>运行代码，发现没有什么区别。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-50-27.png" alt="图片描述"></p><h3 id="动态变量定义插槽名字"><a href="#动态变量定义插槽名字" class="headerlink" title="动态变量定义插槽名字"></a>动态变量定义插槽名字</h3><p>我们可以使用动态变量的方式来定义插槽的名字 <code>#[slotNameVar]</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--头部插槽放置的内容的区块--></span>      <span class="token comment">&lt;!-- &lt;template v-slot:header> --></span>      <span class="token comment">&lt;!-- &lt;template #header> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[header]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--中间内容放置的区块--></span>      <span class="token comment">&lt;!-- &lt;template v-slot:body> --></span>      <span class="token comment">&lt;!-- &lt;template #body> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[body]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--页脚内容放置的区块--></span>      <span class="token comment">&lt;!-- &lt;template v-slot:footer> --></span>      <span class="token comment">&lt;!-- &lt;template #footer> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[footer]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> layout <span class="token keyword">from</span> <span class="token string">"./Layout"</span><span class="token punctuation">;</span><span class="token keyword">import</span> headerSlot <span class="token keyword">from</span> <span class="token string">"./HeaderSlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> bodySlot <span class="token keyword">from</span> <span class="token string">"./BodySlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> footerSlot <span class="token keyword">from</span> <span class="token string">"./FooterSlot"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"slotName"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    layout<span class="token punctuation">,</span>    headerSlot<span class="token punctuation">,</span>    bodySlot<span class="token punctuation">,</span>    footerSlot<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">"footer"</span><span class="token punctuation">,</span>      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">"body"</span><span class="token punctuation">,</span>      <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token string">"header"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-51-09.png" alt="图片描述"></p><p>也可以使用 <code>v-slot:[slotNameVar]</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ht</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[header]</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[body]</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[footer]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ht</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> layout <span class="token keyword">from</span> <span class="token string">"./Layout"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> headerSlot <span class="token keyword">from</span> <span class="token string">"./HeaderSlot"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> bodySlot <span class="token keyword">from</span> <span class="token string">"./BodySlot"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> footerSlot <span class="token keyword">from</span> <span class="token string">"./FooterSlot"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'slotName'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      layout<span class="token punctuation">,</span>   headerSlot<span class="token punctuation">,</span>    bodySlot<span class="token punctuation">,</span>     footerSlot<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">'footer'</span><span class="token punctuation">,</span>        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'body'</span><span class="token punctuation">,</span>        <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token string">'header'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果一样。</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><ul><li>使用 <code>v-slot:slotName</code> 来定义<code>具名插槽</code>，让组件更加具有复用效果。</li><li>知道 <code>vue3.0</code> 移除了 <code>slot-scope</code> 属性，统一使用 <code>v-slot</code>。</li><li>使用插槽简写语法。</li><li>使用动态变量来定义插槽名字 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-体验组合式 API</title>
      <link href="/2022/04/21/2-%E4%BD%93%E9%AA%8C%E7%BB%84%E5%90%88%E5%BC%8F%20API/"/>
      <url>/2022/04/21/2-%E4%BD%93%E9%AA%8C%E7%BB%84%E5%90%88%E5%BC%8F%20API/</url>
      
        <content type="html"><![CDATA[<h1 id="体验组合式-API"><a href="#体验组合式-API" class="headerlink" title="体验组合式 API"></a>体验组合式 API</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>setup</li><li>reactive</li><li>computed</li><li>toRefs</li><li>watch</li><li>watchEffect</li><li>readonly</li></ul><h2 id="2、简单例子"><a href="#2、简单例子" class="headerlink" title="2、简单例子"></a>2、简单例子</h2><p>组合 API 是 Vue3 中最常用特色语法。这是一种全新的逻辑重用和代码组织方法。</p><p>我们使用所谓的选项式 API 构建组件。如 <code>data</code>，<code>methods</code>，<code>computed</code> 等这种方法缺点已成事实，因为这些 JavaScript 代码本身不起作用。需要确切地知道模板中可以访问哪些属性以及 <code>this</code> 关键字的动作。Vue 编译器需要将此属性转换为工作代码。因此，我们无法从自动建议或类型检查中受益。</p><p>组合式 API 旨在通过将组件属性中当前可用的机制公开为 JavaScript 函数来解决此问题。Vue 核心团队将组合式 API 描述为“一组基于功能的附加 API，它们允许灵活地组成组件逻辑”。用组合式 API 编写的代码更具可读性，这使它更易于阅读和学习。</p><p>来看一个使用新的组合式 API 理解其工作原理的组件的简单示例。</p><p>新建 <code>src/components/counter/Counter.vue</code> </p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click&#x3D;&quot;increment&quot;&gt;    Count is: &#123;&#123; count &#125;&#125;, double is: &#123;&#123; double &#125;&#125; Name is: &#123;&#123; reonly.name &#125;&#125;  &lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive, computed, toRefs, watch, watchEffect, readonly &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const state &#x3D; reactive(&#123;      count: 0,      double: computed(() &#x3D;&gt; state.count * 2),    &#125;);    const reonly &#x3D; readonly(&#123;      name: &quot;InfinityX7&quot;,    &#125;);    function increment() &#123;      state.count++;    &#125;    watch(      () &#x3D;&gt; state.count,      (newVal, oldVal) &#x3D;&gt; &#123;        console.log(&quot;Counter is change &#x3D;&#x3D;&#x3D;&gt;&quot;, oldVal, newVal);      &#125;    );    watchEffect(() &#x3D;&gt; &#123;      console.log(&quot;watchEffect&quot;);      reonly.name &#x3D; &quot;开到荼蘼&quot;;    &#125;)    return &#123;      ...toRefs(state),      reonly,      increment,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/components/counter/index.js</code> 导出组件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">'./src/Counter.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 新建<code>src/views/TestCounter.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;test-counter&quot;&gt;    &lt;Counter &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import Counter from &quot;..&#x2F;components&#x2F;couter&#x2F;Couter.vue&quot;;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;TestCounter&quot;,  components: &#123;    Counter,  &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/router/index.js</code> 配置路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>   <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/counter"</span><span class="token punctuation">,</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Counter"</span><span class="token punctuation">,</span>   <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/TestCounter.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>App.vue</code>增加<code>/counter</code>导航跳转，运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/2022-04-14%2009.40.02.gif" alt="GIF描述"></p><h2 id="3、setup"><a href="#3、setup" class="headerlink" title="3、setup"></a>3、setup</h2><p>简而言之，它只是一个将属性和函数返回到模板使用的入口。</p><p>我们在这里声明所有响应式属性，计算属性，观察者和生命周期挂钩，然后将它们返回，以便可以在模板中使用它们。</p><p>所以<strong>没有从 <code>setup</code> 函数返回的内容将在模板中不可用</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、reactive-普通对象响应式代理"><a href="#4、reactive-普通对象响应式代理" class="headerlink" title="4、reactive 普通对象响应式代理"></a>4、reactive 普通对象响应式代理</h2><p>在 <code>setup</code> 函数里面， <code>reactive</code> 它主要是处理你的对象，让它经过 <code>Proxy</code> 的加工变为一个响应式的对象，类似于 <code>Vue2.0</code> 版本的 <code>data</code> 属性。</p><p>需要注意的是加工后的对象跟原对象是不相等的，并且加工后的对象属于<strong>深度克隆的对象</strong>。响应式转换是“深层的”：会影响对象内部所有嵌套的属性。基于 ES2015 的 Proxy 实现，返回的代理对象<strong>不等于</strong>原始对象。建议仅使用代理对象而避免依赖原始对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token literal-property property">double</span><span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、computed-计算属性"><a href="#5、computed-计算属性" class="headerlink" title="5、computed 计算属性"></a>5、computed 计算属性</h2><p>根据以上内容，我们声明了 <code>count</code> 用 <code>reatcive</code> 函数调用的响应式。它可以包装任何原生语法或对象并返回其响应式引用。传入一个 getter 函数，返回一个默认不可手动修改的 ref 对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、toRefs"><a href="#6、toRefs" class="headerlink" title="6、toRefs"></a>6、toRefs</h2><p>可以看到我们上面用了很多的新属性，<code>toRefs</code> 函数可以将 <code>reactive()</code> 创建出来的响应式对象，转换为普通的对象，只不过这个对象上的每个属性节点，都是 <code>ref()</code> 类型的响应式数据，配合 <code>&#123;&#123;&#125;&#125;</code> 插值指令能完成数据的双向绑定，在开发中非常高效。其实就有点像 ES6 的对象解构。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>  reonly<span class="token punctuation">,</span>  increment<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拆分之后，我们可以写出类似这样的伪代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">,</span>  double<span class="token punctuation">,</span>  reonly<span class="token punctuation">,</span>  increament<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>count</code>，<code>double</code> 直接在 <code>html</code> 上使用了：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125; --></span>  Count is: &#123;&#123; count &#125;&#125;, double is: &#123;&#123; double &#125;&#125; Name is: &#123;&#123;reonly.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>无需使用如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125; Name is:  &#123;&#123;reonly.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以，这种开发方式就大大提高了开发效率了。</p><h2 id="7、watch-监听"><a href="#7、watch-监听" class="headerlink" title="7、watch 监听"></a>7、watch 监听</h2><p><code>watch()</code> 函数用来监视某些数据项的变化，从而触发某些特定的操作，使用之前还是需要按需导入，监听 <code>state.count</code> 的变化，然后触发回调函数里面的逻辑，也就是监听用户输入的检索值，然后触发回调函数的逻辑把 <code>state.count</code> 值打印到控制台上：</p><ul><li>第一个参数传入一个 getter 函数，获取 state.count 返回值。</li><li>监听 state.count 新旧值变化。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Counter is change ===>'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、watchEffect-立即执行监听"><a href="#8、watchEffect-立即执行监听" class="headerlink" title="8、watchEffect 立即执行监听"></a>8、watchEffect 立即执行监听</h2><p>这个属性有点像 <code>vue 2.x</code> 中的 <code>immediate: true</code> 这个立即执行属性。立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当 <code>watchEffect</code> 在组件的 <code>setup()</code> 函数或生命周期钩子被调用时，侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。</p><p>在一些情况下，也可以显式调用返回值以停止侦听：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、readonly-只读代理"><a href="#9、readonly-只读代理" class="headerlink" title="9、readonly 只读代理"></a>9、readonly 只读代理</h2><p>传入一个对象（响应式或普通）或 ref，返回一个原始对象的 <strong>只读</strong> 代理。一个只读的代理是“深层的”，对象内部任何嵌套的属性也都是只读的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> reonly <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Zhangsan'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们来修改 <code>reonly.name</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  reonly<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Lisi'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现 <code>reonly.name</code> 还是 <code>Zhangsan</code>，没有变化。</p><h2 id="10、总结"><a href="#10、总结" class="headerlink" title="10、总结"></a>10、总结</h2><p>我们通过一个简单的例子对 <code>Vue 3</code> 组合式 <code>API</code> 有了一个初步的了解：</p><ul><li>reactive 对普通对象进行响应式代理。</li><li>setup 类似 <code>created</code> 生命周期。</li><li>computed 计算属性。</li><li>watch 属性值监听。</li><li>watchEffect 立即执行监听。</li><li>readonly 对值，对象进行只读代理。</li><li>toRefs 可对 reactive 申明的对象进行解构，提高开发效率。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-玩转 Vue3 响应性</title>
      <link href="/2022/04/21/1-%E7%8E%A9%E8%BD%AC%20Vue3%20%E5%93%8D%E5%BA%94%E6%80%A7/"/>
      <url>/2022/04/21/1-%E7%8E%A9%E8%BD%AC%20Vue3%20%E5%93%8D%E5%BA%94%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转Vue3响应性"><a href="#玩转Vue3响应性" class="headerlink" title="玩转Vue3响应性"></a>玩转Vue3响应性</h1><h2 id="1、内容介绍"><a href="#1、内容介绍" class="headerlink" title="1、内容介绍"></a>1、内容介绍</h2><p>使用 <code>Vue-cli</code> 脚手架搭建 <code>Vue3</code> 项目，实现 <code>TodoList</code> 小案例，探索 <code>Vue3.0</code> 响应式特性。</p><p>脚手架相关请参考 <a href="https://cli.vuejs.org/zh/">Vue CLI</a> 文档</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ul><li>环境准备</li><li>搭建 Vue 3 项目</li><li>升级代码版本</li><li>TodoList 案例</li></ul><h2 id="2、Vue-介绍"><a href="#2、Vue-介绍" class="headerlink" title="2、Vue 介绍"></a>2、Vue 介绍</h2><p>Vue 是由尤雨溪大神在 Google 工作时，受到其他框架设计思想的影响，开发出来的一套轻量级的前端框架，目前已成为全世界三大前端框架之一，是国内首选的前端框架。已有 15 万人在 Github 上为 Vue 点赞，可以在 <a href="https://v3.cn.vuejs.org/">Vue.js 3.0 文档</a> 中看到最新版的 <code>Vue3</code> 文档。</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>通过脚手架的方式安装最新版本的 Vue。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i -g @vue&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用以下命令可以查看是否升级到最新版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、搭建-Vue3-项目"><a href="#3、搭建-Vue3-项目" class="headerlink" title="3、搭建 Vue3 项目"></a>3、搭建 Vue3 项目</h2><p>输入以下命令创建一个名为 <code>vue-code</code> 的项目。</p><pre class="line-numbers language-bssh" data-language="bssh"><code class="language-bssh">vue create vue-code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一步：按键盘下箭头键，选择第三项 <strong>Manually select features</strong>，回车进入第二步</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-06-44.png" alt="图片描述"></p><p>第二步：按键盘空格键选择要安装的依赖，如下图所示，然后回车进入第三步。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-07-30.png" alt="图片描述"></p><p>选中 <code>3.x </code></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-08-27.png" alt="图片描述"></p><p>第三步：配置文件</p><ul><li><p>Use history mode for router?  输入 <code>  y</code>，回车。</p></li><li><p>Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported</p></li></ul><p>按下键盘下箭头，选中 <code>Sass/SCSS (with dart-sass)</code>。</p><ul><li>Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</li></ul><p>选中 <code>In dedicated config files</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-09-12.png" alt="图片描述"></p><ul><li><p>Save this as a preset for future projects? (y/N)   ：输入 <code>y</code>。</p></li><li><p>Save preset as：不用输入，直接回车。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-10-01.png" alt="图片描述"></p><ul><li>然后开始安装依赖，安装成功后：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-10-01.png" alt="图片描述"></p><p>在 项目根目录下的 <code>vue.config.js</code>文件中写入以下内容。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@vue/cli-service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成配置后，使用以下命令运行当前项目。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-11-18.png" alt="图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-11-57.png" alt="图片描述"></p><h2 id="4、TodoList-案例"><a href="#4、TodoList-案例" class="headerlink" title="4、TodoList 案例"></a>4、TodoList 案例</h2><p>我们要实现一个简单的 TodoList ：姓名、性别清单列表，目的是了解 Vue3 的 reactive 响应式与 Vue2.x 的 reactive 响应式的区别。</p><p>首先在 项目的 src/views 目录下新建一个 TodoList.vue 文件。我们可以输入性别和姓名，生成姓名性别列表，增删改姓名和性别。</p><h4 id="新建模板"><a href="#新建模板" class="headerlink" title="新建模板"></a>新建模板</h4><p>首先分析需求：用户在输入姓名，性别之后，生成一个列表，并且可以对这些列表进行<strong>增删改</strong>。其中 name 来保存用户输入的姓名，gender 来保存用户输入的性别，list 来保存用户添加之后的数据，index 来保存用户<strong>编辑</strong>，<strong>更新</strong>的姓名清单的下标。</p><p>在 <code>TodoList.vue</code> 中写入以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>todoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓名：&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>性别：&#123;&#123; item.gender &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后给 <code>TodoList</code> 加上样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style lang="scss" scoped>.todo-list</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token selector">.header</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #3e3e3e<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #9ebabb<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> 8px solid #629a9c<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #FFF<span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>      <span class="token selector">.btn-div</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">span</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">input,button</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着打开 src/router/index.js 来配置下 TodoList 路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HomeView <span class="token keyword">from</span> <span class="token string">"../views/HomeView.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> HomeView<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"about"</span><span class="token punctuation">,</span>    <span class="token comment">// route level code-splitting</span>    <span class="token comment">// this generates a separate chunk (about.[hash].js) for this route</span>    <span class="token comment">// which is lazy-loaded when the route is visited.</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">"../views/AboutView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/todoList"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/TodoList.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 src/App.vue 通过 router-link 标签来指定跳转页面：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/todoList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>todoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后运行以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到界面如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-13-06.png" alt="图片描述"></p><h4 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h4><p>接下来需要让用户点击<strong>添加按钮</strong>，输入姓名、性别。</p><blockquote><p>注意：如果输入框有一个为空，就不让用户进行<strong>添加</strong>处理。</p><p>添加成功之后，需要把 <code>name</code>，<code>gender</code> 上次保存的数据清空，以免重复添加。</p></blockquote><p>使用数组的 push 方法来添加数据。在 data() 函数的下面添加一个 methods 对象，将方法 add() 写在 methods 里面，代码如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h4><p>点击清单中的 <strong>编辑按钮</strong> 之后，数据会同步到两个输入框中。数据修改完成之后，点击 <strong>更新按钮</strong> 会对数据进行修改保存。</p><p>接下来我们在 methods 中添加 edit 方法，添加如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> item<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 edit 方法中我们通过下标拿到当前用户点击 <strong>编辑按钮</strong> 的数据，分别赋值给当前姓名变量和当前性别变量，这样数据就同步到输入框中，就可以对数据进行修改了。</p><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><p>编辑完成之后，我们需要把数据更新到列表中，需要注意的是：</p><ul><li>如果没有输入内容，不让用户更新，避免更新完之后没有数据。</li><li>更新完之后，需要清空输入框，避免重复更新。</li><li>同时把当前索引置空，将 <code>更新按钮</code> 变为 <code>添加按钮</code>。</li></ul><p>在 methods 添加 update 方法，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'todoList'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> item<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code>，我们可以对每条清单点击“编辑”，修改后点击“更新”即可。</p><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>对于不需要的清单列表，只要拿到当前列表的索引，即可对列表进行删除操作。</p><p>添加 del 函数代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>点击删除之后，清单就被删除了。</p><h4 id="清空操作"><a href="#清空操作" class="headerlink" title="清空操作"></a>清空操作</h4><p>如果用户不需要之前添加或者编辑过的数据，可以点击 <code>清空按钮</code> 将数据全部清空。</p><p>代码如下所示：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">// this.list = []</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code>，先添加几条清单，然后再点击 <code>清空按钮</code>，即可清空数据。</p><h4 id="值得关注的点"><a href="#值得关注的点" class="headerlink" title="值得关注的点"></a>值得关注的点</h4><ul><li>在 Vue3 中，我们可以直接给对象赋值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>直接修改数组元素</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Zhangsan'</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置数组 <code>length</code> 属性</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 <code>Map/Set</code></li></ul><p>举个例子，在 data 中使用集合初始化三个元素，对列表进行增删清空操作，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>移除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'前端工程师'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'Input a new item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newItem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、升级-Todolist-代码"><a href="#5、升级-Todolist-代码" class="headerlink" title="5、升级 Todolist 代码"></a>5、升级 Todolist 代码</h2><p>本机将学几个 <code>composition-api</code>。</p><ul><li><code>ref</code> 接受一个内部值并返回一个响应式且可变的对象，可以定义单个变量，例如数字类型，字符串类型，布尔类型，数组类型。</li><li><code>reactive</code> 返回对象的响应式副本对象，可以定义多个变量，例如对象。</li><li><code>setup</code> 内部启动函数，有点类似 Vue2.x 的 data，返回一个对象。</li></ul><h4 id="HTML-代码"><a href="#HTML-代码" class="headerlink" title="HTML 代码"></a>HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indexObj.index === null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓名：&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>性别：&#123;&#123; item.gender &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据变量定义"><a href="#数据变量定义" class="headerlink" title="数据变量定义"></a>数据变量定义</h4><p>在 Vue3中，所有的变量定义在 setup 函数里面，我们需要引入 <code>ref</code>，<code>reactive</code> 来定义变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>ref</code> 来定义列表，姓名，性别三个简单变量，用 <code>reactive</code> 来定义索引对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义数组</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义 name</span>    <span class="token keyword">let</span> gender <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义 gender</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义对象</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加操作-1"><a href="#添加操作-1" class="headerlink" title="添加操作"></a>添加操作</h4><p>首先在 setup 函数里定义 add 添加函数，来处理用户的添加操作。</p><p>其次在变量赋值的时，需要访问变量的 <code>value</code> 属性。</p><p>最后将 add 方法返回给模板 <code>todoList.vue</code> 中的按钮使用，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gender <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>sex<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj<span class="token punctuation">,</span>      add<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code> ，效果：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-14-05.png" alt="图片描述"></p><h4 id="编辑操作-1"><a href="#编辑操作-1" class="headerlink" title="编辑操作"></a>编辑操作</h4><p>我们需要在 setup 函数中定义 edit 函数</p><ul><li>获取索引</li><li>保存姓名</li><li>保存性别</li></ul><p>具体代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> gender<span class="token punctuation">.</span>value      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token parameter">index</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj<span class="token punctuation">,</span>      add<span class="token punctuation">,</span>      edit    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新操作-1"><a href="#更新操作-1" class="headerlink" title="更新操作"></a>更新操作</h4><p>在 setup 函数定义 update 方法，需要对数据进行非空判断。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h4><p>我们在 setup 函数中定义 del 方法。</p><p><strong>删除时</strong></p><p>需要拿到当前点击所在列的索引，对列表进行删除操作。</p><p><strong>删除之后</strong></p><p>也需要将索引，姓名，性别置为置空。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清空操作-1"><a href="#清空操作-1" class="headerlink" title="清空操作"></a>清空操作</h4><p>将 clear 函数定义在 setup 中，最终暴露出去给模板使用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h4><p>实现的效果跟未升级之前的代码效果是一样的：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- &lt;button @click="add">添加&lt;/button>    &lt;button @click="update">更新&lt;/button> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indexObj.index === null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓名：&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>性别：&#123;&#123; item.gender &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gender <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj<span class="token punctuation">,</span>      add<span class="token punctuation">,</span>      edit<span class="token punctuation">,</span>      update<span class="token punctuation">,</span>      del<span class="token punctuation">,</span>      clear<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.todo-list</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token selector">.header</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #3e3e3e<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #9ebabb<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> 8px solid #629a9c<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>      <span class="token selector">.btn-div</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">span</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">input,button</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、非响应式"><a href="#6、非响应式" class="headerlink" title="6、非响应式"></a>6、非响应式</h2><p>在 Vue3 还提供了一些 <code>API</code> 专门处理非响应性的场景。</p><p>例如：我们在 <code>Vue</code> 组件中一次性消耗大量的数据，如果这些数据只是展示，那么我们是不应该让这些数据具有响应特性的，我们都知道在 Vue2.x 中，我们通常会使用以下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> Ken <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 假如这里数组有很多数据，如果 vue 直接去遍历数据使其具有响应式特性，就会变得很慢</span><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所以我们通常会将数据冻结起来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h4><p>在 Vue3 中，提供了 <code>markRaw</code>，<code>readonly</code>，这两个 <code>API</code> 是用来防止数据被改变的，告诉响应式机制系统，无需跟踪监测属性以及其后代属性，会跳过数据跟踪，进一步更新数据都不会触发渲染。</p><p>新建 src/views/MarkRaw.vue</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    你好 &#123;&#123; obj.name &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不能修改数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> markRaw <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Vue'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Ken'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code> 之后，效果如下：</p><p>看到打印出来的数据，被标志上了 <code>__v_skip:true</code> 属性。Vue3 就是通过这个属性来判断是否跳过当前值响应式特性的监测。</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/6227e3c0382af8edcda43bbd479c346e-0.gif" alt="图片描述"></p><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> readonly <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Vue'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Ken'</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行可以看到打印出来的数据被标记上了一个属性 <code>__v_readonly: Proxy</code>，表示仅仅被代理，不具有响应式特性</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/6805ff300117523bbc2ea16b0f97f342-0.gif" alt="图片描述"></p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p>学会如何搭建 Vue 3 项目，以及从 Vue 2 升级到 Vue3。</p><p>在 Vue3 中，可以使用：</p><ul><li>给对象赋值</li><li>给数组 <code>length</code> 属性设置</li><li>通过下标的方式对数组元素进行修改</li><li>操作 <code>Map/Set</code>，<code>ref</code> 定义响应式单个变量，<code>reactive</code> 定义响应式对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/04/18/hello/"/>
      <url>/2022/04/18/hello/</url>
      
        <content type="html"><![CDATA[<h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><blockquote><p>There is always a place, a person waiting for you to appear.</p></blockquote><p>总有那么一个地方，有那么一个人在等你出现。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/0.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
