<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue基础语法</title>
      <link href="/2022/07/23/vue-chu-ti-yan-de-fu-ben/"/>
      <url>/2022/07/23/vue-chu-ti-yan-de-fu-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h1><h2 id="⼀、Vue中应⽤和组件的概念"><a href="#⼀、Vue中应⽤和组件的概念" class="headerlink" title="⼀、Vue中应⽤和组件的概念"></a>⼀、Vue中应⽤和组件的概念</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue中应⽤和组件的概念<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// createApp 表示创建⼀个 Vue 应⽤ ，存储到 app 变量中</span>    <span class="token comment">// 传⼊的参数表示，这个应⽤最外层的组件，应该如何展示</span>    <span class="token comment">// mvvm设计模式：m -> model数据，v ->view 视图 ，vm -> viewModel 视图数据连接层</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'hello world'</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2>&#123;&#123;message&#125;&#125;&lt;/h2></span><span class="token template-punctuation string">`</span></span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// vm 代表的就是 Vue 应⽤的根组件，mount返回的根组件</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/kttSgB.png" style="zoom:50%;" /><p>可以操作vm</p><ol><li><p>createApp 表示创建⼀个 Vue 应⽤，存储到 app 变量中</p></li><li><p>传⼊的参数表示，这个应⽤最外层的组件，应该如何展示</p></li><li><p>mvvm 设计模式</p><p>a. m-&gt;model 数据 data()</p><p>b. v-&gt;view 视图 template:</p><p>c. vm-&gt;viewModel 视图数据连接层 ( Vue 组件实现)</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm<span class="token operator">=</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//vm代表的就是Vue应⽤的根组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在⽹⻚的 comsole 中可以通过</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'bye'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来更改 Vue 组件中 data 的数值。</p><h2 id="⼆、理解Vue的⽣命周期函数"><a href="#⼆、理解Vue的⽣命周期函数" class="headerlink" title="⼆、理解Vue的⽣命周期函数"></a>⼆、理解Vue的⽣命周期函数</h2><blockquote><p>Vue ⽣命周期函数: 在 ‘某⼀时刻’ 会 ‘⾃动执⾏’ 的函数</p></blockquote><p>重要的四类、⼋个⽣命周期函数:</p><ol><li><p>Vue 实例创建函数</p><p>beforeCreate(): 在创建 Vue 实例之前会⾃动执⾏的函数</p><p>created(): 在 Vue 实例⽣成之后会⾃动执⾏的函数</p></li><li><p>⻚⾯渲染函数</p><p>beforeMount(): 在组件内容被渲染到⻚⾯之前⽴即⾃动执⾏的函数</p><p>mounted(): 在组件内容被渲染到⻚⾯之后⾃定执⾏的函数</p></li><li><p>数据更新函数</p><p>beforeUpdate(): 当 date 中的数据发⽣变化时,会⾃动执⾏的函数</p><p>updated(): 当 data 中的数据发⽣变化,⻚⾯重新渲染后,会⾃动执⾏的函数</p></li><li><p>Vue 实例销毁函数</p><p>beforeUnmount(): 当 Vue 应⽤失效时/销毁时,⾃动执⾏的函数</p><p>unmounted(): 当 Vue 应⽤销毁时,且 DOM 完全销毁之后,⾃动执⾏的函数</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/y7I4a5.png" style="zoom:50%;" /></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue中⽣命周期函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// ⽣命周期函数：在某⼀时刻⾃动执⾏的函数</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'hello world'</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//在 Vue 实例⽣成之前会⾃动执⾏的函数</span>      <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeCreate'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//在 Vue 实例⽣成之后会⾃动执⾏的函数</span>      <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//在组件内容被渲染到⻚⾯之前⾃动执⾏的函数</span>      <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeMount'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//在组件内容被渲染到⻚⾯之后⾃动执⾏的函数</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 当 data 中的数据发⽣变化时⾃动执⾏的函数 （可以在控制台 vm.$data.message = 'aaa'）</span>      <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeUpdate'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 当 data中的数据发⽣变化，同时⻚⾯完成更新后，会⾃动执⾏的函数</span>      <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'updated'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 当 Vue 应⽤失效时⾃动执⾏的函数 (可以通过在控制台执⾏ app.unmount()模拟该操作)</span>      <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeUnmount'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//当 Vue 应⽤失效且 DOM 完全销毁之后，⾃动执⾏的函数</span>      <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'unmounted'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2>&#123;&#123;message&#125;&#125;&lt;/h2></span><span class="token template-punctuation string">`</span></span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Y3WUpc.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/l5KGOu.png" style="zoom:50%;" /><h2 id="三、⻚⾯插值操作"><a href="#三、⻚⾯插值操作" class="headerlink" title="三、⻚⾯插值操作"></a>三、⻚⾯插值操作</h2><h3 id="1-插值表达式-Mustache"><a href="#1-插值表达式-Mustache" class="headerlink" title="1. 插值表达式 Mustache"></a>1. 插值表达式 Mustache</h3><p>插值表达式<code>&#123;&#123;&#125;&#125;`的使⽤，是将模型数据插⼊到⻚⾯当中。 插值表达式为什么叫 Mustache (英⽂:⼋字须)呢？看看`&#123;&#123;内容&#125;&#125;</code>的两个⼤括号像不像⼋字胡⼦呢。</p><p><strong>示例代码</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue插值表达式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; （⽤插值直接显示变量） <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;firstName.length&#125;&#125; （使⽤.访问变量的属性） <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;firstName + '-----' + lastName&#125;&#125; （字符串的拼接）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;count * 2&#125;&#125; （简单的算术运算）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;firstName === 'Stephen'? '真棒':'还好'&#125;&#125; （三⽬运算）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;lastName.split('rr').reverse().join(',')&#125;&#125;（使⽤Javascript函数）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;customMethod(lastName)&#125;&#125; （调⽤⾃定义函数）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Stephen'</span><span class="token punctuation">,</span>          <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Curry'</span><span class="token punctuation">,</span>          <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">10</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">customMethod</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运⾏效果</strong></p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/9ptaxJ.png" style="zoom:50%;" /><p>由上⾯的例⼦可以看出：</p><ul><li>插值表达式⽀持与其他的⽂字联合使⽤。</li><li>也⽀持三⽬运算和算术运算。</li><li>还可以使⽤ javascript 函数和⾃定义函数。</li><li>lastName.split(‘rr’).reverse().join(‘,’) 的作⽤是将 lastName 字符串 ‘Curry’ ⽤ ‘rr’ 分割为数组 [‘Cu’, ‘y’] , 然后数组倒序，并⽤逗号为分隔符号合并 ( join ) 字符串数组。</li><li>Vue 对象中的 methods 代码段是专⻔⽤于定义⾃定义函数的，我们⾃定义了函数 customMethod， 并在插值表达式中使⽤了它。</li></ul><h3 id="2-v-html与v-pre指令的使⽤"><a href="#2-v-html与v-pre指令的使⽤" class="headerlink" title="2. v-html与v-pre指令的使⽤"></a>2. v-html与v-pre指令的使⽤</h3><h4 id="1-v-html指令"><a href="#1-v-html指令" class="headerlink" title="1) v-html指令"></a>1) v-html指令</h4><p>假如我们从服务器请求回来的是⼀个HTML的代码⽚段</p><ul><li>如果我们想将 html 原样输出，就是⽤<code>&#123;&#123;&#125;&#125;`就可以了。* 如果我们希望浏览器解析 html 后展示，那就要使⽤到 v-html 了。**代码示例**<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-html指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 错误的做法 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123;link&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 正确的做法 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">'&lt;strong>13&lt;/strong>'</span><span class="token punctuation">,</span>          <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'&lt;a href="https://www.baidu.com">百度⼀下&lt;/a>'</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>**运⾏效果**<img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/74T4iT.png" style="zoom:50%;" />#### 2) v-pre指令如果我们想把下⾯的这段⽂字原样输出，怎么办？<pre class="line-numbers language-Plain" data-language="Plain"><div class="caption"><span>Text</span></div><code class="language-Plain">Vue真有趣，特别是&#123;&#123;Mustache&#125;&#125;插值表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>注意⽂本⾥⾯有⼀个`&#123;&#123;Mustache&#125;&#125;</code> ，Vue 会去找 Mustache 变量，找不到会报错。</li></ul><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/hadOsb.png" style="zoom:50%;" /><p>即使我们定义了变量，也不满⾜我们的需求。 </p><p>我们需要将 Mustache 原样输出，⽽不是交给浏览器做变量插值操作，这就需要⽤到 v-pre指令。</p><p><strong>代码示例：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>Vue真有趣，特别是&#123;&#123;Mustache&#125;&#125;插值表达式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>运⾏效果：</strong></p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/WTuYvS.png" style="zoom:50%;" /><h3 id="3-v-text与v-cloak的使⽤"><a href="#3-v-text与v-cloak的使⽤" class="headerlink" title="3. v-text与v-cloak的使⽤"></a>3. v-text与v-cloak的使⽤</h3><h4 id="1）v-text指令"><a href="#1）v-text指令" class="headerlink" title="1）v-text指令"></a>1）v-text指令</h4><p>我们⽤前⾯ Vue3 的快速起步练习，先来看⼀下 Mustache 的⼀个⼩ Bug 。</p><p>浏览器由于⽹速的问题，可能会在渲染 Mustache 数据的时候发⽣延迟，导致⼀瞬间会先显示 <code>&#123;&#123;message&#125;&#125;</code>，⽽不是 Hello Vue3。</p><p>我们可以使⽤ Chrome 浏览器来模拟这个闪屏的问题：F12-&gt;NetWork-&gt;Slow 3G (慢速3G⽹络)。</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/P83P8V.png" style="zoom:50%;" /><p>可以使⽤ v-text 指令来解决闪屏的问题</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-text指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 使⽤v-text解决闪屏现象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'hello Vue'</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运⾏效果：</strong></p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/csMx8K.png" style="zoom:50%;" /><ul><li><p>注意<code>&lt;h2 v-text=&quot;message&quot;&gt;&lt;/h2&gt;</code>这⾥，我们使⽤ v-text 代替了<code>&#123;&#123;message&#125;&#125;</code>，从⽽解决了闪屏的问题。</p></li><li><p>但是要注意 v-text 并不支持这种写法<code> &lt;h2 v-text=&quot;你好，message&quot;&gt;&lt;/h2&gt;</code>，这样写 Vue 会将你好，message 看作插值去 data 里面找数据属性定义，而我们只定义了 message</p><p>所以，再到一定程度上 v-text 失去了 <code>&#123;&#123;&#125;&#125;` 使用语法的灵活性。* 其他的使用方法 v-text 和 `&#123;&#123;&#125;&#125;</code> 是基本一致的。</p></li></ul><h4 id="2）v-cloak指令"><a href="#2）v-cloak指令" class="headerlink" title="2）v-cloak指令"></a>2）v-cloak指令</h4><p>如果我们既想使用 <code>&lt;h2&gt;你好，&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code> 这种定义方式的灵活性，又想解决闪屏的问题，该怎么做呢？</p><p>可以使用 v-cloak 指令来解决</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-cloak指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* v-cloak指令的样式：在DOM节点渲染完成之前不显示 */</span>   <span class="token selector">[v-cloak]</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>     你好，&#123;&#123;message&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Vue3'</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使⽤ v-cloak 指令并为该指令设置 display ：none 的样式，⼆者结合使⽤表示在 h2 的DOM节点渲染完 成之前不显示你好，<code>&#123;&#123;message&#125;&#125;</code> ，渲染完成之后显示 你好，Vue3</li><li>注意：样式的定义要放在 head 标签⾥⾯，否则因为浏览器渲染顺序的差异，有可能不会⽣效。</li><li>注意：cloak 不是 clock ，cloak 英⽂是⽃篷、披⻛的意思。这⽐较形象，我先⽤⽃篷把⾃⼰盖起来， 等我化好妆了再出来⻅⼈。</li></ul><h2 id="四、⽤户操作事件监听"><a href="#四、⽤户操作事件监听" class="headerlink" title="四、⽤户操作事件监听"></a>四、⽤户操作事件监听</h2><h3 id="1-v-on事件监听指令的基本⽤法"><a href="#1-v-on事件监听指令的基本⽤法" class="headerlink" title="1. v-on事件监听指令的基本⽤法"></a>1. v-on事件监听指令的基本⽤法</h3><p>我们在开发过程中经常需要监听⽤户的输⼊，⽐如：⽤户的点击事件、拖拽事件、键盘事件等等。 </p><p>这就需要⽤到 v-on 指令。</p><p>我们通过⼀个简单的计数器的例⼦，来学习 v-on 指令的使⽤。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>计数器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">[v-cloak]</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token selector">button</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>counter：&#123;&#123;counter&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter--<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义数据 counter，⽤于表示计数器数字，初始值设置为0</li><li>v-on:click 表示当发⽣点击事件的时候，触发等号⾥⾯的<strong>表达式</strong>或者<strong>函数</strong></li><li>表达式 counter++ 和 counter– 分别实现计数器数值的加1和减1操作</li><li>语法糖：我们可以将 v-on:click 简写为 @click</li></ul><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/48BXiv.png" style="zoom:50%;" /><ul><li>点击加号数值加1</li><li>点击减号数值减1</li></ul><p>表达式只适⽤于简单的数据操作场景。如果操作⽐较复杂，我们要使⽤函数的⽅式实现。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>计数器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">[v-cloak]</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token selector">button</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>counter：&#123;&#123;counter&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>incr()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运⾏效果同前</strong></p><p><strong>附录：js常⽤可监听事件列表</strong></p><table><thead><tr><th>属性</th><th>事件何时触发</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/event_onabort.asp">abort</a></td><td>图像的加载被中断。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onblur.asp">blur</a></td><td>元素失去焦点。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onchange.asp">onchange</a></td><td>域的内容被改变。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onclick.asp">click</a></td><td>当⽤户点击某个对象时调⽤的事件句柄。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_ondblclick.asp">dblclick</a></td><td>当⽤户双击某个对象时调⽤的事件句柄。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onerror.asp">error</a></td><td>在加载⽂档或图像时发⽣错误。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onfocus.asp">focus</a></td><td>元素获得焦点。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onkeydown.asp">keydown</a></td><td>某个键盘按键被按下。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onkeypress.asp">keypress</a></td><td>某个键盘按键被按下并松开。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onkeyup.asp">keyup</a></td><td>某个键盘按键被松开。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onload.asp">load</a></td><td>⼀张⻚⾯或⼀幅图像完成加载。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onmousedown.asp">mousedown</a></td><td>⿏标按钮被按下。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onmousemove.asp">mousemove</a></td><td>⿏标被移动。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onmouseout.asp">mouseout</a></td><td>⿏标从某元素移开。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onmouseover.asp">mouseover</a></td><td>⿏标移到某元素之上。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onmouseup.asp">mouseup</a></td><td>⿏标按键被松开。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onreset.asp">reset</a></td><td>重置按钮被点击。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onresize.asp">resize</a></td><td>窗⼝或框架被重新调整⼤⼩。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onselect.asp">select</a></td><td>⽂本被选中。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onsubmit.asp">submit</a></td><td>确认按钮被点击。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/event_onunload.asp">unload</a></td><td>⽤户退出⻚⾯。</td></tr></tbody></table><h3 id="2-v-on事件监听⽅法传参"><a href="#2-v-on事件监听⽅法传参" class="headerlink" title="2. v-on事件监听⽅法传参"></a>2. v-on事件监听⽅法传参</h3><p>我们通过点击事件监听，实现了计数器的加⼀和减⼀的操作。 </p><p>如果我们想更灵活⼀点，实现加 n 和减 n 的操作，我们就需要给⾃定义的函数传参数了。</p><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>传参计数器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">[v-cloak]</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token selector">button</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>counter：&#123;&#123;counter&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>incr(step)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc(step)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token literal-property property">step</span><span class="token operator">:</span> <span class="token number">2</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">incr</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">+=</span> n<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">desc</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">-=</span> n<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们定义了步⻓变量 step，默认值为2，作为参数传递给 incr 和 decr ⽅法。</li><li>incr 和 decr ⽅法接受参数，并分别做加 n 和 减n 的操作。</li><li>如果我们想动态地实现加n，减n，就设置app.step = n 就可以了。</li></ul><p><strong>运⾏效果</strong></p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/dKiBQl.png" style="zoom:50%;" /><ul><li>每点击⼀次加2按钮，counter 加2；每点击⼀次减2按钮，counter 减2</li></ul><p>Vue 会默认给我们给我们⼀个参数 event ，这个参数的使⽤⽅法如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decr(step,$event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将event参数放在参数列表的的最后位置。注意：函数没有⾃定义参数也可以接收event参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">desc</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">-</span> n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们将event参数打印出来，结果如下：</p><ul><li>PointerEvent 的类型为“ mouse ”，表示⼀个⿏标产⽣的事件</li><li>下图中可以看出，我们通过事件可以获取，事件产⽣的屏幕坐标、是否冒泡、事件类型 click 等信息</li></ul><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/zu5x0E.png" style="zoom:50%;" /><h3 id="3-v-on事件监听修饰符"><a href="#3-v-on事件监听修饰符" class="headerlink" title="3. v-on事件监听修饰符"></a>3. v-on事件监听修饰符</h3><p>在学习事件监听修饰符之前，我们有必要来复习⼀些基础知识。</p><h4 id="1）什么是事件冒泡与事件捕获？"><a href="#1）什么是事件冒泡与事件捕获？" class="headerlink" title="1）什么是事件冒泡与事件捕获？"></a>1）什么是事件冒泡与事件捕获？</h4><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/D0i3Sp.png" style="zoom:50%;" /><p>事件冒泡和事件捕获是 Dom 事件传播的两种模式，默认是冒泡模式。</p><ul><li>事件冒泡：事件从事件⽬标( target )开始，往上冒泡直到⻚⾯的最上⼀级标签。对于上⾯的例⼦，当 我们点击 div#child 的时候，⽅法 childMethod 和 parentMethod 将先后被调⽤。</li><li>事件捕获：事件捕获模式与冒泡模式正好相反，事件从⽗元素向⼦元素传播。对于上⾯的例⼦，当 我们点击 div#parent 的时候，⽅法 parentMethod和childMethod 将先后被调⽤。</li></ul><h4 id="2）什么是html标签的默认⾏为？"><a href="#2）什么是html标签的默认⾏为？" class="headerlink" title="2）什么是html标签的默认⾏为？"></a>2）什么是html标签的默认⾏为？</h4><ul><li>⽐如：标签<code>&lt;a&gt;</code>的默认⾏为是实现跳转</li><li>⽐如：<code>&lt;input type=&quot;submit&quot;</code>默认⾏为是提交表单</li></ul><h4 id="3）事件监听的修饰符"><a href="#3）事件监听的修饰符" class="headerlink" title="3）事件监听的修饰符"></a>3）事件监听的修饰符</h4><h5 id="stop修饰符"><a href="#stop修饰符" class="headerlink" title=".stop修饰符"></a>.stop修饰符</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件冒泡stop修饰符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#parent</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>74<span class="token punctuation">,</span> 138<span class="token punctuation">,</span> 197<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token selector">#child</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>212<span class="token punctuation">,</span> 219<span class="token punctuation">,</span> 115<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      ⽗元素      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ⼦元素      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">parentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'⽗元素'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">childMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'⼦元素'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子元素</strong>加上stop修饰符号之后，点击⼦元素div，只有childMethod⽅法被触发，parentMethod⽅法不 会被触发。</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/lGakrD.png" style="zoom:50%;" /><h5 id="self-修饰符"><a href="#self-修饰符" class="headerlink" title=".self 修饰符"></a>.self 修饰符</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件冒泡self修饰符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#parent</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>74<span class="token punctuation">,</span> 138<span class="token punctuation">,</span> 197<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token selector">#child</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>212<span class="token punctuation">,</span> 219<span class="token punctuation">,</span> 115<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">@click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      ⽗元素      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ⼦元素      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">parentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'⽗元素'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">childMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'⼦元素'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>⽗元素</strong>加上self修饰符之后，点击⼦元素div，只有childMethod⽅法被触发，parentMethod⽅法不会被 触发。</p><p>运⾏效果同前。</p><p><strong>.prevent修饰符</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>阻⽌默认事件.prevent修饰符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- ⽤.prevent修饰符阻⽌默认事件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">doThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">' ⽤.prevent修饰符阻⽌默认事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上 prevent 修饰符号之后，不会有 a 标签的默认跳转⾏为，也没有表单的提交⾏为，会调⽤ doThis() ⽅法。</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/UkIYGV.png" style="zoom:50%;" /><p><strong>注意：</strong></p><p>修饰符号可以串联使⽤，.stop.prevent 表示先阻⽌冒泡⾏为，后阻⽌ a 标签的默认跳转⾏为。</p><h4 id="4）事件监听修饰符总结"><a href="#4）事件监听修饰符总结" class="headerlink" title="4）事件监听修饰符总结"></a>4）事件监听修饰符总结</h4><ul><li>stop 修饰符，可以阻⽌事件向上级标签的冒泡⾏为。</li><li>self 修饰符，表示被该修饰符修饰的⽗元素不接收⼦元素的事件冒泡⾏为。</li><li>prevent 修饰符，可以阻⽌⼀些 html 标签的默认⾏为，⽐如 a 标签。</li><li>enter 修饰符（按键监听修饰符的⼀种），可以监听回⻋按键的操作。</li><li>once 修饰符，表示事件只可以被触发监听⼀次，以后再操作则⽆效。</li><li>capture 修饰符，表示开启事件传播的捕获模式，事件由⽗元素向⼦元素传播，较少⽤到。</li></ul><h4 id="5）按键监听修饰符"><a href="#5）按键监听修饰符" class="headerlink" title="5）按键监听修饰符"></a>5）按键监听修饰符</h4><p>Vue 给我们定义好了⼀些常⽤的按键监听修饰符，如下：</p><ul><li>.enter 监听回⻋键</li><li>.tab 监听 Tab 键</li><li>.delete (监听“删除”和“退格”键)</li><li>.esc 监听 ESC 键</li><li>.space 监听空格键</li><li>.up 监听”上”键</li><li>.down 监听”下”键</li><li>.left 监听”左”键</li><li>.right 监听”右”键</li></ul><p>如果觉得上⾯的键盘监听修饰符不够⽤，还可以⾃定义，⽐如定义监听 F1 按键。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 可以使⽤ `v-on:keyup.f1`</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f1 <span class="token operator">=</span> <span class="token number">112</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>F1按键的键盘码是112。</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/hKvEYJ.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue初体验</title>
      <link href="/2022/07/22/vue-chu-ti-yan/"/>
      <url>/2022/07/22/vue-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-初体验"><a href="#Vue-初体验" class="headerlink" title="Vue 初体验"></a>Vue 初体验</h1><h2 id="⼀、前端渐进式框架-Vue-基本概念"><a href="#⼀、前端渐进式框架-Vue-基本概念" class="headerlink" title="⼀、前端渐进式框架 Vue 基本概念"></a>⼀、前端渐进式框架 Vue 基本概念</h2><h3 id="1-前端响应式框架-Vue-简介"><a href="#1-前端响应式框架-Vue-简介" class="headerlink" title="1. 前端响应式框架 Vue 简介"></a>1. 前端响应式框架 Vue 简介</h3><ul><li>Vue (读⾳ /vjuː/，类似于 view)</li><li>Vue 的官⽅⽹站<ul><li><a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a> Vue2</li><li><a href="https://v3.cn.vuejs.org/">https://v3.cn.vuejs.org/</a> Vue3</li></ul></li><li>是中国的⼤神尤⾬溪开发的，为数不多的国⼈开发的世界顶级开源软件</li><li>是⼀套⽤于构建⽤户界⾯的<strong>渐进式框架</strong>，Vue 被设计为可以⾃底向上逐层应⽤。</li><li>MVVM 响应式编程模型，避免直接操作 DOM , 降低 DOM 操作的复杂性。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mNgH1E.png"></p><ul><li>MVVM：⻚⾯输⼊改变数据，数据改变影响⻚⾯数据展示与渲染<ul><li>M（model）：普通的 javascript 数据对象</li><li>V（view） ：前端展示⻚⾯</li><li>VM（ViewModel）：⽤于双向绑定数据与⻚⾯，对于我们来说，就是 Vue 的实例</li></ul></li></ul><h3 id="2-Vue-的核⼼功能"><a href="#2-Vue-的核⼼功能" class="headerlink" title="2. Vue 的核⼼功能"></a>2. Vue 的核⼼功能</h3><ul><li><p>基础功能：⻚⾯渲染、表单处理提交、帮我们管理 DOM(虚拟 DOM)节点。</p></li><li><p>组件化开发：增强代码的复⽤能⼒，复杂系统代码维护更简单。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/zIVkG5.png" width="70%"><ul><li>前端路由：更流畅的的⽤户体验、灵活的在⻚⾯切换已渲染组件的显示，不需与后端做多余的交互。</li><li>状态集中管理：MVVM 响应式模型基础上实现多组件之间的状态数据同步与管理。</li><li>前端⼯程化：结合 webpack 等前端打包⼯具，管理多种静态资源，代码，测试，发布等，整合前端⼤型项⽬。</li></ul><h3 id="3-渐进式框架"><a href="#3-渐进式框架" class="headerlink" title="3. 渐进式框架"></a>3. 渐进式框架</h3><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/usutHE.png" width="60%"><p>“渐进式框架”的理解，就是⽤你想⽤或者能⽤的功能特性，你不想⽤的部分功能可以先不⽤。</p><p><strong>Vue 不强求你⼀次性接受并使⽤它的全部功能特性。</strong></p><ol><li>场景⼀：公司刚开始⼀个项⽬，技术⼈员对 Vue 的掌握也不⾜够。那么我们就不能使⽤ Vue 了么？当然不是，如果你只是使⽤ Vue 做些基础操作，如：⻚⾯渲染、表单处理提交功能，那还 是⾮常简单的，成熟的技术⼈员上⼿也就⼀两天。完全可以⽤它去代替 jQuery ，并不需要你去引⼊其他复杂特性功能。</li><li>场景⼆：我们的项⽬⽤了 VUE ，使⽤的效果也挺好。现在我们想逐渐实现代码组件化，实现代码的复⽤，或者是基于组件原型的跨项⽬的代码复⽤，那么可以引⼊ Vue 的 components 组件特性就可以了。</li><li>场景三：当项⽬规模逐渐变⼤了，我们可能会逐渐⽤到前端路由、状态集中管理、并最终实现⼀个⾼度⼯程化的前端项⽬，这些功能特性可以逐步引⼊。</li></ol><p>所以 Vue 的适⽤⾯很⼴，你可以⽤它代替⽼项⽬中的 jQuery ，也可以在新项⽬启动初期，有限地使⽤ Vue 的功能特性，从⽽降低上⼿的成本。</p><h2 id="⼆、快速起步"><a href="#⼆、快速起步" class="headerlink" title="⼆、快速起步"></a>⼆、快速起步</h2><h3 id="1-安装-Vue"><a href="#1-安装-Vue" class="headerlink" title="1. 安装 Vue"></a>1. 安装 Vue</h3><ul><li>⽅式⼀：直接通过 CDN 引⼊</li></ul><p>开发环境引⼊，最好有明确的版本号：</p><p>Vue2</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Vue3</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue@next"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⽣产环境引⼊，最好有明确的版本号，和开发时候使⽤的⼀致</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⽣产环境和开发环境引⼊的 Vue ⽂件，最主要的区别在于：⽣产环境的 js ⽂件是在开发环境 js ⽂件 的基础上进⾏了代码压缩、去掉空格、变量名简化等操作。从⽽减少了 js ⽂件的体积，有利于提⾼⽹络传输速度。</p><ul><li>⽅式⼆：下载到本地⽬录，然后使⽤</li><li>⽅式三：NPM 安装</li></ul><p>后⾯章节我们结合 webpack 和 VueCLI 管理前端项⽬，我们会使⽤这种⽅式，这⾥暂时不做介绍。</p><h3 id="2-实现第⼀个-Vue-程序"><a href="#2-实现第⼀个-Vue-程序" class="headerlink" title="2. 实现第⼀个 Vue 程序"></a>2. 实现第⼀个 Vue 程序</h3><h4 id="1）Vue2-的写法"><a href="#1）Vue2-的写法" class="headerlink" title="1）Vue2 的写法"></a>1）Vue2 的写法</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue2快速起步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// 初始化⼀个Vue实例</span>      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 声明⻚⾯渲染的Vue实例的元素</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment">// 定义数据</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"hello Vue2"</span><span class="token punctuation">,</span>          <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>el:<ul><li>类型：string | HTMLElement</li><li>作⽤：决定之后 Vue 实例会挂载渲染到哪⼀个 DOM 节点</li></ul></li><li>data:<ul><li>类型：Object | Function （在组件当中 data 必须是⼀个函数）</li><li>作⽤：Vue 实例对应的数据对象，即 MVVM 中的 Model</li></ul></li></ul><p>运⾏效果：</p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/lToJ44.png" style="zoom:50%;" /><p>可以在控制台改变 message 的值</p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/4NI7J1.png" style="zoom:50%;" /><h4 id="2）Vue3-的写法"><a href="#2）Vue3-的写法" class="headerlink" title="2）Vue3 的写法"></a>2）Vue3 的写法</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue3快速起步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"hello Vue3"</span><span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>createApp 表示创建⼀个 Vue 应⽤，存储到 app 变量中</li><li>传⼊的参数表示，这个应⽤最外层的组件，应该如何展示</li><li>mvvm 设计模式</li></ol><p>​ a. m-&gt;model 数据 data()</p><p>​ b. v-&gt;view 视图 template</p><p>​ c. vm-&gt;viewModel 视图数据连接层 ( Vue 组件实现)</p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/LSxQeT.png" style="zoom:50%;" /><p>Vue3 可以如下⽅式，在控制台改变 Vue 组件中 data 的数值</p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/qI8J8y.png" style="zoom:50%;" /><h3 id="3-强调"><a href="#3-强调" class="headerlink" title="3. 强调"></a>3. 强调</h3><ul><li>Vue 实现了数据绑定与响应式编程，在 Vue 编程中⾮常重要的的⼀个思想就是，通过操作数据来改变⻚⾯的显示内容、显示效果等，数据的变化影响⻚⾯展现；同时⻚⾯的输⼊值改变数 据模型，⽽不是去操作 DOM 节点元素，理解了这句话 Vue 学起来就简单了。</li></ul><p><strong>说明：后续案例编写，均基于 Vue3 语法</strong></p><h2 id="三、理解-MVVM-模型"><a href="#三、理解-MVVM-模型" class="headerlink" title="三、理解 MVVM 模型"></a>三、理解 MVVM 模型</h2><h3 id="1-MVVM-模型"><a href="#1-MVVM-模型" class="headerlink" title="1. MVVM 模型"></a>1. MVVM 模型</h3><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ZyLDRR.png" style="zoom:50%;" /><p>之前，在前端响应式框架 Vue 简介中我们曾简单介绍过 MVVM 模型。</p><ul><li>MVVM：⻚⾯输⼊改变数据，数据改变影响⻚⾯数据展示与渲染<ul><li>M（model）：普通的 javascript 数据对象</li><li>V（view）：前端展示⻚⾯或前端组件</li><li>VM（ViewModel）：⽤于双向绑定数据与⻚⾯，对于我们来说，就是 Vue 的实例</li></ul></li></ul><p>具体到编码层⾯，<strong>注意我们提到的 MVVM 都是前端的概念</strong>，体现如下：</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/9Uhk0b.png" style="zoom:50%;" /><ul><li>ViewModel（ Vue 的实例）作为 MVVM 模型的核⼼，负责监听 DOM 的变化去修改 Model（data）数据；负责将数据绑定到⻚⾯上进⾏数据展示及⻚⾯渲染；是 View 与 Model 沟通的桥梁。</li><li>ViewModel 帮我们实现了双向数据绑定的底层⽀撑，是 Vue 帮我们实现的。</li><li>ViewModel 是对视图及模型的抽象，即可以操作视图，也可以操作数据模型，并实现⼆者的⾃动响应。</li></ul><h3 id="2-MVVM-模型与直接操作-DOM-的区别"><a href="#2-MVVM-模型与直接操作-DOM-的区别" class="headerlink" title="2. MVVM 模型与直接操作 DOM 的区别"></a>2. MVVM 模型与直接操作 DOM 的区别</h3><p>我们来使⽤ JS 操作 DOM 的⽅式完成上⾯的代码完成的⼯作。</p><p>⾸先，我们需要先选取需要进⾏操作的 DOM 节点，为此我们需要为 h2 标签加上⼀个 id ，然后通过 ajax 向服务器发送请求，接收服务端的数据，通过 DOM 节点，操作节点的数据和显示样式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"h2id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向服务器发送ajax请求获取数据，如 '你好，Vue3';</span>dom<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"你好，Vue3"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然⽽ MVVM 编程模型<strong>不需要关⼼ DOM 的结构</strong>，同样的操作只需要下⾯这⼀⾏代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">"你好，Vue3"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>MVVM 模型不关⼼ DOM 的结构，不需要寻找 DOM 节点</li><li>MVVM 模型通过修改模型数据改变视图显示，不使⽤ DOM 的 innerText、innerHtml 等</li><li>MVVM 模型要求我们在前端考虑数据模型，这样有更利于前后端解耦，实现前后端分离应⽤的开发。（也就是说，开发阶段可以先在前端模型⾥⾯写假数据，前后端并⾏开发）</li></ul><h3 id="3-MVVM-和-MVC-模式区别与联系"><a href="#3-MVVM-和-MVC-模式区别与联系" class="headerlink" title="3. MVVM 和 MVC 模式区别与联系"></a>3. MVVM 和 MVC 模式区别与联系</h3><ul><li>MVVM 是 MVC 模式的⼀个演变，是 John Gossman 在《Model/View/ViewModel pattern for building WPF apps》中提出的。</li><li>在实际的开发应⽤中，MVC 是后端开发⼴泛应⽤的模式，⽽ MVVM 模式是前端⼴泛应⽤的模式，从使⽤的⻆度⼆者并⽆交集。<strong>建议：不要将⼆者强⾏关联⽐较，学 MVC 的时候学 MVC（后端），学 MVVM 的时候就学 MVVM（前端），这样就⾜够了。</strong></li><li>MVC 的 Model 指的是服务端的 Model ，⽽ MVVM 的 Model 指的是 javascript 端的 Model 。这个变化⾮常有意义，真正的实现了前后端的分离。前端开发可以先在 model ⾥⾯写假数据，然后再与后端进⾏数据接⼝对接。</li><li>⼆者的核⼼思想都是将视图（View）与模型（Model）解耦，即视图与数据的解耦。</li></ul><p>随着后续通过实际的应⽤的开发，相信⼤家会对 MVVM 模式有更加深⼊的理解。</p><h2 id="四、实现字符串反转和内容隐藏功能"><a href="#四、实现字符串反转和内容隐藏功能" class="headerlink" title="四、实现字符串反转和内容隐藏功能"></a>四、实现字符串反转和内容隐藏功能</h2><h3 id="1-字符串翻转"><a href="#1-字符串翻转" class="headerlink" title="1. 字符串翻转"></a>1. 字符串翻转</h3><p>代码示例</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue3实现字符串的反转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 打散成数组、逆转数组、拼接成字符串</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;div>            &lt;p>&#123;&#123;content&#125;&#125;&lt;/p>            &lt;button v-on:click="handleBtnClick">反转&lt;/button>          &lt;/div>          </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><ol><li>v-on 绑定事件，v-on:click 绑定点击事件</li><li>click =…… 执⾏⼀个什么样的函数</li><li>函数定义在哪⾥？定义在 methods()⾥⾯</li><li>split(‘’).reverse(‘’).join(‘’) ：字符串打散成数组——反转——再连接为字符串</li></ol><p>运⾏可以实现字符串的反转</p><h3 id="2-内容隐藏"><a href="#2-内容隐藏" class="headerlink" title="2. 内容隐藏"></a>2. 内容隐藏</h3><p>代码示例</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue3实现内容隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div>          &lt;p v-if="show">hello world&lt;/p>          &lt;button v-on:click="handleBtnClick">显示/隐藏&lt;/button>        &lt;/div>      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><ol><li>v-if 显示/隐藏，v-if=”show” <code>&lt;p&gt;</code>标签的存在与否取决于 show 这个变量的值</li><li>methods 中对 data 中的数据进⾏读取，必须使⽤ this，⽐如 this.show = !this.show ;否则就⽆法读 取，当然也可以写全，⽐如 this.$data.show = ……</li><li>隐藏展示，可以做代码优化<ul><li>v-if : 条件渲染</li><li>v-show :已经渲染</li></ul></li></ol><p><strong>运⾏可以实现内容的显示和隐藏</strong></p><h2 id="五、编写⼀个简单的-TodoList，了解循环和双向绑定"><a href="#五、编写⼀个简单的-TodoList，了解循环和双向绑定" class="headerlink" title="五、编写⼀个简单的 TodoList，了解循环和双向绑定"></a>五、编写⼀个简单的 TodoList，了解循环和双向绑定</h2><p><strong>代码示例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue3实现todolist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">inputValue</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token function">handleAddItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div>          &lt;input v-model="inputValue" />          &lt;button v-on:click="handleAddItem">增加&lt;/button>          &lt;ul>            &lt;li v-for="(item, index) of list">&#123;&#123;item&#125;&#125;&lt;/li>          &lt;/ul>        &lt;/div>      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><p>1、v-for 指令：对数组内容进⾏循环</p><ul><li>v-for=’item of list’ 通过 v-for 这个指令循环 list ⾥⾯的数据，把每⼀个数据放到 item ⾥⾯去</li><li>v-for=’(item,index) of list’ 循环 list ⾥⾯的数据，把 list ⾥⾯的内容放到 item ⾥⾯，把循环到第⼏项的下标放到 index ⾥⾯</li></ul><p>2、v-model 指令：可以让数据和 input 输⼊框双向绑定</p><p>input ⾥⾯输⼊和内容和 data 中的 inputValue 变量这样绑定，它们两个是双向绑定的关系，⼀个发⽣变化另⼀个就会发⽣变化。</p><p><strong>运⾏效果：</strong></p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/zap7MR.png" style="zoom:50%;" /><h2 id="六、组件初探：对-TodoList-进⾏组件代码拆分"><a href="#六、组件初探：对-TodoList-进⾏组件代码拆分" class="headerlink" title="六、组件初探：对 TodoList 进⾏组件代码拆分"></a>六、组件初探：对 TodoList 进⾏组件代码拆分</h2><p><strong>代码示例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>vue3-todolist组件化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// mvvm、vue实例，vue组件</span>      <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">inputValue</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token function">handleAddItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;div>            &lt;input v-model="inputValue">            &lt;button v-on:click="handleAddItem" v-bind:title="inputValue">              增加            &lt;/button>            &lt;ul>              &lt;todo-item v-for="(item,index) of list"              v-bind:content="item"              v-bind:index="index"              />                    &lt;/ul>            &lt;/div>         </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-item"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token string">"index"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"&lt;li>&#123;&#123;index&#125;&#125;——&#123;&#123;content&#125;&#125;&lt;/li>"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><ul><li>插值表达式<code>&#123;&#123;&#125;&#125;</code></li><li>注册组件 component</li><li>v-bind 和 props ⼀起使⽤，实现组件传参</li><li>v-bind 把数据与标签的属性绑定</li></ul><p>v-bind:title, ⽤ v-bind 绑定某个标签属性</p><p>对于较⼤的项⽬，可以将某些较⼩的粒度拆分后形成组件，并进⾏注册。</p><p><code>app.component( &lt;componentName&gt;, &#123;&lt;content&gt;&#125;;</code></p><p>要注意注册组件的先后顺序。</p><p>可以先创建⼀个 app，注册完所有组件后，再将 app 挂载到某个节点下。</p><p>如果对某个标签⽤ v-bind 进⾏了属性的绑定，可以在组件中采⽤ props 来获取这些属性的值，可以⽤ 多个 v-bind 绑定多个属性。</p><p>如果组件名为 “todo-list” ，标签中可以直接写<code>&lt;todo-list/&gt;</code>，Vue 能够识别</p><p><strong>运⾏效果</strong></p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/LGN6JN.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础及概念入门</title>
      <link href="/2022/07/03/springboot-ji-chu-ji-gai-nian-ru-men/"/>
      <url>/2022/07/03/springboot-ji-chu-ji-gai-nian-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot基础及概念入门"><a href="#SpringBoot基础及概念入门" class="headerlink" title="SpringBoot基础及概念入门"></a>SpringBoot基础及概念入门</h1><h2 id="1-SpringBoot-产⽣的背景及其优势"><a href="#1-SpringBoot-产⽣的背景及其优势" class="headerlink" title="1. SpringBoot 产⽣的背景及其优势"></a>1. SpringBoot 产⽣的背景及其优势</h2><h3 id="⼀、内容⼤纲"><a href="#⼀、内容⼤纲" class="headerlink" title="⼀、内容⼤纲"></a>⼀、内容⼤纲</h3><ul><li>SpringBoot 诞⽣的背景</li><li>SpringBoot 改变了什么</li><li>SpringBoot 主要特性</li><li>SpringBoot 集成第三⽅开源组件的步骤</li></ul><h3 id="⼆、SpringBoot诞⽣的背景"><a href="#⼆、SpringBoot诞⽣的背景" class="headerlink" title="⼆、SpringBoot诞⽣的背景"></a>⼆、SpringBoot诞⽣的背景</h3><p>在 SpringBoot 出现以前，使⽤ Spring 框架的程序员是这样配置 Web 应⽤环境的，需要⼤量的 xml 配置。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/rR7oaL.png"></p><p>随着 Web 项⽬集成软件的不断增多，xml 配置也不断增多，xml配置⽂件也在不断地增多，项⽬的依赖管理也越发的复杂。Spring 框架也因此饱受争议，配置⽂件难以理解且容易出错。<strong>——配置地狱</strong></p><p>xml 配置⽂件不但复杂，⽽且绝⼤部分属于模板配置，也就是说有80%以上的配置是不断重复的。</p><p>因此，像 JFinal 这种轻量级的 web 开发框架，因为其简单易⽤的特性，逐渐有了很⼤发展的空间。 Spring 社区也逐渐意识到了这个问题，在 2013 年的 SpringOne 2GX 会议上，Pivotal 的 CTO Adrian Colyer 回应了关于 Spring 框架使⽤复杂度的问题，并且特别提到该平台将来的⽬标之⼀就是实现免 XML 配置和提供更佳的开发体验，也就是我们今天使⽤的 SpringBoot 诞⽣的主要原因。</p><blockquote><p>Spring 开源社区背后有强⼤的商业公司⽀持，⽀持⼒度⽐较⼤的公司如 Pivotal 、Netflix 以及中国的阿⾥巴巴。</p></blockquote><h3 id="三、SpringBoot-改变了什么"><a href="#三、SpringBoot-改变了什么" class="headerlink" title="三、SpringBoot 改变了什么"></a>三、SpringBoot 改变了什么</h3><p>举⼀个例⼦:⾃⼰接电线与标准化插座 </p><p>SpringBoot 的配置⽅式，就像是插头插座的国家标准，第三⽅开源类库要想接⼊进来，就要按照这个标准做⼀个 starter 的适配。</p><p>SpringBoot 虽然灵活性不如 Spring MVC 的⽅式，并且你也不太清楚插座⾥⾯的线路是什么样，但就是⽅便易⽤。话说回来，当你习惯使⽤了买现成的插头插座，你还会希望⾃⼰动⼿当电⼯么？</p><p><a href="https://index.baidu.com/v2/main/index.html#/trend/springmvc?words=springmvc,springboot">百度指数对比</a></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/jPQC5C.png"></p><p>SpringBoot 的⽬标不在于为已解决的问题领域提供新的解决⽅案，⽽是为平台带来另⼀种新的开发体验，从⽽简化对这些已有技术的使⽤。</p><ul><li>使配置变简单</li><li>使开发变简单</li><li>使监控变简单</li><li>使部署变简单</li></ul><h3 id="四、SpringBoot主要特性"><a href="#四、SpringBoot主要特性" class="headerlink" title="四、SpringBoot主要特性"></a>四、SpringBoot主要特性</h3><ul><li>遵循“约定优于配置”的原则，简化配置</li><li>可以完全脱离 XML 配置⽂件,采⽤注解配置和 Java Config</li><li>内嵌 Servlet 容器，应⽤可⽤ jar 包执⾏：<code>java -jar ****.jar</code> 即可启动应⽤</li><li>快速完成项⽬搭建、整合第三⽅类库，⽅便易⽤</li><li>提供了starter POM, 能够⾮常⽅便地进⾏包管理, 简化包管理配置</li><li>与 Spring Cloud 天然集成，Spring Boot 是⽬前 Java 体系内微服务的最佳实现⽅案</li></ul><h3 id="五、关于spring-boot-starter"><a href="#五、关于spring-boot-starter" class="headerlink" title="五、关于spring-boot-starter"></a>五、关于spring-boot-starter</h3><p>官⽹描述</p><blockquote><p>All official starters follow a similar naming pattern; spring-boot-starter-* , where * is a particular type of application. This naming structure is intended to help when you need to find a starter. The Maven integration in many IDEs lets you search dependencies by name. For example, with the appropriate Eclipse or Spring Tools plugin installed, you can press ctrl-space in the POM editor and type “ spring-boot-starter ” for a complete list. As explained in the “<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.developing-auto-configuration.custom-starter">Creating Your Own Starter</a> ” section, third party starters should not start with spring-boot, as it is reserved for official Spring Boot artifacts. Rather, a thirdparty starter typically starts with the name of the project. For example, a third-party starter project called thirdpartyproject would typically be named <strong>thirdpartyproject-spring-boot-starter</strong>.</p></blockquote><ol><li>了解 SpringBoot 官⽅已经⽀持的 starter（引⼊依赖、开箱即⽤）</li><li>了解集成第三⽅ starter 的步骤（引⼊依赖、编写配置、开始使⽤）</li><li>开发⼀个⾃⼰的 starter（编写源码构建打包上传私服。。。、使⽤⽅式同2）</li></ol><p><strong>有哪些官⽅已经默认集成的类库？</strong></p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter">Spring Boot Reference Documentation</a></p><h2 id="2-HelloWorld及项⽬结构介绍"><a href="#2-HelloWorld及项⽬结构介绍" class="headerlink" title="2. HelloWorld及项⽬结构介绍"></a>2. HelloWorld及项⽬结构介绍</h2><blockquote><p>为了便于管理，我们统⼀⽤聚合⼯程来管理 SpringBoot 的学习内容</p></blockquote><h3 id="⼀、使⽤-IntellijIDEA建⽴第⼀个SpringBoot项⽬"><a href="#⼀、使⽤-IntellijIDEA建⽴第⼀个SpringBoot项⽬" class="headerlink" title="⼀、使⽤ IntellijIDEA建⽴第⼀个SpringBoot项⽬"></a>⼀、使⽤ IntellijIDEA建⽴第⼀个SpringBoot项⽬</h3><h4 id="1-新建⽗⼯程（保证联⽹）"><a href="#1-新建⽗⼯程（保证联⽹）" class="headerlink" title="1. 新建⽗⼯程（保证联⽹）"></a>1. 新建⽗⼯程（保证联⽹）</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/qmN9KK.png"></p><h4 id="2-勾选Web依赖"><a href="#2-勾选Web依赖" class="headerlink" title="2. 勾选Web依赖"></a>2. 勾选Web依赖</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/tEiJhM.png"></p><p>项⽬⾸次创建过程请耐⼼等待。 </p><p>项⽬构建完成之后删掉下⾯的这⼏个⽂件，这⼏个⽂件是 maven 版本控制相关的⽂件。我们结合 IDEA 管理 maven，⼀般来说这⼏个⽂件⽤不到。</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/MyXYMl.png"></p><p><font color=red>删掉⽗⼯程src⽬录，不需要源码</font></p><h4 id="3-修改⽗⼯程的packaging类型为pom"><a href="#3-修改⽗⼯程的packaging类型为pom" class="headerlink" title="3. 修改⽗⼯程的packaging类型为pom"></a>3. 修改⽗⼯程的packaging类型为pom</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/iGXMYu.png"></p><h4 id="4-创建第⼀个module：boot-quickstart"><a href="#4-创建第⼀个module：boot-quickstart" class="headerlink" title="4. 创建第⼀个module：boot-quickstart"></a>4. 创建第⼀个module：boot-quickstart</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/rgxyqK.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/1XhwBk.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/JFTlwV.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/dGeWH1.png"></p><h4 id="5-⼿动创建包、编写启动类、编写Controller"><a href="#5-⼿动创建包、编写启动类、编写Controller" class="headerlink" title="5. ⼿动创建包、编写启动类、编写Controller"></a>5. ⼿动创建包、编写启动类、编写Controller</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/8hmtZs.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/tgAgLI.png"></p><h4 id="6-运-⾏"><a href="#6-运-⾏" class="headerlink" title="6. 运 ⾏"></a>6. 运 ⾏</h4><p>观察启动⽇志</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/4vaHbQ.png"></p><p>可以安装这个插件，简单的接⼝可以直接在IDEA⾥可视化测试</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/PFskgo.png"></p><p>测试结果</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/vNiZPP.png"></p><h3 id="⼆、HelloWorld示例程序"><a href="#⼆、HelloWorld示例程序" class="headerlink" title="⼆、HelloWorld示例程序"></a>⼆、HelloWorld示例程序</h3><blockquote><p>resources ⽬录，新建 application.yml </p><p>yml ⽂件和 SpringBoot 默认的配置⽂件 properties 具有同样的功能</p></blockquote><p><strong>⼆者的区别在于：</strong></p><p>yml ⽂件的层级更加清晰直观，但是书写时需要注意格式缩进对⻬。 </p><p>yml 格式配置⽂件更有利于表达复杂数据结构的配置。⽐如：列表，对象等。 </p><p>properties 阅读上不如 yml 直观，好处在于书写时不⽤特别注意格式缩进对⻬。</p><p>配置服务器端⼝，如果不配置默认为8080</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/DJ3EOR.png"></p><p>重启服务，观察结果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/kQyRWU.png"></p><p>修改端⼝等信息后，插件还保留原端⼝，如果要插件也同步，可如图操作：</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mhkifG.png"></p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ifiF0P.png"></p><blockquote><p>讨论，还有哪些⽅式可以来测试这个接⼝ </p><p>postman、IDEA⾃带的HTTP Client、或者第三⽅Apifox等都可以</p></blockquote><h3 id="三、项⽬结构⽬录结构简介"><a href="#三、项⽬结构⽬录结构简介" class="headerlink" title="三、项⽬结构⽬录结构简介"></a>三、项⽬结构⽬录结构简介</h3><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/WISI1g.png"></p><p>项⽬结构⽬录符合maven规范要求：</p><table><thead><tr><th>目录位置</th><th>功能</th></tr></thead><tbody><tr><td>src/main/java</td><td>项⽬ java ⽂件存放位置，初始化包含主程序⼊⼝ XxxApplication，可以通过直接运⾏该类来启动 Spring Boot 应⽤</td></tr><tr><td>src/main/resources</td><td>存放静态资源，图⽚、CSS、JavaScript、web⻚⾯模板⽂件等</td></tr><tr><td>src/test</td><td>单元测试代码⽬录</td></tr><tr><td>.gitignore</td><td>git 版本管理排除⽂件</td></tr><tr><td>target⽂件夹</td><td>项⽬代码构建打包结果⽂件存放位置，不需要⼈为维护</td></tr><tr><td>pom.xml</td><td>maven 项⽬配置⽂件</td></tr><tr><td>application.properties （application.yml）</td><td>⽤于存放程序的各种依赖模块的配置信息，⽐如服务端⼝，数据库连接配置等</td></tr></tbody></table><ul><li>src/main/resources/static 主要⽤来存放 css、图⽚、JS 等开发⽤静态⽂件</li><li>src/main/resources/public ⽤来存放可以直接⽤于访问的 html ⽂件</li><li>src/main/resources/templates ⽤来存放 web 开发模板⽂件</li></ul><h2 id="3-需要先了解的核⼼概念"><a href="#3-需要先了解的核⼼概念" class="headerlink" title="3. 需要先了解的核⼼概念"></a>3. 需要先了解的核⼼概念</h2><h3 id="⼀、Spring-Boot-、-Spring-MVC-、Spring对⽐"><a href="#⼀、Spring-Boot-、-Spring-MVC-、Spring对⽐" class="headerlink" title="⼀、Spring Boot 、 Spring MVC 、Spring对⽐"></a>⼀、Spring Boot 、 Spring MVC 、Spring对⽐</h3><blockquote><p>⾸先需要明⽩⼀件事情：SpringBoot ⽬的并不是替换 Spring、SpringMVC ，⽽是使它们⽤起来更加简单。</p></blockquote><h4 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h4><p>Spring 框架最核⼼的特性就是</p><ul><li>依赖注⼊ DI（Dependency Injection）</li><li>控制反转 IoC（Inversion Of Control）</li></ul><p>如果能够合理的使⽤ DI 和 IoC，就可以开发出松耦合、扩展性好的的应⽤程序。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/DJdehY.png"></p><h4 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h4><p>Spring MVC 提供了⼀种友好的⽅式来开发 Web 应⽤程序。 通过使⽤诸如 Dispatcher Servlet， ModelAndView 和 View Resolver，可以轻松开发 Web 应⽤程序。</p><h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><p>Spring 和 Spring MVC 最⼤的弊病在于存在⼤量的配置，并且这些配置在不同的项⽬中具有很⾼的相似性。从⽽导致重复配置，繁琐⽽且杂乱！</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/4GAJmK.png"></p><p>Spring Boot 期望通过结合⾃动配置和 starters 来解决了这个问题。 另外，Spring Boot 还提供了⼀ 些功能，可以更快地构建可⽤于⽣产环境的应⽤程序。</p><h3 id="⼆、Spring-Boot-⾃动配置"><a href="#⼆、Spring-Boot-⾃动配置" class="headerlink" title="⼆、Spring Boot ⾃动配置"></a>⼆、Spring Boot ⾃动配置</h3><p>Spring 和Spring MVC 应⽤程序⾥⾯有⼤量的 XML 或 Java Bean 配置。 </p><p>Spring Boot 为解决这个问题，提供了⼀种新的解决⽅案，新的思维⽅式。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/wPR5oh.png"></p><p>SpringBoot 思考的⽅式：是不是可以更加智能⼀点，当 Spring 中加⼊⼀些新的 jar 包，加⼊⼀些配置，可以⾃动影响应⽤内 bean 的加载。</p><p>⽐如：Spring MVC JAR 位于类路径中时，⾃动配置 Dispatcher Servlet。当然，这些⾃动的默认配置不符合我们的要求的时候，我们可以修改。</p><h3 id="三、什么是Spring-Boot-Starter？"><a href="#三、什么是Spring-Boot-Starter？" class="headerlink" title="三、什么是Spring Boot Starter？"></a>三、什么是Spring Boot Starter？</h3><blockquote><p>Spring Boot Starter是⼀组被依赖第三⽅类库的集合</p></blockquote><p>如果你要开发⼀个 web 应⽤程序，通过包管理⼯具(如 maven )引⼊spring-boot-starter-web 就可以了，⽽不⽤分别引⼊下⾯这么多依赖类库，spring-boot-starter-web ⼀次性帮你引⼊下⾯的这些常⽤类库。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/yaXQkU.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/tZLnBq.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/twK4gQ.png"></p><ul><li>Spring — spring 核⼼, beans, context 上下⽂, AOP ⾯向切⾯</li><li>Web MVC — Spring MVC</li><li>Jackson — JSON 数据的序列化与反序列化</li><li>Validation — Hibernate 参数校验及校验API</li><li>嵌⼊式 Servlet Container — Tomcat</li><li>⽇志框架 Logging — logback, slf4j</li></ul><h3 id="四、什么是Spring-Boot-Starter-Parent"><a href="#四、什么是Spring-Boot-Starter-Parent" class="headerlink" title="四、什么是Spring Boot Starter Parent"></a>四、什么是Spring Boot Starter Parent</h3><blockquote><p>所有的 Spring Boot 项⽬默认使⽤ spring-boot-starter-parent 作为应⽤程序的⽗项⽬。</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承⽗项⽬的好处在于：</p><ul><li>统⼀ Java 版本配置和其他的⼀些依赖类库的版本。</li><li>引⼊第三⽅类库不要加版本号，⽗项⽬帮你统⼀管理版本，⽽且是经过兼容性测试的。&gt;</li></ul><blockquote><p>当然⽗项⽬只能帮你管理⼀些常⽤类库的版本。 </p><p>如果要引⼊⼀些不常⽤的 jar，可以⾃⼰管理版本号及兼容性。</p></blockquote><h3 id="五、嵌⼊式Web容器"><a href="#五、嵌⼊式Web容器" class="headerlink" title="五、嵌⼊式Web容器"></a>五、嵌⼊式Web容器</h3><blockquote><p>Spring boot 打成 jar 包，默认包含嵌⼊式的 Web 容器 Tomcat。</p></blockquote><p>使⽤ maven 打包，在⽗项⽬执⾏ clean-&gt;package </p><p>在⽣成的应⽤ jar 包⽬录，启动命令⾏，使⽤如下命令启动：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar boot-quickstart.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这更有利于微服务的部署及微服务的构建、启动、扩容。 </p><p>Spring Boot 还⽀持 Jetty 和 Undertow 作为 web 容器。 </p><p><strong>使⽤ maven 将 quickstart 项⽬打包，运⾏</strong></p><h3 id="六、Spring-Data"><a href="#六、Spring-Data" class="headerlink" title="六、Spring Data"></a>六、Spring Data</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/5KItBu.png"></p><p>Spring Data 的⽬标是提供⼀种更友好的⽅式或者是 API 来存取数据。 </p><p>包括对于关系型数据库和 NOSQL 数据的⽀持，⽐如：</p><ul><li>Spring Data JPA — 关系型数据库操作的 API，友好且易于使⽤。</li><li>Spring Data MongoDB -MongoDB的操作API。</li><li>Spring Data REST — 从持久层 Repositories ⾃动⽣成服务层 API，暴露 REST APIs 接⼝，超级好⽤。</li></ul><p>当然，Spring Data 还有更多好⽤的特性和⽀持等待我们去探索。</p><h3 id="七、SpringBoot-新版本特性"><a href="#七、SpringBoot-新版本特性" class="headerlink" title="七、SpringBoot 新版本特性"></a>七、SpringBoot 新版本特性</h3><blockquote><p>要关注官⽹关于新版本的基础环境要求、依赖组件升级、默认软件替换、新技术引⼊等说明。</p></blockquote><h4 id="7-1-基础环境升级"><a href="#7-1-基础环境升级" class="headerlink" title="7.1 基础环境升级"></a>7.1 基础环境升级</h4><ul><li>JDK版本最低要求</li></ul><h4 id="7-2-依赖组件升级"><a href="#7-2-依赖组件升级" class="headerlink" title="7.2 依赖组件升级"></a>7.2 依赖组件升级</h4><ul><li>Jetty</li><li>Tomcat</li><li>Flyway</li><li>Hibernate</li><li>Gradle</li><li>Thymeleaf</li></ul><h4 id="7-3-默认软件替换"><a href="#7-3-默认软件替换" class="headerlink" title="7.3 默认软件替换"></a>7.3 默认软件替换</h4><ul><li>如默认数据库连接池从 Tomcat 切换到 HikariCP，HikariCP 是⼀个⾼性能的 JDBC 连接池， Hikari 是⽇语“光”的意思。</li><li>如 redis 客户端默认使⽤ Lettuce 替换掉了 Jedis。Lettuce 是⼀个可伸缩的线程安全的 redis 客 户端，⽤于同步、异步和反应使⽤。</li></ul><h4 id="7-4-新技术的引⼊"><a href="#7-4-新技术的引⼊" class="headerlink" title="7.4 新技术的引⼊"></a>7.4 新技术的引⼊</h4><ul><li>如响应式编程 WebFlux 的引⼊，重要的变⾰。</li><li>如 SpringBoot2.x 开始默认⽀持 Quartz。</li><li>如对 Kotlin 的⽀持。</li></ul><h4 id="7-5-彩蛋"><a href="#7-5-彩蛋" class="headerlink" title="7.5 彩蛋"></a>7.5 彩蛋</h4><blockquote><p>SpringBoot ⾃定义启动 Banner</p></blockquote><ul><li><p>org.springframework.boot.ResourceBanner⽂本格式，SpringBoot 会读取配置项 <code>banner.txt</code> 和 <code>banner.location</code> ，从配置项中获取真实的⽂件地址；如果配置中没有配置，会把 配置项作为⽂件去加载；</p></li><li><p>org.springframework.boot.ImageBanner 图⽚格式，SpringBoot 加载配置项 <code>banner.image.location</code>，从配置项中获取真实的路径，SpringBoot 会根据配置项的路径加载⽂件。 </p><p>如果没有配置 banner.image.location，转⽽依次加载 banner.gif、banner.jpg、 banner.png 这三个中存在的⽂件；</p></li></ul><p>如果上⾯两种都没有配置，SpringBoot 就会加载默认的 Banner。 </p><p>具体做法就是在 resource下配置 banner.txt，另外对于图⽚⽣成可以去⼯具中⽣成。</p><p>以下⽹站可以⽣成⾃定义的banner</p><p><a href="http://www.degraeve.com/img2txt.php">http://www.degraeve.com/img2txt.php</a> </p><p><a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a></p><p>下载banner.txt，放⼊resources根⽬录，重启服务器，效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/SB7gPE.png"></p><h2 id="4-提⾼开发效率必备⼯具lombok"><a href="#4-提⾼开发效率必备⼯具lombok" class="headerlink" title="4. 提⾼开发效率必备⼯具lombok"></a>4. 提⾼开发效率必备⼯具lombok</h2><h3 id="⼀、前置说明"><a href="#⼀、前置说明" class="headerlink" title="⼀、前置说明"></a>⼀、前置说明</h3><ul><li>使⽤ lombok 插件的好处</li><li>如何安装 lombok 插件</li><li>使⽤ lombok 提⾼开发效率</li></ul><h3 id="⼆、使⽤lombok插件的好处"><a href="#⼆、使⽤lombok插件的好处" class="headerlink" title="⼆、使⽤lombok插件的好处"></a>⼆、使⽤lombok插件的好处</h3><p>我们在Java开发过程中，经常会有⼀些常规性的，重复性的⼯作。⽐如：</p><ul><li>根据成员变量⽣成 get 和 set ⽅法</li><li>根据成员变量⽣成类的构造函数</li><li>重写 toString() 和 hashCode ⽅法</li><li>引⼊⽇志框架 logFactory ，⽤来打印⽇志</li></ul><p>以上都是⼀些重复动作，模板代码。每次都⼿动⽣成既浪费时间，⼜增加了⼤量的冗余代码。 我们可以使⽤ lombok 插件来解决这个问题。使我们的编码效率得到⼤幅度的提⾼。</p><h3 id="三、如何安装lombok插件"><a href="#三、如何安装lombok插件" class="headerlink" title="三、如何安装lombok插件"></a>三、如何安装lombok插件</h3><p>打开 IDEA 的 Plugins 选项，搜索 “ lombok ”，点击 install，然后重启 IDEA。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/w8hkMo.png"></p><p>新版 IDEA 已经内置了 lombok 插件</p><p>在 pom.xml ⾥⾯加 lombok 依赖。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 Spring Boot 项⽬⾥⾯不需要加⼊版本号，SpringBoot ⽗项⽬会代为管理。 </p><p>如果是其他项⽬，需要⾃⾏添加版本号！</p></blockquote><p><strong>务必记得刷新maven才能⽣效。</strong></p><h3 id="四、-使⽤lombok注解简化开发"><a href="#四、-使⽤lombok注解简化开发" class="headerlink" title="四、 使⽤lombok注解简化开发"></a>四、 使⽤lombok注解简化开发</h3><h4 id="4-1-Data注解"><a href="#4-1-Data注解" class="headerlink" title="4.1 Data注解"></a>4.1 Data注解</h4><p>在 Java 类上使⽤ @Data 注解，该注解将为我们在编译期⾃动⽣成</p><ul><li>成员变量的 get 和 set ⽅法</li><li>equals ⽅法</li><li>canEqual ⽅法</li><li>hashCode ⽅法</li><li>toString ⽅法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/rdgN7m.png"></p><p>上图左侧是使⽤ lombok 注解 Data，右侧是编译后的⽂件。</p><h4 id="4-2-Slf4j注解"><a href="#4-2-Slf4j注解" class="headerlink" title="4.2 Slf4j注解"></a>4.2 Slf4j注解</h4><p>该注解将在编译期⾃动帮我们引⼊ Logger ⽇志常量，我们在代码中就直接使⽤ log.info 或 log.debug 打印⽇志即可。下图右侧红⾊代码⽤ Slf4j 注解代替就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/JwCWEq.png"></p><h4 id="4-3-Builder注解"><a href="#4-3-Builder注解" class="headerlink" title="4.3 Builder注解"></a>4.3 Builder注解</h4><p>在 Java 类上使⽤ Builder 注解之后，我们可以使⽤如下代码为对象属性赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/DlkmqU.png"></p><h4 id="4-4-AllArgsConstructor注解"><a href="#4-4-AllArgsConstructor注解" class="headerlink" title="4.4 AllArgsConstructor注解"></a>4.4 AllArgsConstructor注解</h4><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/uLIUiD.png"></p><p>该注解将为我们在编译期⾃动⽣成：全参构造函数。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/RgljUH.png"></p><p>有全参构造函数注解，⾃然就有⽆参构造函数注解：NoArgsConstructor注解。</p><p>lombok有⾮常多好⽤的注解，更多的⽤法参考：<a href="https://github.com/mplushnikov/lombok-intellij-plugin">lombok插件github地址</a></p><h2 id="5-IDEA环境下的热加载与热部署"><a href="#5-IDEA环境下的热加载与热部署" class="headerlink" title="5. IDEA环境下的热加载与热部署"></a>5. IDEA环境下的热加载与热部署</h2><p>在实际的开发过程中，我们经常修改代码之后，需要⼿动重启项⽬，⼿动刷新浏览器查看修改效果。</p><p>那么有没有⼀种⽅式能够快速的、⾃动的帮我们将修改代码⾃动更新，避免⼿动重启，从⽽提⾼开发效率呢？肯定是有的。</p><p>但是对于这个功能很多⼈对功能的叫法有争议，也没有权威的定义，知道的就有：热启动、热加载、热更新、热部署、热切换。这⼏个词从语义上是有区别的，但是叫什么并不重要，实现了最重要，毕竟绝⼤部分程序员为了使⽤这个功能⽅便开发，并不是专业搞学术研究的。</p><h3 id="⼀、使⽤JRebel插件"><a href="#⼀、使⽤JRebel插件" class="headerlink" title="⼀、使⽤JRebel插件"></a>⼀、使⽤JRebel插件</h3><p>这是最简单的⼀种⽅式，但是有⼀定的局限性，JRebel 插件是收费的，需要破解。</p><blockquote><p>JRebel 插件在有些 Spring Boot 版本可能会不够兼容</p></blockquote><p>具体做法前⾯已经普及。</p><h3 id="⼆、-devtools实现热加载"><a href="#⼆、-devtools实现热加载" class="headerlink" title="⼆、 devtools实现热加载"></a>⼆、 devtools实现热加载</h3><p>这是⼀种对于SpringBoot⽽⾔⽐较常⻅的⼀种实现⽅式。</p><h4 id="2-1-引⼊devtools的maven依赖"><a href="#2-1-引⼊devtools的maven依赖" class="headerlink" title="2.1 引⼊devtools的maven依赖"></a>2.1 引⼊devtools的maven依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring-boot-devtools 从名称就可以看出来，是开发者⼯具包，其主要的功能就是实现热加载。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/NiJQv3.png"></p><p>其实现原理就是两个 ClassLoader，⼀个负责加载那些不会经常改变的⽂件，⽐如：第三⽅ jar 包， ⼀旦引⼊项⽬之后这部分代码在调试过程中就处于不变的状态；⼀个负责加载可能经常改变的类， ⽐如我们⾃⼰在项⽬中写的代码，被称为 restart ClassLoader。当有代码发⽣改变的时候，重建⼀个 restart ClassLoader，原有的 restart ClassLoader 被丢掉。由于每次重新加载的内容较少，所 以速度⽐⼿动重启更快⼀些。</p><h4 id="2-2-设置IDEA"><a href="#2-2-设置IDEA" class="headerlink" title="2.2 设置IDEA"></a>2.2 设置IDEA</h4><ul><li>⾸先，运⾏时编译配置：组合键：“Shift+Ctrl+Alt+/” ，选择 “Registry” ，选中打勾“compiler.automake.allow.when.app.running”</li></ul><p>新版 IDEA 在这⾥，⽽且已经默认勾选</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/XgxjBB.png"></p><ul><li>其次，⾃动化编译配置： “File” -&gt; “Settings” -&gt; “Build,Execution,Deplyment” -&gt; “Compiler”，选中打勾 “Build project automatically” 。这是⼀种重新⾃动化的编译整体项⽬ 的⽅法。但是⼀般不这么做，因为 IDEA 的⽂件是⾃动保存的，你想修改⼀个字符串，有可能你 只修改完成第⼀个字符它就重新编译了，重新加载启动。所以，<strong>⼀般代码修改完成之后，可以使⽤ Ctrl + F9 快捷键对修改类重新编译，⽽不是做项⽬的⾃动化编译</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/pTWNy9.png"></p><h4 id="2-3-修改application-properties配置"><a href="#2-3-修改application-properties配置" class="headerlink" title="2.3 修改application.properties配置"></a>2.3 修改application.properties配置</h4><p>在⽐较新的SpringBoot devtools版本中我们已经不需要做如下的配置了，但是如果你以上的步骤都完成了，仍然⽆法实现代码更改之后的热加载，请参考下⾯的⽅法。在有些版本我们需要配置热加载⽣效的开关，使其值等于 true。 </p><p><strong>properties 格式配置</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#热加载⽣效</span><span class="token key attr-name">spring.devtools.restart.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#额外新增的热加载⽬录</span><span class="token key attr-name">spring.devtools.restart.additional-paths</span><span class="token punctuation">=</span> <span class="token value attr-value">src/main/java</span><span class="token comment">#热加载排除⽬录</span><span class="token comment">#spring.devtools.restart.exclude=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>yaml 格式配置</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">devtools</span><span class="token punctuation">:</span>   <span class="token key atrule">restart</span><span class="token punctuation">:</span>     <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token key atrule">additional-paths</span><span class="token punctuation">:</span> src/main/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-LiveReload插件"><a href="#2-4-LiveReload插件" class="headerlink" title="2.4 LiveReload插件"></a>2.4 LiveReload插件</h4><p>最后建议去 chrome 应⽤商店安装⼀个插件 LiveReload</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/DqnWKO.png"></p><p>Spring devtools 默认会启动⼀个 Live Reload Server 实例，监听⽂件的变化。并实时的与浏览器插件通信，更新浏览器展示界⾯。这样，你就不⽤每次更改内容之后都点击浏览器刷新按钮了。</p><h4 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h4><p>通常不⽣效的原因有两种：</p><ul><li>JDK 编译版本和运⾏版本不统⼀，检查⼀下 IDEA 环境下 JDK 配置</li><li>浏览器缓存或者其他的缓存软件导致的问题</li></ul><h2 id="6-开发过程中常⽤IDEA插件"><a href="#6-开发过程中常⽤IDEA插件" class="headerlink" title="6. 开发过程中常⽤IDEA插件"></a>6. 开发过程中常⽤IDEA插件</h2><p>开发过程中，经常可以使⽤⼀些IntelliJ IDEA插件来提⾼⼯作效率</p><h3 id="⼀、Codota"><a href="#⼀、Codota" class="headerlink" title="⼀、Codota"></a>⼀、Codota</h3><ul><li>极其强⼤的代码⾃动补全</li><li>当我们第⼀次使⽤某个类，对该类的某个函数不够熟悉时，可以通过该插件搜索相关⽤法，模仿学习</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/SYMnI4.png"></p><h3 id="⼆、Auto-filling-Java-call-arguments"><a href="#⼆、Auto-filling-Java-call-arguments" class="headerlink" title="⼆、Auto filling Java call arguments"></a>⼆、Auto filling Java call arguments</h3><p>开发中，我们通常会调⽤其他已经编写好的⽅法，调⽤后需要填充参数，但是绝⼤多数情况下，传⼊的变量名称和该函数的参数名⼀致，当参数较多时，⼿动单个填充参数⾮常浪费时间。 </p><p>该插件就可以帮你解决这个问题。 </p><p>安装完该插件以后，调⽤⼀个⽅法，使⽤ Alt+Enter 组合键，调出 “Auto fill call parameters” ⾃动使⽤该函数定义的参数名填充。</p><h3 id="三、GsonFormatPlus"><a href="#三、GsonFormatPlus" class="headerlink" title="三、GsonFormatPlus"></a>三、GsonFormatPlus</h3><p>GsonFormatPlus插件可以快速的将JSON转换为实体类</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"syhan"</span><span class="token punctuation">,</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">,</span>  <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"SpringBoot从⼊⻔到精通"</span><span class="token punctuation">,</span>  <span class="token property">"createTime"</span><span class="token operator">:</span> <span class="token string">"2021-03-02 09:09:09"</span><span class="token punctuation">,</span>  <span class="token property">"reader"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">20</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插件安装好之后，先定义⼀个空的实体类（只有类名和花括号），使⽤快捷键调出代码⽣成。</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/9Td3Cm.png"></p><p>填⼊JSON代码</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/foE3AW.png"></p><p>可以进⾏设置，⾃⾏研究⼀下</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/TcjhjZ.png"></p><p>点击 OK 即可根据 JSON ⽣成对应的 Java 实体类代码。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Yj5KbJ.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/gMteeE.png"></p><h3 id="四、Rainbow-Brackets"><a href="#四、Rainbow-Brackets" class="headerlink" title="四、Rainbow Brackets"></a>四、Rainbow Brackets</h3><p>代码由于括号太多，不确定当前代码⾏是否属于某个代码块，此时这个插件就会帮上⼤忙。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/aR6PW5.png"></p><h3 id="五、-Maven-Helper"><a href="#五、-Maven-Helper" class="headerlink" title="五、 Maven Helper"></a>五、 Maven Helper</h3><p>⽇常开发中，可能经常会遇到 jar 包冲突等问题，就需要通过查看 maven 依赖树来查看依赖情况。这 种⽅式不是很⾼效，这⾥推荐⼀个插件，安装之后，直接打开 pom ⽂件，即可查看依赖树，还能⾃动分析是否存在 jar 包冲突。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/itOzqQ.png"></p><h3 id="六、-Key-promoter-X"><a href="#六、-Key-promoter-X" class="headerlink" title="六、 Key promoter X"></a>六、 Key promoter X</h3><p>Key Promoter X 是⼀个提示插件，当你在 IDEA ⾥⾯使⽤⿏标的时候，如果这个⿏标操作是能够⽤快捷键替代的，那么 Key Promoter X会弹出⼀个提示框，告知你这个⿏标操作可以⽤什么快捷键替 代。</p><h3 id="七、Grep-Console"><a href="#七、Grep-Console" class="headerlink" title="七、Grep Console"></a>七、Grep Console</h3><p>Grep Console 是⼀款和 IDEA Console 相关的插件 </p><p>可以通过 expression 表达式过滤⽇志、给不同级别的⽇志或者给不同 pattern 的⽇志加上颜⾊。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/IKE8Fr.png"></p><h3 id="⼋、Background-Image-Plus"><a href="#⼋、Background-Image-Plus" class="headerlink" title="⼋、Background Image Plus"></a>⼋、Background Image Plus</h3><p>安装好插件后，在设置⾥可以选择背景图</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/hYAvEa.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Er8roa.png"></p><h3 id="九、RestfulTool"><a href="#九、RestfulTool" class="headerlink" title="九、RestfulTool"></a>九、RestfulTool</h3><p>是⼀套Restful服务开发的辅助⼯具集</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/yGHS2G.png"></p><h3 id="⼗、-gitignore"><a href="#⼗、-gitignore" class="headerlink" title="⼗、.gitignore"></a>⼗、.gitignore</h3><p>在提交项⽬到本地仓库的时候，会把 .idea ⽂件夹中的内容也提交上去，这⾥⾯放的是⼀些项⽬的配置信息，包括历史记录，版本控制信息等。 </p><p>可以将不要传到 Git 上⾯去,还有其他的如 target ⽬录，⼀些账号配置⽂件等，设置为不要提交。 这个时候就需要编写 .gitignore ⽂件来忽略提交这些⽂件，在 IDEA 中的插件 .ignore 可以帮我们做这件事。</p><h3 id="⼗⼀、Alibaba-Cloud-Toolkit"><a href="#⼗⼀、Alibaba-Cloud-Toolkit" class="headerlink" title="⼗⼀、Alibaba Cloud Toolkit"></a>⼗⼀、Alibaba Cloud Toolkit</h3><p>Alibaba Cloud Toolkit 是阿⾥云针对 IDE 平台为开发者提供的⼀款插件，⽤于帮助开发者⾼效开发并部署适合在云端运⾏的应⽤。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/GoNXvM.png"></p><h3 id="⼗⼆、Alibaba-Java-Coding-Guidelines"><a href="#⼗⼆、Alibaba-Java-Coding-Guidelines" class="headerlink" title="⼗⼆、Alibaba Java Coding Guidelines"></a>⼗⼆、Alibaba Java Coding Guidelines</h3><p>该插件由阿⾥巴巴 P3C 项⽬组研发。 </p><p>插件在扫描代码后，将不符合规约的代码显示出来，甚⾄还基于 Inspection 机制提供了实时检测功 能，编写代码的同时也能快速发现问题所在，还实现了批量⼀键修复的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/E1soA3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful接⼝实现与测试</title>
      <link href="/2022/06/29/restful-jie-shi-xian-yu-ce-shi/"/>
      <url>/2022/06/29/restful-jie-shi-xian-yu-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="RESTful接⼝实现与测试"><a href="#RESTful接⼝实现与测试" class="headerlink" title="RESTful接⼝实现与测试"></a>RESTful接⼝实现与测试</h1><h2 id="1-RESTful接⼝与http协议状态表述"><a href="#1-RESTful接⼝与http协议状态表述" class="headerlink" title="1. RESTful接⼝与http协议状态表述"></a>1. RESTful接⼝与http协议状态表述</h2><h3 id="⼀、RESTful⻛格API的好处"><a href="#⼀、RESTful⻛格API的好处" class="headerlink" title="⼀、RESTful⻛格API的好处"></a>⼀、RESTful⻛格API的好处</h3><p>API（Application Programming Interface），顾名思义：是⼀组编程接⼝规范，客户端与服务端通过请求响应进⾏数据通信。REST（Representational State Transfer）表述性状态传递，决定了接⼝的形式与规则。<strong>RESTful 是基于 http ⽅法的 API 设计⻛格，⽽不是⼀种新的技术。</strong></p><ol><li>看Url就知道要什么资源</li><li>看http method就知道针对资源⼲什么</li><li>看http status code就知道结果如何</li></ol><p>对接⼝开发提供了⼀种可以⼴泛适⽤的规范，为前端后端交互减少了交流的成本，是<strong>约定⼤于配置</strong>的体现。</p><p>当然也不是所有的接⼝，都能⽤ REST 的形式来表述。要在实际⼯作中，灵活运⽤。 我们⽤ RESTful ⻛格的⽬的是为⼤家提供统⼀标准，避免不必要的沟通成本的浪费，形成⼀种 通⽤的⻛格。但也不是绝对适⽤任何场景。</p><h3 id="⼆、RESTful-API的设计⻛格"><a href="#⼆、RESTful-API的设计⻛格" class="headerlink" title="⼆、RESTful API的设计⻛格"></a>⼆、RESTful API的设计⻛格</h3><h4 id="2-1-RESTful是⾯向资源的（名词）"><a href="#2-1-RESTful是⾯向资源的（名词）" class="headerlink" title="2.1 RESTful是⾯向资源的（名词）"></a>2.1 RESTful是⾯向资源的（名词）</h4><p>REST 通过 URI 暴露资源时，会强调不要在 URI 中出现动词。⽐如：</p><table><thead><tr><th>不符合REST的接⼝URI</th><th>符合REST接⼝URI</th><th>功能</th></tr></thead><tbody><tr><td>GET /api/getDogs/{id}</td><td>GET /api/dogs/{id}</td><td>获取⼀个⼩狗</td></tr><tr><td>GET /api/getDogs</td><td>GET /api/dogs</td><td>获取所有⼩狗</td></tr><tr><td>GET /api/addDogs</td><td>POST /api/dogs</td><td>添加⼀个⼩狗</td></tr><tr><td>GET /api/editDogs/{id}</td><td>PUT /api/dogs/{id}</td><td>修改⼀个⼩狗</td></tr><tr><td>GET /api/deleteDogs/{id}</td><td>DELETE /api/dogs/{id}</td><td>删除⼀个⼩狗</td></tr></tbody></table><h4 id="2-2-⽤HTTP⽅法体现对资源的操作（动词）"><a href="#2-2-⽤HTTP⽅法体现对资源的操作（动词）" class="headerlink" title="2.2 ⽤HTTP⽅法体现对资源的操作（动词）"></a>2.2 ⽤HTTP⽅法体现对资源的操作（动词）</h4><ul><li>GET ： 获取、读取资源</li><li>POST ： 添加资源</li><li>PUT ： 修改资源</li><li>DELETE ： 删除资源</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Jbq1SQ.png"></p><p>实际上，这四个动词实际上就对应着增删改查四个操作，利⽤了 HTTP 动词来表示对资源的操作。</p><h4 id="2-3-HTTP状态码"><a href="#2-3-HTTP状态码" class="headerlink" title="2.3 HTTP状态码"></a>2.3 HTTP状态码</h4><p>通过 HTTP 状态码体现动作的结果,不要⾃定义 200 OK 400 Bad Request 500 Internal Server Error</p><p>在 APP 与 API 的交互当中，其结果逃不出这三种状态：</p><ul><li>所有事情都按预期正确执⾏完毕 - 成功</li><li>APP 发⽣了⼀些错误 - 客户端错误（如：校验⽤户输⼊身份证，结果输⼊的是军官证， 就是客户端输⼊错误）</li><li>API 发⽣了⼀些错误 – 服务器端错误（各种编码bug或服务内部⾃⼰导致的异常）</li></ul><p>这三种状态与上⾯的状态码是⼀⼀对应的。如果你觉得这三种状态，分类处理结果太宽泛， http-status code 还有很多。建议还是要遵循KISS(Keep It Stupid and Simple) 原则，上⾯的三种状态码完全可以覆盖99%以上的场景。这三个状态码⼤家都记得住，⽽且⾮常常⽤，多了就不⼀定了。</p><h4 id="2-4-Get⽅法和查询参数不应该改变数据"><a href="#2-4-Get⽅法和查询参数不应该改变数据" class="headerlink" title="2.4 Get⽅法和查询参数不应该改变数据"></a>2.4 Get⽅法和查询参数不应该改变数据</h4><p>改变数据的事交给POST、PUT、DELETE</p><h4 id="2-5-使⽤复数名词"><a href="#2-5-使⽤复数名词" class="headerlink" title="2.5 使⽤复数名词"></a>2.5 使⽤复数名词</h4><p>/dogs ⽽不是 /dog</p><h4 id="2-6-复杂资源关系的表达"><a href="#2-6-复杂资源关系的表达" class="headerlink" title="2.6 复杂资源关系的表达"></a>2.6 复杂资源关系的表达</h4><p>GET /cars/711/drivers/ 返回使⽤过编号711汽⻋的所有司机 </p><p>GET /cars/711/drivers/4 返回使⽤过编号711汽⻋的4号司机</p><h4 id="2-7-⾼级⽤法-HATEOAS"><a href="#2-7-⾼级⽤法-HATEOAS" class="headerlink" title="2.7 ⾼级⽤法:HATEOAS"></a>2.7 ⾼级⽤法:HATEOAS</h4><p><strong>HATEOAS</strong>:Hypermedia as the Engine of Application State 超媒体作为应⽤状态的引擎。 RESTful API 最好做到 HATEOAS ，<strong>即返回结果中提供链接，连向其他API⽅法，使得⽤户不查⽂档，也知道下⼀步应该做什么</strong>。⽐如，当⽤户向api.example.com的根⽬录发出请求，会得到这样⼀个⽂档。 </p><p><code>&#123;&quot;link&quot;: &#123; &quot;rel&quot;: &quot;collection https://www.example.com/zoos&quot;, &quot;href&quot;: &quot;https://api.example.com/zoos&quot;, &quot;title&quot;: &quot;List of zoos&quot;, &quot;type&quot;: &quot;application/vnd.yourformat+json&quot; &#125;&#125; </code></p><p>上⾯代码表示，⽂档中有⼀个 link 属性，⽤户读取这个属性就知道下⼀步该调⽤什么 API 或者可以调⽤什么 API 了。</p><h4 id="2-8-资源过滤、排序、选择和分⻚的表述"><a href="#2-8-资源过滤、排序、选择和分⻚的表述" class="headerlink" title="2.8 资源过滤、排序、选择和分⻚的表述"></a>2.8 资源过滤、排序、选择和分⻚的表述</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/4el3LL.png"></p><h4 id="2-9-版本化你的API"><a href="#2-9-版本化你的API" class="headerlink" title="2.9 版本化你的API"></a>2.9 版本化你的API</h4><p><strong>强制性增加 API 版本声明</strong>，不要发布⽆版本的 API。如：/api/v1/blog</p><p><strong>⾯向扩展开放，⾯向修改关闭</strong>：也就是说⼀个版本的接⼝开发完成测试上线之后，我们⼀般不会对接⼝进⾏修改，如果有新的需求就开发新的接⼝进⾏功能扩展。这样做的⽬的是：当你的新接⼝上线后，不会影响使⽤⽼接⼝的⽤户。如果新接⼝⽬的是替换⽼接⼝，也不要在v1 版本原接⼝上修改，⽽是开发 v2 版本接⼝，并声明 v1 接⼝废弃！</p><h3 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h3><p>关于 HTTP RESTful ⻛格 API 设计的更多例⼦，请⼤家参考：<a href="http://httpbin.org/">http://httpbin.org/</a></p><h2 id="2-Spring常⽤注解及基础讲解"><a href="#2-Spring常⽤注解及基础讲解" class="headerlink" title="2. Spring常⽤注解及基础讲解"></a>2. Spring常⽤注解及基础讲解</h2><h3 id="⼀、HTTP协议的四种传参⽅式"><a href="#⼀、HTTP协议的四种传参⽅式" class="headerlink" title="⼀、HTTP协议的四种传参⽅式"></a>⼀、HTTP协议的四种传参⽅式</h3><table><thead><tr><th>HTTP协议组成</th><th>协议内容示例</th><th>对应Spring注解</th></tr></thead><tbody><tr><td>path info传参</td><td>/articles/12 (查询id为12的⽂章，12是参数)</td><td>@PathVariable</td></tr><tr><td>URL Query String传参</td><td>/articles?id=12</td><td>@RequestParam</td></tr><tr><td>Body 传参</td><td>Content-Type: multipart/formdata</td><td>@RequestParam</td></tr><tr><td>Body 传参</td><td>Content-Type: application/json，或其他⾃定义格式</td><td>@RequestBody</td></tr><tr><td>Headers 传参</td><td></td><td>@RequestHeader</td></tr></tbody></table><h3 id="⼆、常⽤注解回顾"><a href="#⼆、常⽤注解回顾" class="headerlink" title="⼆、常⽤注解回顾"></a>⼆、常⽤注解回顾</h3><h4 id="2-1-RequestBody与-ResponseBody"><a href="#2-1-RequestBody与-ResponseBody" class="headerlink" title="2.1 @RequestBody与@ResponseBody"></a>2.1 @RequestBody与@ResponseBody</h4><blockquote><p>注意并不要求 @RequestBody 与 @ResponseBody 成对使⽤。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span>  <span class="token class-name">AjaxResponse</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ArticleVO</span> article<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上代码所示：</p><ul><li>@RequestBody 修饰请求参数，注解⽤于接收 HTTP 的 body ，默认是使⽤ JSON 的格式</li><li>@ResponseBody 修饰返回值，注解⽤于在 HTTP的body 中携带响应数据，默认是使⽤ JSON 的 格式。如果不加该注解，spring 响应字符串类型，是跳转到模板⻚⾯或 jsp ⻚⾯的开发模式。说 ⽩了：加上这个注解你开发的是⼀个数据接⼝，不加这个注解你开发的是⼀个⻚⾯跳转控制器。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/PYrXGD.png"></p><p>在使⽤ @ResponseBody 注解之后程序不会再⾛视图解析器，也就不再做 html 视图渲染，⽽是直接将对象以数据的形式（默认JSON）返回给请求发送者。那么我们有⼀个问题：如果我们想接收或 XML 数据该怎么办？我们想响应 excel 的数据格式该怎么办？我们后⽂来回答这个问题。</p><h4 id="2-2-RequestMapping注解"><a href="#2-2-RequestMapping注解" class="headerlink" title="2.2 @RequestMapping注解"></a>2.2 @RequestMapping注解</h4><p>@RequestMapping 注解是所有常⽤注解中，最有看点的⼀个注解，⽤于标注HTTP服务端点。它的 很多属性对于丰富我们的应⽤开发⽅式⽅法，都有很重要的作⽤。如：</p><ul><li>value：应⽤请求端点，最核⼼的属性，⽤于标志请求处理⽅法的唯⼀性；</li><li>method：HTTP 协议的 method 类型， 如：GET、POST、PUT、DELETE等；</li><li>consumes：HTTP 协议请求内容的数据类型（Content-Type），例如 application/json,  text/html;</li><li>produces:  HTTP 协议响应内容的数据类型。下⽂会详细讲解。</li><li>params： HTTP 请求中必须包含某些参数值的时候，才允许被注解标注的⽅法处理请求。</li><li>headers： HTTP 请求中必须包含某些指定的 header 值，才允许被注解标注的⽅法处理请求。</li></ul><p>@RequestMapping(value = “/article”, method = POST)  @PostMapping(value = “/article”) 上⾯代码中两种写法起到的是⼀样的效果，也就是 PostMapping 等同于 @RequestMapping 的 method 等于 POST 。同理：@GetMapping、@PutMapping、@DeleteMapping也都是简写的⽅式。</p><h4 id="2-3-RestController与-Controller"><a href="#2-3-RestController与-Controller" class="headerlink" title="2.3 @RestController与@Controller"></a>2.3 @RestController与@Controller</h4><p>@Controller 注解是开发中最常使⽤的注解，它的作⽤有两层含义：</p><ul><li>⼀是告诉 Spring，被该注解标注的类是⼀个 Spring 的 Bean，需要被注⼊到 Spring 的上下⽂环境中。</li><li>⼆是该类⾥⾯所有被 RequestMapping 标注的注解都是 HTTP 服务端点。</li></ul><p>@RestController 相当于 @Controller 和 @ResponseBody 结合。它有两层含义：</p><ul><li>⼀是作为 Controller 的作⽤，将控制器类注⼊到 Spring 上下⽂环境，该类 RequestMapping 标注⽅法为 HTTP 服务端点。</li><li>⼆是作为 ResponseBody 的作⽤，请求响应默认使⽤的序列化⽅式是 JSON ，⽽不是跳转到 jsp 或模板⻚⾯。</li></ul><h4 id="2-4-PathVariable-与-RequestParam"><a href="#2-4-PathVariable-与-RequestParam" class="headerlink" title="2.4 @PathVariable 与@RequestParam"></a>2.4 @PathVariable 与@RequestParam</h4><p>PathVariable ⽤于 URI 上的{参数}，如下⽅法⽤于删除⼀篇⽂章，其中 id 为⽂章 id 。如：我们的请求 URL 为“/article/1”,那么将匹配DeleteMapping 并且 PathVariable 接收参数 id=1。⽽ RequestParam ⽤于接收普通表单⽅式或者 ajax 模拟表单提交的参数数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/article/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">AjaxResponse</span> <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">AjaxResponse</span> <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、接收复杂嵌套对象参数"><a href="#三、接收复杂嵌套对象参数" class="headerlink" title="三、接收复杂嵌套对象参数"></a>三、接收复杂嵌套对象参数</h3><p>有的同学可能还⽆法理解 RequestBody 注解存在的真正意义，表单数据提交⽤ RequestParam 就好 了，为什么还要搞出来⼀个RequestBody 注解呢？</p><p>RequestBody 注解的真正意义在于<strong>能够使⽤对象或者嵌套对象接收前端数据</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/R73tVf.png"></p><p>仔细看上⾯的代码，是⼀个 paramData 对象⾥⾯包含了⼀个 bestFriend 对象。这种数据结构使⽤ RequestParam 就⽆法接收了，RequestParam 只能接收平⾯的、⼀对⼀的参数。</p><p>像这种嵌套的数据结构的参数，就需要我们在 Java 服务端定义两个类，⼀个类是 ParamData ，⼀个 类是 BestFriend 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamData</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BestFriend</span> bestFriend<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BestFriend</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意上⾯代码中省略了GET、SET⽅法等必要的 Java plain model 元素。</li><li>注意成员变量名称⼀定要和JSON属性名称对应上。</li><li>注意接收不同类型的参数，使⽤不同的成员变量类型。</li></ul><p>完成以上动作，我们就可以使⽤ @RequestBody ParamData paramData ，⼀次性的接收以上所有的复杂嵌套对象参数了，参数对象的所有属性都将被赋值。</p><h3 id="四、HTTP数据转换的原理"><a href="#四、HTTP数据转换的原理" class="headerlink" title="四、HTTP数据转换的原理"></a>四、HTTP数据转换的原理</h3><p>现在使⽤ JSON 已经⽐较普遍了，其⽅便易⽤、表达能⼒强，是绝⼤部分接⼝应⽤数据的⾸选。 那么如何响应其他类型的数据？其中的判别原理⼜是什么？</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/4fzziu.png"></p><ul><li>当⼀个 HTTP 请求到达时是⼀个 InputStream ，通过 HttpMessageConverter 转换为 Java 对象， 从⽽进⾏参数接收。</li><li>当对⼀个 HTTP 请求进⾏响应时，我们⾸先输出的是⼀个 java 对象，然后由 HttpMessageConverter 转换为 OutputStream 输出。</li></ul><p>当我们在 Spring Boot 应⽤中集成了 jackson 的类库之后，如下的⼀些 HttpMessageConverter 将会被加载。</p><table><thead><tr><th>实现类</th><th>功能说明</th></tr></thead><tbody><tr><td>StringHttpMessageConverter</td><td>将请求信息转为字符串</td></tr><tr><td>FormHttpMessageConverter</td><td>将表单数据读取到 MultiValueMap 中</td></tr><tr><td>XmlAwareFormHttpMessageConverter</td><td>扩展与 FormHttpMessageConverter ，如果部分表单属性是 XML 数据，可⽤该转换器进⾏读取</td></tr><tr><td>ResourceHttpMessageConverter</td><td>读写 org.springframework.core.io.Resource 对象</td></tr><tr><td>BufferedImageHttpMessageConverter</td><td>读写 BufferedImage 对象</td></tr><tr><td>ByteArrayHttpMessageConverter</td><td>读写⼆进制数据</td></tr><tr><td>SourceHttpMessageConverter</td><td>读写java.xml.transform.Source类型的对象</td></tr><tr><td>MarshallingHttpMessageConverter</td><td>通过 Spring 的 org.springframework,xml.Marshaller 和 Unmarshaller 读写 XML 消息</td></tr><tr><td>Jaxb2RootElementHttpMessageConver ter</td><td>通过 JAXB2 读写 XML 消息，将请求消息转换为标注的 XmlRootElement 和 XmlType 连接的类中</td></tr><tr><td>MappingJacksonHttpMessageConverte r</td><td>利⽤ Jackson 开源包的 ObjectMapper 读写 JSON 数据</td></tr><tr><td>RssChannelHttpMessageConverter</td><td>读写 RSS 种⼦消息</td></tr><tr><td>AtomFeedHttpMessageConverter</td><td>和 RssChannelHttpMessageConverter 能够读写 RSS 种⼦消息</td></tr></tbody></table><p>根据 HTTP 协议的 Accept 和 Content-Type 属性，以及参数数据类型来判别使⽤哪⼀种 HttpMessageConverter 。当使⽤ RequestBody或 ResponseBody 时，再结合前端发送的 Accept 数据类型，会⾃动判定优先使⽤ MappingJacksonHttpMessageConverter 作为数据转换器。但是，不仅 JSON 可以表达对象数据类型，XML 也可以。如果我们希望使⽤ XML 格式该怎么告知 Spring 呢，那就要使⽤到produces 属性了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"/demo"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_XML_VALUE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这⾥我们明确的告知了返回的数据类型是 xml ，就会使⽤ Jaxb2RootElementHttpMessageConverter 作为默认的数据转换器。当然实现XML 数据响应⽐ JSON 还会更复杂⼀些，还需要结合 @XmlRootElement、@XmlElement 等注解实体类来使⽤,同理 consumes 属性你也就会使⽤了。</p><h3 id="五、⾃定义HttpMessageConverter"><a href="#五、⾃定义HttpMessageConverter" class="headerlink" title="五、⾃定义HttpMessageConverter"></a>五、⾃定义HttpMessageConverter</h3><p>其实绝⼤多数的数据格式都不需要我们⾃定义 HttpMessageConverter ，都有第三⽅类库可以帮助 我们实现(包括下⽂代码中的 Excel 格式)。但有的时候，有些数据的输出格式并没有类似于 Jackson 这种类库帮助我们处理，需要我们⾃定义数据格式。该怎么做?</p><p>下⾯我们就以 Excel 数据格式为例，写⼀个⾃定义的 HTTP 类型转换器。 实现的效果就是，当我们返回 AjaxResponse 这种数据类型，就⾃动将 AjaxResponse 转成 Excel 数据响应给客户端。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseToXlsConverter</span> <span class="token keyword">extends</span><span class="token class-name">AbstractHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AjaxResponse</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MediaType</span> EXCEL_TYPE <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResponseToXlsConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>EXCEL_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AjaxResponse</span> <span class="token function">readInternal</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span>                                <span class="token keyword">final</span> <span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">//针对AjaxResponse类型返回值，使⽤下⾯的writeInternal⽅法进⾏消息类型转换</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">writeInternal</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AjaxResponse</span> ajaxResponse<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">HttpOutputMessage</span> outputMessage<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Workbook</span> workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Row</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>ajaxResponse<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>ajaxResponse<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 实现 AbstractHttpMessageConverter 接⼝</li><li>指定该转换器是针对哪种数据格式的？如上⽂代码中的 “application/vnd.ms-excel”</li><li>指定该转换器针对那些对象数据类型？如上⽂代码中的 supports 函数</li><li>使⽤ writeInternal 对数据进⾏输出处理，上例中是输出为 Excel 格式。</li></ul><h2 id="3-使⽤注解开发RESTful接⼝"><a href="#3-使⽤注解开发RESTful接⼝" class="headerlink" title="3. 使⽤注解开发RESTful接⼝"></a>3. 使⽤注解开发RESTful接⼝</h2><h3 id="⼀、-定义资源（对象）"><a href="#⼀、-定义资源（对象）" class="headerlink" title="⼀、 定义资源（对象）"></a>⼀、 定义资源（对象）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Reader</span><span class="token punctuation">></span></span> readerList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Data、Builder 等都是 lombok 提供给我们的注解，有利于我们简化代码。</p><ul><li>@Builder 为我们提供了通过对象属性的链式赋值构建对象的⽅法。</li><li>@Data 注解帮我们定义了⼀系列常⽤⽅法，如：getters、setters、hashcode、equals 等。</li></ul><h3 id="⼆、统⼀规范接⼝响应的数据格式"><a href="#⼆、统⼀规范接⼝响应的数据格式" class="headerlink" title="⼆、统⼀规范接⼝响应的数据格式"></a>⼆、统⼀规范接⼝响应的数据格式</h3><p>下⾯这个类是⽤于统⼀数据响应接⼝标准的。它的作⽤是：<strong>统⼀所有开发⼈员响应前端请求的返回结果格式，减少前后端开发⼈员沟通成本，是⼀种RESTful接⼝标准化的开发约定。</strong>下⾯代码只对请求成功的情况进⾏封装，异常处理相关后续再做详细说明。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxResponse</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> isok<span class="token punctuation">;</span>  <span class="token comment">//请求是否处理成功</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span> <span class="token comment">//请求响应状态码（200、400、500）</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>  <span class="token comment">//请求结果描述信息</span>  <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span> <span class="token comment">//请求结果数据（通常⽤于查询操作）</span>    <span class="token keyword">private</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//请求成功的响应，不带查询数据（⽤于删除、修改、新增接⼝）</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setIsok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"请求响应成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//请求成功的响应，带有查询数据（⽤于数据查询接⼝）</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setIsok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"请求响应成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//请求成功的响应，带有查询数据（⽤于数据查询接⼝）</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setIsok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、编写Controller"><a href="#三、编写Controller" class="headerlink" title="三、编写Controller"></a>三、编写Controller</h3><p>我们来实现⼏个简单的 RESTful 接⼝</p><ul><li>增加⼀篇 Article ，使⽤ POST ⽅法</li><li>删除⼀篇 Article ，使⽤ DELETE ⽅法，参数是 id</li><li>更新⼀篇 Article ，使⽤ PUT ⽅法，以 id 为主键进⾏更新</li><li>获取⼀篇 Article ，使⽤ GET ⽅法</li></ul><p>下⾯代码中并未真正的进⾏数据库操作，后续结合 Mybatis 和 JPA 再做补充。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>restful<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonProcessingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mqxu<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>restful<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">AjaxResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mqxu<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>restful<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Article</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mqxu<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>restful<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Reader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>format<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: ArticleController* @author: syhan* @date: 2022-03-10**/</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/articles"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 使⽤GET⽅法,根据路径参数id查询⼀篇⽂章: GET /api/v1/articles/123     *     * @param id id     * @return AjaxResponse     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Reader</span><span class="token punctuation">></span></span> readerList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"mqxu"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"SpringBoot 从⻘铜到王者"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"SpringBoot"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readerList</span><span class="token punctuation">(</span>readerList<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"article:"</span> <span class="token operator">+</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 使⽤GET⽅法,根据url传参⽅式，获取到id查询⼀篇⽂章: GET /api/v1/articles?id=123     *     * @param id id     * @return AjaxResponse     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">getArticleByParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Reader</span><span class="token punctuation">></span></span> readerList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"mqxu"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"SpringBoot 从⻘铜到王者"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"SpringBoot"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readerList</span><span class="token punctuation">(</span>readerList<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"article:"</span> <span class="token operator">+</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 使⽤ GET⽅法，查询所有⽂章: GET /api/v1/articles/all     *     * @return AjaxResponse     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Reader</span><span class="token punctuation">></span></span> readerList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">111L</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"mqxu"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"SpringBoot"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"SpringBoot"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readerList</span><span class="token punctuation">(</span>readerList<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Article</span> article2 <span class="token operator">=</span> <span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">222L</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"mqxu"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readerList</span><span class="token punctuation">(</span>readerList<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span> article2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 使⽤POST⽅法(RequestBody⽅式接收参数),增加⼀篇Article : POST/api/v1/articles/body 参数在请求体中⽤JSON对象     *     * @param article article     * @return AjaxResponse     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为使⽤了 lombok 的 @Slf4j 注解（类的定义处），就可以直接使⽤ log 变量打印⽇志。不需要写下⾯的这⾏代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">HelloController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、Postman测试"><a href="#四、Postman测试" class="headerlink" title="四、Postman测试"></a>四、Postman测试</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/vN40yf.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/hv6GVb.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HNdrLf.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/epLiOr.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Ga4v4S.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/iCRTd9.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mI8pw8.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/hL5bQk.png"></p><h2 id="4-JSON数据处理与PostMan测试"><a href="#4-JSON数据处理与PostMan测试" class="headerlink" title="4. JSON数据处理与PostMan测试"></a>4. JSON数据处理与PostMan测试</h2><h3 id="⼀、-FastJSON、Gson和Jackson对⽐"><a href="#⼀、-FastJSON、Gson和Jackson对⽐" class="headerlink" title="⼀、 FastJSON、Gson和Jackson对⽐"></a>⼀、 FastJSON、Gson和Jackson对⽐</h3><p><strong>开源的Jackson</strong>：SpringBoot 默认是使⽤ Jackson 作为 JSON 数据格式处理的类库，Jackson 在各⽅⾯都⽐较优秀，所以不建议将Jackson 替换为 Gson 或 fastjson。</p><p><strong>Google的Gson</strong>：Gson 是 Google 为满⾜内部需求开发的 JSON 数据处理类库，其核⼼结构⾮常简单，toJson 与 fromJson 两个转换函数实现对象与 JSON 数据的转换。</p><p><strong>阿⾥巴巴的FastJson</strong>：Fastjson是阿⾥巴巴开源的 JSON 数据处理类库，其主要特点是序列化速度快。当并发数据量越⼤的时候，越能体现出 fastjson 的优势。但选择 JSON 处理类库，快并不是唯⼀ 需要考虑的因素，与数据库或磁盘 IO 相⽐，JSON 数据序列化与反序列化的这点时间还不⾜以对软件性能产⽣⽐较⼤的影响。</p><p><strong>性能⽐较</strong>：关于这三个类库的性能测试（截⽌2019年11⽉20⽇）总结如下：</p><ul><li>序列化过程性能：fastjson &gt;= jackson &gt; Gson</li><li>反序列化性能：三者⼏乎不相上下。</li></ul><p><strong>fastjson为⼈诟病的问题</strong>：虽然 fastjson 速度上有⼀定的优势，但是其为了追求速度，很⼤程度放弃了 JSON 的规范性。因此时不时在有些版本中暴露安全问题。所以⽤不⽤ fastjson 在国内软件界 还是有争议的，在国外基本没⼈⽤。</p><h3 id="⼆、在Spring中注解⽅法使⽤Jackson"><a href="#⼆、在Spring中注解⽅法使⽤Jackson" class="headerlink" title="⼆、在Spring中注解⽅法使⽤Jackson"></a>⼆、在Spring中注解⽅法使⽤Jackson</h3><p>不建议将 Jackson 替换为 Gson 或 fastjson 。Jackson 主要的作⽤是：</p><blockquote><p>什么叫序列化与反序列化？说⽩了就是把对象转成可传输、可存储的格式（ json、xml、⼆进制、甚⾄⾃定义格式）叫做序列化。反序列化顾名思义。</p></blockquote><ul><li>反序列化：在客户端将请求数据上传到服务端的时候，⾃动的处理JSON数据对象中的字符串、 数字，将其转换为包含Date类型、Integer等类型的对象。</li><li>序列化：按照指定的格式、顺序等将实体类对象转换为JSON字符串。</li></ul><p>所以下⾯就介绍⼀下 Jackson 的常⽤注解的使⽤⽅法，帮助我们进⾏序列化和反序列化⼯作。</p><p><strong>常⽤注解</strong></p><p>这些注解通常⽤于标注 Java 实体类或实体类的属性。</p><ul><li>@JsonPropertyOrder(value={“pname1”,”pname2”}) 改变⼦属性在 JSON 序列化中的默认定义的顺序。如：param1在先，param2在后。</li><li>@JsonIgnore 加在属性上⾯，排除某个属性不做序列化与反序列化。</li><li>@JsonIgnoreProperties(ignoreUnknown = true)，将这个注解写在类上之后，就会忽略 JSON 字符串中存在，但实体类不存在的属性，不予赋值，也不会出现异常。</li><li>@JsonIgnoreProperties({ “xxx”, “yyyy” }) 忽略某些属性不进⾏序列化。</li><li>@JsonProperty(anotherName) 为某个属性换⼀个名称，体现在JSON数据⾥⾯。</li><li>@JsonInclude(JsonInclude.Include.NON_NULL) 排除为空的元素不做序列化反序列化。</li><li>@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”, timezone = “GMT+8”) 指定⽇期类型的属性格式。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonPropertyOrder</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"content"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"auther"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Reader</span><span class="token punctuation">></span></span> reader<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上⽂代码中对应的 JSON 数据格式可以为：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    auther <span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>    content<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>    title<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>    createTime<span class="token operator">:</span><span class="token string">"2022-03-10 12:12:12"</span><span class="token punctuation">,</span>    reader<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为定义了 JsonPropertyOrder，content 在先，title 在后</li><li>因为定义了 JsonIgnore，id 属性被忽略</li><li>因为定义了 JsonProperty，author 属性变为 auther</li><li>因为定义了 JsonInclude 和 JsonFormat ，createTime 不要为空，并且格式为 “yyyy-MM-dd HH:mm:ss”</li></ul><p>通常会对⽇期类型转换进⾏全局配置，⽽不是在每⼀个 Java bean ⾥⾯配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">jackson</span><span class="token punctuation">:</span>       <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss       <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、⼿动数据转换"><a href="#三、⼿动数据转换" class="headerlink" title="三、⼿动数据转换"></a>三、⼿动数据转换</h3><p>除了在 Spring 框架内实现⾃动的前后端 JSON 数据与 Java 对象的转换，我们还可以使⽤ Jackson ⾃⼰写代码进⾏转换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//jackson的ObjectMapper 转换对象</span><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将某个java对象转换为JSON字符串</span><span class="token class-name">String</span> jsonStr <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>javaObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将jsonStr转换为Demo类的对象</span><span class="token class-name">Demo</span> demo <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">,</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 JSON 字符串代表的对象的字段多于类定义的字段时，使⽤ readValue 会抛出 UnrecognizedPropertyException 异常。</p><p>在类的定义处加上 <strong>@JsonIgnoreProperties(ignoreUnknown = true)</strong> 可以解决这个问题。</p><h3 id="四、Jackson全局配置"><a href="#四、Jackson全局配置" class="headerlink" title="四、Jackson全局配置"></a>四、Jackson全局配置</h3><p>在 Spring 框架内使⽤ Jackson 的时候，通常需要⼀些特殊的全局配置，来应对我们 JSON 序列化与反序列化中出现的各种问题。</p><p>Spring Boot 提供了两种配置⽅式，⼀是配置⽂件的⽅式</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">jackson</span><span class="token punctuation">:</span>    <span class="token comment">#⽇期类型格式化</span>   <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss   <span class="token key atrule">serialization</span><span class="token punctuation">:</span>      <span class="token comment">#格式化输出，通常为了节省⽹络流量设置为false。因为格式化之后会带有缩进，⽅便阅读。</span>     <span class="token key atrule">indent_output</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment">#某些类对象⽆法序列化的时候，是否报错</span>     <span class="token key atrule">fail_on_empty_beans</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#设置空如何序列化，⻅下⽂代码⽅式详解</span>   <span class="token key atrule">defaultPropertyInclusion</span><span class="token punctuation">:</span> NON_EMPTY   <span class="token key atrule">deserialization</span><span class="token punctuation">:</span>      <span class="token comment">#json对象中有不存在的属性时候，是否报错</span>     <span class="token key atrule">fail_on_unknown_properties</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token key atrule">parser</span><span class="token punctuation">:</span>      <span class="token comment">#允许出现特殊字符和转义符</span>     <span class="token key atrule">allow_unquoted_control_chars</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment">#允许出现单引号</span>     <span class="token key atrule">allow_single_quotes</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⼆是通过代码的⽅式，⽅式⼀更容易，⽅式⼆更灵活。 </p><p>⽅式⼀⽆法解决的问题，可以尝试使⽤⽅式⼆。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Primary</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ObjectMapper</span> <span class="token function">jacksonObjectMapper</span><span class="token punctuation">(</span><span class="token class-name">Jackson2ObjectMapperBuilderbuilder</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createXmlMapper</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过该⽅法对mapper对象进⾏设置，所有序列化的对象都将按改规则进⾏系列化</span>        <span class="token comment">// Include.Include.ALWAYS 默认</span>        <span class="token comment">// Include.NON_DEFAULT 属性为默认值不序列化</span>        <span class="token comment">// Include.NON_EMPTY 属性为 空（""） 或者为 NULL 都不序列化，则返回的json是没有这个字段的。这样对移动端会更省流量</span>        <span class="token comment">// Include.NON_NULL 属性为NULL 不序列化</span>objectMapper<span class="token punctuation">.</span><span class="token function">setSerializationInclusion</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span>NON_EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>   objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span>FAIL_ON_UNKNOWN_PROPERTIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 允许出现特殊字符和转义符</span>objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">JsonParser<span class="token punctuation">.</span>Feature</span><span class="token punctuation">.</span>ALLOW_UNQUOTED_CONTROL_CHARS<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 允许出现单引号</span>        objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">JsonParser<span class="token punctuation">.</span>Feature</span><span class="token punctuation">.</span>ALLOW_SINGLE_QUOTES<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 字段保留，将null值转为""</span>        objectMapper<span class="token punctuation">.</span><span class="token function">getSerializerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNullValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> jsonGenerator<span class="token punctuation">,</span>                                  <span class="token class-name">SerializerProvider</span> serializerProvider<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> <span class="token class-name">IOException</span>           <span class="token punctuation">&#123;</span>                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectMapper<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使⽤Mockito编码完成接⼝测试"><a href="#5-使⽤Mockito编码完成接⼝测试" class="headerlink" title="5. 使⽤Mockito编码完成接⼝测试"></a>5. 使⽤Mockito编码完成接⼝测试</h2><blockquote><p>之前我们都是使⽤ Postman 来进⾏接⼝测试的，本节我们来使⽤编码的⽅式来进⾏接⼝测试。</p></blockquote><h3 id="⼀、编码实现接⼝测试"><a href="#⼀、编码实现接⼝测试" class="headerlink" title="⼀、编码实现接⼝测试"></a>⼀、编码实现接⼝测试</h3><h4 id="1-为什么要写代码做测试"><a href="#1-为什么要写代码做测试" class="headerlink" title="1. 为什么要写代码做测试"></a>1. 为什么要写代码做测试</h4><p>因为在做系统⾃动化持续集成的时候，会要求⾃动做单元测试，只有所有的单元测试都跑通了，才能打包构建。⽐如：使⽤ maven 在打包之前将所有的测试⽤例执⾏⼀遍。这⾥重点是⾃动化，所以 Postman 这种⼯具很难插⼊到持续集成的⾃动化流程中去。</p><h4 id="2-JUnit测试框架"><a href="#2-JUnit测试框架" class="headerlink" title="2. JUnit测试框架"></a>2. JUnit测试框架</h4><p>我们先回顾⼀下JUnit常⽤的测试注解，在 JUnit4 和 JUnit5 中，注解的写法有些变化。</p><table><thead><tr><th>junit4</th><th>junit5</th><th>特点</th></tr></thead><tbody><tr><td>@Test</td><td>@Test</td><td>声明⼀个测试⽅法</td></tr><tr><td>@BeforeClass</td><td>@BeforeAll</td><td>在当前类的所有测试⽅法之前执⾏。注解在【静态⽅法】上</td></tr><tr><td>@AfterClass</td><td>@AfterAll</td><td>在当前类中的所有测试⽅法之后执⾏。注解在【静态⽅法】上</td></tr><tr><td>@Before</td><td>@BeforeEach</td><td>在每个测试⽅法之前执⾏。注 解在【⾮静态⽅法】上</td></tr><tr><td>@After</td><td>@AfterEach</td><td>在每个测试⽅法之后执⾏。注 解在【⾮静态⽅法】</td></tr><tr><td>@RunWith(SpringRunner.class)</td><td>@ExtendWith(SpringExtens ion.class)</td><td>类class定义上</td></tr></tbody></table><h4 id="3-Mockito测试框架"><a href="#3-Mockito测试框架" class="headerlink" title="3. Mockito测试框架"></a>3. Mockito测试框架</h4><p>Mockito 是 GitHub 上使⽤最⼴泛的 Mock 框架，可以与JUnit结合使⽤。</p><p>Mockito框架可以创建和配置mock对象，使⽤Mockito简化了具有外部依赖的类的测试开发。 Mockito测试框架可以帮助我们模拟HTTP请求，从⽽达到在服务端测试⽬的。 </p><p>因为其不会真的发送HTTP请求，只是模拟，从⽽节省了HTTP请求的⽹络传输，测试速度更快。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Bgiod3.png"></p><p>确认⼀下模块依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;   &lt;scope&gt;test&lt;&#x2F;scope&gt;   &lt;exclusions&gt;      &lt;exclusion&gt;         &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;         &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;      &lt;&#x2F;exclusion&gt;   &lt;&#x2F;exclusions&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring-boot-starter-test ⾃动包含 Junit 5 和 Mockito 框架，以下测试代码是基于 Junit5 的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>restful<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeAll</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MvcResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>setup<span class="token punctuation">.</span></span><span class="token class-name">MockMvcBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultHandlers</span><span class="token punctuation">.</span><span class="token static">print</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleControllerTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//mock对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>    <span class="token comment">//在所有测试⽅法执⾏之前进⾏mock对象初始化</span>    <span class="token annotation punctuation">@BeforeAll</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mockMvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArticleController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">//测试⽅法</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> article <span class="token operator">=</span> <span class="token triple-quoted-string string">"""               &#123;                    "id": 1,                    "author": "syhan",                    "title": "SpringBoot",                    "content": "SpringBoot",                    "createTime": "2022-03-12 12:12:12",                    "readerList":[&#123;"name":"aaa","age":18&#125;,&#123;"name":"bbb","age":20&#125;]               &#125;"""</span><span class="token punctuation">;</span>        <span class="token class-name">MvcResult</span> result <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>                        <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span><span class="token string">"/api/v1/articles/body"</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span>               <span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//HTTP:status 200              </span><span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.data.author"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"syhan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.data.readerList[0].age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MockMvc对象有以下⼏个基本的⽅法:</p><ul><li>perform : 模拟执⾏⼀个 RequestBuilder 构建的 HTTP 请求，会执⾏ SpringMVC 的流程并映射到相应的控制器 Controller 执⾏。</li><li>contentType：发送请求内容的序列化的格式，”application/json”表示 JSON 数据格式。</li><li>andExpect: 添加 RequsetMatcher 验证规则，验证控制器执⾏完成后结果是否正确，或者说是结果是否与我们期望（Expect）的⼀致。</li><li>andDo: 添加ResultHandler结果处理器，⽐如调试时打印结果到控制台。</li><li>andReturn: 最后返回相应的MvcResult,然后进⾏⾃定义验证/进⾏下⼀步的异步处理。</li></ul><p>上⾯的整个过程，我们都没有使⽤到 Spring Context 依赖注⼊、也没有启动 tomcat web 容器。整个测试过程⼗分轻量级，速度很快。</p><blockquote><p>测试注意 </p><p>因为没有⽤到 Spring，所以在 application.yml 中的时间格式化全局配置⽆效，别忘了在 Article 实体类加上。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后直接运⾏测试⽅法即可</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/O4SD9u.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/borD1s.png"></p><h3 id="⼆、真实Servlet容器环境下的测试"><a href="#⼆、真实Servlet容器环境下的测试" class="headerlink" title="⼆、真实Servlet容器环境下的测试"></a>⼆、真实Servlet容器环境下的测试</h3><p>上⾯的测试执⾏速度⾮常快，但是有⼀个问题：它没有启动 Servlet 容器和 Spring 上下⽂，⾃然也就⽆法实现依赖注⼊（不⽀持@Resource 和 @AutoWired 注解），这就导致它在从控制层到持久层全 流程测试中有很⼤的局限性。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/BsnTKp.png"></p><p>换⼀种写法：看看有没有什么区别。</p><p>在测试类上⾯加上这样两个注解，并且 mockMvc 对象使⽤ @Resource ⾃动注⼊，删掉 BeforeAll 注解。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/kZPbVM.png"></p><p>启动测试，看看和之前有没有什么区别？</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/peAt8c.png"></p><p>看到上⾯这个截图，是不是已经明⽩了？</p><p>该测试⽅法真实的启动了⼀个 Tomcat 容器、以及 Spring 上下⽂，所以我们可以进⾏依赖注⼊ （@Resource），测试实现的效果和使⽤MockMvcBuilders 构建 MockMVC 对象的效果是⼀样的， 但是有⼀个⾮常明显的缺点：每次做⼀个接⼝测试，都会真实启动⼀次Servlet容器和 Spring 上下⽂，加载项⽬⾥定义的所有的 Bean，导致执⾏过程会⽐较缓慢。</p><h4 id="1-SpringBootTest-注解"><a href="#1-SpringBootTest-注解" class="headerlink" title="1. @SpringBootTest 注解"></a>1. @SpringBootTest 注解</h4><p>是⽤来创建 Spring 的上下⽂ ApplicationContext，保证测试在上下⽂环境⾥运⾏。单独使⽤ @SpringBootTest 不会启动 servlet 容器。所以<strong>只是使⽤ SpringBootTest 注解，不可以使⽤ @Resource和@Autowired 等注解进⾏ bean 的依赖注⼊</strong>。（准确的说是可以使⽤，但被注解的 bean 为 null）。</p><h4 id="2-ExtendWith-RunWith注解"><a href="#2-ExtendWith-RunWith注解" class="headerlink" title="2. @ExtendWith(@RunWith注解)"></a>2. @ExtendWith(@RunWith注解)</h4><ul><li><p>RunWith ⽅法为我们构造了⼀个的 Servlet 容器运⾏运⾏环境，并在此环境下测试。然⽽为什么要构建 servlet 容器？因为使⽤了依赖注⼊，注⼊了 MockMvc 对象，⽽在上⼀个例⼦⾥⾯是我们⾃⼰ new 的。</p></li><li><p>⽽ @AutoConfigureMockMvc 注解，该注解表示 mockMvc 对象由 spring 依赖注⼊构建，你只负责使⽤就可以了。这种写法是为了让测试在 servlet 容器环境下执⾏。</p></li></ul><p>简单地说：<strong>如果你单元测试代码使⽤了“依赖注⼊@Resource”就必须加上@ExtendWith，如果你 不是⼿动new MockMvc对象就加上@AutoConfigureMockMvc</strong></p><p>实际上@SpringBootTest 注解已经包含了 @ExtendWith注解，如果使⽤了前者，也可以忽略后者。</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/GJ0QvB.png"></p><h3 id="三、轻量级测试"><a href="#三、轻量级测试" class="headerlink" title="三、轻量级测试"></a>三、轻量级测试</h3><p>在 ExtendWith的AutoConfigureMockMvc 注解的共同作⽤下，启动了 SpringMVC 的运⾏容器，并且把项⽬中所有的 @Bean 全部都注⼊进来。把所有的 bean 都注⼊进来是不是很臃肿？这样会拖慢单元测试的效率。如果我只是想测试⼀下控制层 Controller，怎么办？或者说我只想具体到测试⼀下 ArticleRestController ，怎么办？要把应⽤中所有的bean都注⼊么？有没有轻量级的解决⽅案？⼀ 定是有的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">ArticleController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>使⽤@WebMvcTest替换@SpringBootTes</strong>t</p><ul><li>@SpringBootTest 注解告诉 SpringBoot 去寻找⼀个主配置类(例如带有 @SpringBootApplication 的配置类)，并使⽤它来启动Spring 应⽤程序上下⽂。 SpringBootTest 加载完整的应⽤程序并注⼊所有可能的 bean ，因此速度会很慢。</li><li>@WebMvcTest 注解主要⽤于 controller 层测试，只覆盖应⽤程序的 controller 层， @WebMvcTest(ArticleController.class) 只加载ArticleController 这⼀个 Bean ⽤作测试。所以 WebMvcTest 要快得多，因为我们只加载了应⽤程序的⼀⼩部分。</li></ul><h3 id="四、MockMvc更多的⽤法总结"><a href="#四、MockMvc更多的⽤法总结" class="headerlink" title="四、MockMvc更多的⽤法总结"></a>四、MockMvc更多的⽤法总结</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//模拟GET请求：</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模拟Post请求：</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模拟⽂件上传：</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">multipart</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模拟session和cookie：</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionAttr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置HTTP Header：</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span>                       <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Swagger3即OpenAPI使⽤"><a href="#6-Swagger3即OpenAPI使⽤" class="headerlink" title="6. Swagger3即OpenAPI使⽤"></a>6. Swagger3即OpenAPI使⽤</h2><h3 id="⼀、为什么要发布API接⼝⽂档"><a href="#⼀、为什么要发布API接⼝⽂档" class="headerlink" title="⼀、为什么要发布API接⼝⽂档"></a>⼀、为什么要发布API接⼝⽂档</h3><p>现在很多公司都采取前后端分离的开发模式，前端和后端的⼯作由不同的⼯程师完成。在这种开发模式下，维护⼀份及时更新且完整的API ⽂档将会极⼤的提⾼我们的⼯作效率。</p><p>Swagger 给我们提供了⼀个全新的维护 API ⽂档的⽅式，下⾯我们来了解⼀下它的优点：</p><ul><li>代码变，⽂档变。只需要少量的注解，Swagger 就可以根据代码⾃动⽣成 API ⽂档，很好的保证了⽂档的时效性。</li><li>跨语⾔性，⽀持 40 多种语⾔。</li><li>Swagger UI 呈现出来的是⼀份可交互式的 API ⽂档，我们可以直接在⽂档⻚⾯尝试 API 的调⽤，省去了准备复杂的调⽤参数的过程。</li><li>还可以将⽂档规范导⼊相关的⼯具（例如 SoapUI）, 这些⼯具将会为我们⾃动地创建⾃动化测试。</li></ul><h3 id="⼆、背景及名词解释"><a href="#⼆、背景及名词解释" class="headerlink" title="⼆、背景及名词解释"></a>⼆、背景及名词解释</h3><ul><li><p>OpenAPI 是规范的正式名称。规范的开发⼯作于2015年启动，当时 SmartBear（负责Swagger ⼯具开发的公司）将Swagger 2.0规范捐赠给了 Open API Initiative，该协会由来⾃技术领域不同领域的30多个组织组成。此后，该规范被重命名为 <strong>OpenAPI 规范</strong>。</p></li><li><p>Swagger</p><ul><li>是⼀个 API⽂档维护组织，后来成为了 Open API 标准的主要定义者。现在最新的版本为17 年发布的 Swagger3（Open Api3）。</li><li>是⼀个 Open API 规范实现⼯具包，由于 Swagger ⼯具是由参与创建原始 Swagger 规范的团队开发的，因此通常仍将这些⼯具视为该规范的代名词。⽬前可以认为 Swagger3 就是 Open API 3.0。</li></ul></li><li><p>OpenAPI 3.0：2017年7⽉，Open API Initiative 最终发布了OpenAPI Specification 3.0.0。它对2.0规范进⾏了很多改进。Open API 3.0规范可以⽤ JSON 或 YAML 编写，并且在记录 RESTful API ⽅⾯做得很好。同时标志着 Swagger2 成为过去式。</p></li><li><p>SpringFox 是 spring 社区维护的⼀个项⽬（⾮官⽅），帮助使⽤者将 swagger2 集成到 Spring 中。常常⽤于 Spring 中帮助开发者⽣成⽂档，并可以轻松的在 SpringBoot 中使⽤。截⾄2020年4⽉，尚未⽀持 OpenAPI3 标准。</p></li><li><p>SpringDoc 也是 spring 社区维护的⼀个项⽬（⾮官⽅），帮助使⽤者将 swagger3 集成到 Spring 中。也是⽤来在 Spring 中帮助开发者⽣成⽂档，并可以轻松的在 SpringBoot 中使⽤。</p></li></ul><h3 id="三、整合springdoc-openapi"><a href="#三、整合springdoc-openapi" class="headerlink" title="三、整合springdoc-openapi"></a>三、整合springdoc-openapi</h3><p>添加 openapi 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springdoc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springdoc-openapi-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就这么简单，⽂档就构建完成了，不需要做任何的其他配置。 </p><p>集成完成之后，启动服务，浏览器输⼊：<code>http://localhost:8080/swagger-ui.html</code></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Wp5wz3.png"></p><h3 id="四、将API分组分组展示"><a href="#四、将API分组分组展示" class="headerlink" title="四、将API分组分组展示"></a>四、将API分组分组展示</h3><p>配置⽅法</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/7e3BUs.png"></p><p>新建⼀个HelloController配合</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/kjXFFJ.png"></p><p>重启服务，可以通过下拉选择分组查看组内API：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Itt7GE.png"></p><h3 id="五、使⽤OpenAPI测试"><a href="#五、使⽤OpenAPI测试" class="headerlink" title="五、使⽤OpenAPI测试"></a>五、使⽤OpenAPI测试</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/itG63z.png"></p><p>输⼊接⼝需要的参数，点击 Execute即可</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/bzF8y2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/H0XE5Y.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/0tdhkk.png"></p><p>更多内容请看官⽹：<a href="https://springdoc.org/">https://springdoc.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置管理</title>
      <link href="/2022/06/28/springboot-pei-zhi-guan-li/"/>
      <url>/2022/06/28/springboot-pei-zhi-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot配置管理"><a href="#SpringBoot配置管理" class="headerlink" title="SpringBoot配置管理"></a>SpringBoot配置管理</h1><h2 id="1-SpringBoot启动流程简析"><a href="#1-SpringBoot启动流程简析" class="headerlink" title="1. SpringBoot启动流程简析"></a>1. SpringBoot启动流程简析</h2><blockquote><p>SpringBoot 可以轻松创建独⽴的、⽣产级的基于 Spring 的应⽤程序，只需要很少的⼀些 Spring 配置。为什么可以做到呢？ </p><p>我们从SpringBoot 的启动流程⻆度，简要分析 SpringBoot 启动过程中主要做了哪些事情。</p></blockquote><p><strong>SpringBoot启动简要流程图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/pEjcUC.png"></p><p><a href="https://www.processon.com/view/link/5bf96f8be4b08522107182b5">原始大图链接</a></p><h3 id="⼀、启动流程概述"><a href="#⼀、启动流程概述" class="headerlink" title="⼀、启动流程概述"></a>⼀、启动流程概述</h3><blockquote><p>启动流程从⻆度来看，主要分两个步骤。</p></blockquote><p>第⼀个步骤是构造⼀个SpringApplication应⽤； </p><p>第⼆个步骤是调⽤它的run⽅法，启动应⽤；</p><h3 id="⼆、构造SpringApplication应⽤"><a href="#⼆、构造SpringApplication应⽤" class="headerlink" title="⼆、构造SpringApplication应⽤"></a>⼆、构造SpringApplication应⽤</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>primarySources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//资源加载器默认为null</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//primarySources这⾥指的是执⾏main⽅法的主类</span> <span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据classpath推断出应⽤类型,主要有NONE,SERVLET,REACTIVE三种类型</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过SpringFactoriesLoader⼯具类获取META-INF/spring.factories中配置的⼀系列</span> <span class="token comment">//ApplicationContextInitializer接⼝的⼦实现类</span> <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//基本同上，也是通过SpringFactoriesLoader⼯具类获取配置的ApplicationListener</span> <span class="token comment">//接⼝的⼦实现类</span> <span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过⽅法调⽤堆栈获取到main执⾏⽅法的主类</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringApplication 的构造函数中为 SpringApplication 做了⼀些初始化配置，包括 </p><p>主资源类(⼀般是启动类 primarySources )、 </p><p>应⽤类型(webApplicationType )、 </p><p>应⽤环境上下⽂初始化器(initializers)、 </p><p>应⽤监听器(listeners)、 </p><p>main ⽅法主类(mainApplicationClass )</p><p>initializers 将在 ConfigurableApplicationContext 的 refresh ⽅法之前调⽤，⽐如针对web应⽤来说，需要在 refresh 之前注册属性源或者激活指定的配置⽂件。</p><p>listeners 将在 AbstractApplicationContext 的 refresh() ⽅法中，先被注册到 IOC 容器中，IOC 容器中剩下的⾮懒加载的单例被实例化后，IOC 容器发布相应的事件，这些事件最终会调⽤与之相关联的 AplicationListener 的 onApplicationEvent ⽅法</p><p>可对照顶部的流程图和源码分析</p><h3 id="三、运⾏SpringApplication"><a href="#三、运⾏SpringApplication" class="headerlink" title="三、运⾏SpringApplication"></a>三、运⾏SpringApplication</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**创建并刷新应⽤上下⽂**/</span> <span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//spring-core包下的计时器类，在这⾥主要⽤来记录应⽤启动的耗时</span> <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">></span></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//系统配置设置为headless模式</span> <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过SpringFactoriesLoader⼯具类获取META-INF/spring.factories</span> <span class="token comment">//⽂件中SpringApplicationRunListeners接⼝的实现类，在这⾥是</span> <span class="token comment">//EventPublishingRunListener</span> <span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//⼴播ApplicationStartingEvent事件使应⽤中的ApplicationListener</span> <span class="token comment">//响应该事件</span> listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//准备应⽤环境，这⾥会发布ApplicationEnvironmentPreparedEvent事件</span>   <span class="token comment">//并将environment绑定到SpringApplication中</span>   <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//打印彩蛋</span>   <span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//根据成员变量webApplicationType创建应⽤上下⽂</span>   context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//准备上下⽂，⻅⽂章顶部流程图</span>   <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//刷新上下⽂，⻅⽂章顶部流程图</span>   <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//上下⽂后处理，空实现</span>   <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//计时停⽌</span>   stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//⼴播ApplicationStartedEvent事件使应⽤中的ApplicationListener</span>   <span class="token comment">//响应该事件</span>   listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//应⽤上下⽂中的ApplicationRunner,CommandLineRunner执⾏run⽅法</span>   <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//⼴播ApplicationReadyEvent事件使应⽤中的ApplicationListener</span>   <span class="token comment">//响应该事件 </span>   listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//返回应⽤上下⽂</span> <span class="token keyword">return</span> context<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 在启动过程中，SpringApplicationListener 在不同阶段通过调⽤⾃身的不同⽅法(如 starting()、 environmentPrepared() )发布相应事件，通知 ApplicationListener 进⾏响应。</p><p>2 refreshContext(context) ⽅法是构建 IOC 容器最复杂的⼀步，绝⼤多数 bean 的定义加载以及实例化都在这⼀步执⾏。包括但不限于BeanFactoryPostProcessor、BeanPostProcessor、 ApplicationEventMulticaster、@Controller, @Component 等注解的组件。</p><p>3 SpringFactoriesLoader ⼯具类，在 SpringApplication 的构造过程中、运⾏过程中都起到了极其重要的作⽤。SpringBoot 的⾃动化配置功能⼀个核⼼依赖点就在该类上，该类通过读取类路径下的 META-INF/spring.factories ⽂件获取各种各样的⼯⼚接⼝的实现类，通过反射获取这些类的类对象、构造⽅法，最终⽣成实例。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>1 SpringApplication 的构造过程中，配置了 SpringApplication 应⽤上下⽂的⼀些基本元素，如应⽤类型 webApplicationType、应⽤初始化器 ApplicationContextInitializer、应⽤监听器 ApplicationListener 等。这些元素在 SpringApplication 的执⾏ run() 过程中，都会在不同阶段发挥不同的作⽤。</p><p>2 SpringApplication 的执⾏ run() 过程中，⼀⽅⾯要初始化 IOC 容器(主要是 bean 的加载与初始化)， ⼀⽅⾯要在不同的阶段直接或间接回调 ApplicationListener 或 ApplicationRunner 等其他接⼝的⽅法。</p><p>3 SpringFactoriesLoader 是 SpringBoot ⾃动化配置功能极其关键的⼀环，它读取类路径下 META-INF/spring.factories ⽂件中⼯⼚接⼝的实现类，来获取各种各种的 Bean ⼯⼚实例，最终获取到⾃动化配置的bean。</p><h2 id="2-Bean⾃动装配原理"><a href="#2-Bean⾃动装配原理" class="headerlink" title="2. Bean⾃动装配原理"></a>2. Bean⾃动装配原理</h2><blockquote><p>SpringBoot ⼤量简化了配置。实际上这些配置还都存在，只是将⼀些不常⽤的配置隐藏了起来， 不需要我们像以往⼀样逐⼀配置，从⽽减少了配置量、提⾼了开发效率。</p></blockquote><h3 id="⼀、Bean⾃动装载的核⼼问题"><a href="#⼀、Bean⾃动装载的核⼼问题" class="headerlink" title="⼀、Bean⾃动装载的核⼼问题"></a>⼀、Bean⾃动装载的核⼼问题</h3><p>SpringBoot ⾥⾯的各种 Bean (类对象)能够实现⾃动装载，⾃动装载帮我们减少了 XML 的配置，和 ⼿动编码进⾏ Bean 的加载⼯作。从⽽极⼤程度上帮我们减少了配置量和代码量。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/KwrutW.png"></p><p><strong>要实现Bean的⾃动装载，需要解决两个问题</strong></p><ul><li>如何保证 Bean ⾃动装载的灵活性？这个问题通过配置⽂件来解决，在配置 A 情况下去装载 BeanY ；在配置B情况下去装载 BeanZ 。（通常情况下配置 A 和 B 会有默认值，来决定默认的装载⾏为，这样就不需要我们配置了，进⼀步减少配置量）</li><li>如何保证 Bean 装载的顺序性？当 BeanA 装载完成之后再去装载 BeanY ，BeanY 装载完成之后才去装载 BeanX。这个装载顺序问题由 @ConditionOnXXXXXXX 注解来解决。</li></ul><h3 id="⼆、全局配置⽂件"><a href="#⼆、全局配置⽂件" class="headerlink" title="⼆、全局配置⽂件"></a>⼆、全局配置⽂件</h3><p>SpringBoot 使⽤⼀个全局的配置⽂件，配置⽂件名是固定的：</p><ul><li>application.properties</li><li>application.yml</li></ul><p><strong>全局配置⽂件的作⽤</strong>：修改 SpringBoot ⾃动配置的默认值，通过配置来影响 SpringBoot ⾃动加载⾏为。</p><h3 id="三、配置加载原理源码解析"><a href="#三、配置加载原理源码解析" class="headerlink" title="三、配置加载原理源码解析"></a>三、配置加载原理源码解析</h3><p>所有的 SpringBoot 应⽤程序都是以 SpringApplication.run() 作为应⽤程序⼊⼝的。 </p><p>我们可以跟踪⼀下这个⽅法：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/NhnISi.png"></p><p>run⽅法传⼊了 <code>SpringApplication</code> 对象和⼀些运⾏期参数。</p><p>如图所示⽅法，可以看到是获得 SpringFactories 的实例，⽽它需要通过⼀个类叫：<code> SpringFactoriesLoader</code></p><p>这个类⾥⾯体现了 SpringBoot 加载配置⽂件的核⼼逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/AbhHd1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/hIlXTs.png"></p><p>SpringFactoriesLoader 类的主要作⽤是通过类路径下的 META-INF/spring.factories ⽂件获取⼯ ⼚类接⼝的实现类，初始化并保存在缓存中，以供 Springboot 启动过程中各个阶段的调⽤。Spring 的⾃动化配置功能，也与此息息相关。</p><p>从上图可以看到：</p><ul><li>先从 META-INF/spring.factories ⽂件夹下加载了 spring.factories ⽂件资源。</li><li>然后读取⽂件中的 ClassName 作为值放⼊ Properties 。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/dTdbpn.png"></p><p>然后通过反射机制，对spring.factories⾥⾯的类资源进⾏实例化。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Tk0gjT.png"></p><h3 id="四、-EnableAutoConfiguration-作⽤"><a href="#四、-EnableAutoConfiguration-作⽤" class="headerlink" title="四、@EnableAutoConfiguration 作⽤"></a>四、@EnableAutoConfiguration 作⽤</h3><p>SpringBoot ⼊⼝启动类使⽤了 SpringBootApplication ，实际上就是开启了⾃动配置功能 @EnableAutoConfiguration 。</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/zyRXCl.png"></p><p>SpringFactoriesLoader 会以 @EnableAutoConfiguration 的包名和类名org.springframework.boot.autoconfigure.EnableAutoConfiguration 为 Key 查找 spring.factories ⽂件，并将 value 中的类名实例化加载到 Spring Boot 应⽤中。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/BxwT6K.png"></p><p>spring.factories ⽂件中的每⼀⾏都是⼀个⾃动装配类。</p><h3 id="五、Bean的⾃动装配实现原理简述"><a href="#五、Bean的⾃动装配实现原理简述" class="headerlink" title="五、Bean的⾃动装配实现原理简述"></a>五、Bean的⾃动装配实现原理简述</h3><p>每⼀个⾃动配置类进⾏⾃动配置功能（ spring.factories 中的每⼀⾏对应的类）,我们以 HttpEncodingAutoConfiguration 为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加载application全局配置⽂件内的部分配置到HttpEncodingProperties⾥⾯</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">HttpEncodingProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//当web容器类型是servlet的时候执⾏本类中的⾃动装配代码</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token comment">//当有⼀个CharacterEncodingFilter的这样⼀个类的字节码⽂件时时执⾏本类中的⾃动装配代码</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//当spring.http.encoding配置值为enabled的时候执⾏本类中的⾃动装配代码</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span>    value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"enabled"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token comment">//如果application配置⽂件⾥⾯不配置，默认为true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpEncodingProperties</span> properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span><span class="token class-name">HttpEncodingProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token comment">//当没有CharacterEncodingFilter这个Bean就实例化CharacterEncodingFilter为⼀个bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> <span class="token class-name">CharacterEncodingFilter</span> <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CharacterEncodingFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpEncodingProperties<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpEncodingProperties<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HttpEncodingAutoConfiguration<span class="token punctuation">.</span>LocaleCharsetMappingsCustomizer</span> <span class="token function">localeCharsetMappingsCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpEncodingAutoConfiguration<span class="token punctuation">.</span>LocaleCharsetMappingsCustomizer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>       <span class="token comment">//此处省略与⾃动加载⽆关的代码：HttpEncode的逻辑及其他</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在配置类加载过程中，⼤量的使⽤到了条件加载注解：</p><table><thead><tr><th>条件注解</th><th>使⽤说明</th></tr></thead><tbody><tr><td>@ConditionalOnClass</td><td>classpath中存在该类字节码⽂件时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnMissingClass</td><td>classpath中不存在该类字节码⽂件时，才执⾏实例化⽅法（不存在A的时候去初始化B）</td></tr><tr><td>@ConditionalOnBean</td><td>DI容器中存在该类型Bean时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnMissingBean</td><td>DI容器中不存在该类型Bean时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>DI容器中该类型Bean只有⼀个或@Primary的只有⼀个时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnExpression</td><td>SpEL表达式结果为true时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnProperty</td><td>参数设置或者值⼀致时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnResource</td><td>指定的⽂件存在时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnJndi</td><td>指定的JNDI存在时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnJava</td><td>指定的Java版本存在时，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnWebApplication</td><td>Web应⽤环境下，才执⾏实例化⽅法或将类实例化</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>⾮Web应⽤环境下，才执⾏实例化⽅法或将类实例化</td></tr></tbody></table><blockquote><p>这个实现原理实际上就是⼀个⾃定义 spring-boot-starter 的实现原理，在以上的⾃动装配过程中，依赖于 HttpEncodingProperties的⾃定义属性，我们后⾯会讲如何读取⾃定义配置属性。</p></blockquote><h2 id="3-详解YAML语法及占位符语法"><a href="#3-详解YAML语法及占位符语法" class="headerlink" title="3. 详解YAML语法及占位符语法"></a>3. 详解YAML语法及占位符语法</h2><p>我们已经介绍过 application.yml 是我们项⽬⾥⾯的全局配置⽂件，在全局的配置⽂件中我们可以通过配置来改变程序的加载⾏为和运⾏⾏为。</p><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是⼀种标记语⾔）的递归缩写。表明其不是⼀种标记语⾔（ xml、html 是标记语⾔）。它是⼀种数据序列化语⾔，通过⼀定的格式表示数据结构。由于其良好的数据结构表现能⼒，既⽅便程序处理，也⽅便程序员阅读，所以其常常被⽤于书写配置⽂件。那么它能够表示哪些数据结构呢？</p><h3 id="⼀、设计⼀个YAML数据结构"><a href="#⼀、设计⼀个YAML数据结构" class="headerlink" title="⼀、设计⼀个YAML数据结构"></a>⼀、设计⼀个YAML数据结构</h3><p>⾸先我们提出这样⼀个需求：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">#   1. ⼀个家庭有爸爸、妈妈、孩⼦。#   2. 这个家庭有⼀个名字（family-name）叫做“happy family”#   3. 爸爸有名字(name)和年龄（age）两个属性#   4. 妈妈有两个别名#   5. 孩⼦除了名字(name)和年龄（age）两个属性，还有⼀个friends的集合#   6. 每个friend有两个属性：hobby(爱好)和性别(gender)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上⾯的数据结构⽤yaml该如何表示呢？</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">family</span><span class="token punctuation">:</span> <span class="token key atrule">family-name</span><span class="token punctuation">:</span> <span class="token string">"happy family"</span> <span class="token key atrule">father</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> tom   <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">38</span> <span class="token key atrule">mother</span><span class="token punctuation">:</span>   <span class="token key atrule">alias</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> rose     <span class="token punctuation">-</span> alice <span class="token key atrule">child</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> jack   <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">5</span>   <span class="token key atrule">friends</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">hobby</span><span class="token punctuation">:</span> football       <span class="token key atrule">gender</span><span class="token punctuation">:</span> male     <span class="token punctuation">-</span> <span class="token key atrule">hobby</span><span class="token punctuation">:</span> sing       <span class="token key atrule">gender</span><span class="token punctuation">:</span> female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者 friends的部分也可以写成:</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">friends</span><span class="token punctuation">:</span><span class="token key attr-name">     -</span> <span class="token value attr-value">&#123;hobby: football,sex:  male&#125;</span><span class="token key attr-name">     -</span> <span class="token value attr-value">&#123;hobby: basketball,sex: female&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="规则1：字符串的单引号与双引号"><a href="#规则1：字符串的单引号与双引号" class="headerlink" title="规则1：字符串的单引号与双引号"></a>规则1：字符串的单引号与双引号</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/4z4SWv.png"></p><ul><li>双引号: 会转义字符串⾥⾯的特殊字符，如下⾯\n被转义为换⾏： name: “zhangsan \n lisi”：输出：zhangsan 换⾏ lisi</li><li>单引号: 不会转义特殊字符，特殊字符最终只是作为⼀个普通的字符串数据，如：name: ‘zhangsan \n lisi’：输出：zhangsan \n lisi</li></ul><h4 id="规则2：⽀持松散的语法"><a href="#规则2：⽀持松散的语法" class="headerlink" title="规则2：⽀持松散的语法"></a>规则2：⽀持松散的语法</h4><p>在SpringBoot应⽤中YAML数据格式<strong>⽀持松散的绑定语法</strong>，也就是说下⾯的三种key都是⼀样的。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">family-name</span> <span class="token punctuation">=</span> <span class="token value attr-value">familyName  = family_name</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>但是不绝对，通常建议使⽤<strong>中划线分隔</strong>的这种语法。</p></blockquote><h3 id="⼆、配置⽂件占位符"><a href="#⼆、配置⽂件占位符" class="headerlink" title="⼆、配置⽂件占位符"></a>⼆、配置⽂件占位符</h3><p>SpringBoot配置⽂件⽀持占位符，如：为 person.age 设置⼀个随机数</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span> <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-随机数占位符"><a href="#1-随机数占位符" class="headerlink" title="1 随机数占位符"></a>1 随机数占位符</h4><ul><li><code>$&#123;random.value&#125;</code> - 类似uuid的随机数，没有”-“连接</li><li><code>$&#123;random.int&#125;</code>- 随机取整型范围内的⼀个值</li><li><code>$&#123;random.long&#125;</code> - 随机取⻓整型范围内的⼀个值</li><li><code>$&#123;random.long(100,200)&#125;</code> - 随机⽣成⻓整型100-200范围内的⼀个值</li><li><code>$&#123;random.uuid&#125;</code> - ⽣成⼀个uuid，有短杠连接</li><li><code>$&#123;random.int(10)&#125;</code> - 随机⽣成⼀个10以内的数</li><li><code>$&#123;random.int(100,200)&#125;</code> - 随机⽣成⼀个100-200 范围以内的数</li></ul><h4 id="2-默认值"><a href="#2-默认值" class="headerlink" title="2 默认值"></a>2 默认值</h4><p>占位符获取之前配置的值，如果没有可以是⽤“冒号”指定默认值。 </p><p>格式如：xxxxx.yyyy 是属性层级及名称，如果该属性不存在，冒号后⾯填写默认值。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">$<span class="token punctuation">&#123;</span>xxxxx.yyyy<span class="token punctuation">:</span>默认值<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⽐如为配置 father.best 属性，如果 family.father.name 存在则 <code>father.best=$&#123;family.fath er.name&#125;</code> , family.father.name 这个配置不存在，则取值 <code>father.best=tom</code></p><h2 id="4-YAML配置绑定变量两种⽅式"><a href="#4-YAML配置绑定变量两种⽅式" class="headerlink" title="4. YAML配置绑定变量两种⽅式"></a>4. YAML配置绑定变量两种⽅式</h2><p>YAML语法可以清晰地表达类、成员变量、集合以及它们之间的嵌套关系。 </p><p>但如果配置只停留在配置⽂件⾥⾯是没有意义的，我们需要将配置绑定到内存变量上，从⽽⽤变量值去影响程序的运⾏。 </p><p>接下来我们来学习<strong>配置与变量绑定</strong>的两种⽅法。</p><h3 id="⼀、使⽤-Value获取配置值"><a href="#⼀、使⽤-Value获取配置值" class="headerlink" title="⼀、使⽤@Value获取配置值"></a>⼀、使⽤@Value获取配置值</h3><p>通过 @Value 注解将 family.family-name 属性的值绑定到 familyName 成员变量上⾯。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Family</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;family.family-name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> familyName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是这么简单，完了！</p><h3 id="⼆、使⽤-ConfigurationProperties获取配置值"><a href="#⼆、使⽤-ConfigurationProperties获取配置值" class="headerlink" title="⼆、使⽤@ConfigurationProperties获取配置值"></a>⼆、使⽤@ConfigurationProperties获取配置值</h3><p>下⾯是⽤于接收上⼀节中 yml 配置的 Java 实体类，看看你⾃⼰能不能根据 yml 的嵌套结构，写出来对应的 Java 实体类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//   1. ⼀个家庭有爸爸、妈妈、孩⼦。</span><span class="token comment">//   2. 这个家庭有⼀个名字（family-name）叫做“happy family”</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"family"</span><span class="token punctuation">)</span>   <span class="token comment">//表示配置的整体前缀</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Family</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//成员变量名称要和yml配置项key⼀⼀对应</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> familyName<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">Father</span> father<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Mother</span> mother<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Child</span> child<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3. 爸爸有名字(name)和年龄（age）两个属性</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4. 妈妈有两个别名</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mother</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> alias<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//5. 孩⼦除了名字(name)和年龄（age）两个属性，还有⼀个friends的集合</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Friend</span><span class="token punctuation">></span></span> friends<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 6. 每个friend有两个属性：hobby(爱好)和性别(gender)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Friend</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试⽤例"><a href="#三、测试⽤例" class="headerlink" title="三、测试⽤例"></a>三、测试⽤例</h3><p>写⼀个测试⽤例测⼀下，看看 yml 配置属性是否真的绑定到了类对象的成员变量上⾯。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// @RunWith(SpringRunner.class) Junit4</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//Junit5</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomYamlTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>     <span class="token class-name">Family</span> family<span class="token punctuation">;</span>         <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>family<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果，不能有为 null 的输出字段，如果有表示你的 Java 实体数据结构写得不正确:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Family(familyName=happy family<span class="token punctuation">,</span> father=Father(name=tom<span class="token punctuation">,</span> age=<span class="token number">38</span>)<span class="token punctuation">,</span>mother=Mother(alias=<span class="token punctuation">[</span>rose<span class="token punctuation">,</span> alice<span class="token punctuation">]</span>)<span class="token punctuation">,</span>child=Child(name=jack<span class="token punctuation">,</span> age=<span class="token number">5</span><span class="token punctuation">,</span> friends=<span class="token punctuation">[</span>Friend(hobby=football<span class="token punctuation">,</span>gender=male)<span class="token punctuation">,</span> Friend(hobby=sing<span class="token punctuation">,</span> gender=female)<span class="token punctuation">]</span>))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、⽐较⼀下⼆者"><a href="#四、⽐较⼀下⼆者" class="headerlink" title="四、⽐较⼀下⼆者"></a>四、⽐较⼀下⼆者</h3><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注⼊属性到java类</td><td>⼀个个属性指定注⼊</td></tr><tr><td>松散语法绑定</td><td>⽀持</td><td>不⽀持</td></tr><tr><td>复杂数据类型(对象、数组)</td><td>⽀持</td><td>不⽀持</td></tr><tr><td>JSR303数据校验</td><td>⽀持</td><td>不⽀持</td></tr><tr><td>SpEL</td><td>不⽀持</td><td>⽀持</td></tr></tbody></table><p>数据校验和 SPEL 的内容，我们后⾯学习。</p><h2 id="5-配置属性值数据绑定校验"><a href="#5-配置属性值数据绑定校验" class="headerlink" title="5. 配置属性值数据绑定校验"></a>5. 配置属性值数据绑定校验</h2><h3 id="⼀、为什么要对配置属性值校验"><a href="#⼀、为什么要对配置属性值校验" class="headerlink" title="⼀、为什么要对配置属性值校验"></a>⼀、为什么要对配置属性值校验</h3><blockquote><p>配置⽂件是需要开发⼈员⼿动来修改的，只要是⼈为参与就会有出错的可能。为了避免⼈为配置出错的可能，我们需要对配置属性值做校验。</p></blockquote><p>⽐如：</p><ul><li>针对数据库密码配置：需要限定最⼩⻓度或者复杂度限制</li><li>针对系统对外发邮件，邮件发送⽅的邮箱地址配置：字符串配置要符合⼀定的邮件正则表达式规则</li><li>针对某些不能为空的配置：开发⼈员有可能忘了为它赋值等等场景</li></ul><p>我们不能等到程序上线之后，才发现相关的配置错误。所以<strong>通常对配置属性与类对象的成员变量绑定的时候，就要加上⼀些校验规则。如果配置值不符合校验规则，在应⽤程序在启动的时候就会抛出异常。</strong></p><h3 id="⼆、如何对绑定的属性值进⾏校验"><a href="#⼆、如何对绑定的属性值进⾏校验" class="headerlink" title="⼆、如何对绑定的属性值进⾏校验"></a>⼆、如何对绑定的属性值进⾏校验</h3><blockquote><p>我们希望对之前定义的family类⾥⾯爸爸的年龄进⾏校验。让其不能⼩于22岁，否则就是错误配置。那我们该怎么做呢？</p></blockquote><p><strong>在需要校验的属性装配类上加@Validated注解</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Validated</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"family"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Family</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>校验⽗亲的年龄，必须⼤于22岁</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"必须年满22岁！"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>校验 familyName ，⻓度必须在指定范围内</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"家庭名⻓度必须位于5到20之间"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> familyName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些校验规则注解是在 <strong>JSR 303(java)</strong> 规范中定义的，但是 JSR 303 只是⼀个规范，⽬前通常都是使⽤ <strong>hibernate-validator</strong> 进⾏统⼀参数校验，hibernate-validator是对JSR 303规范的实现。</p><blockquote><p>注意：当你使⽤注解的时候，如果 org.hibernate.validator.constraints 包和 javax.validation.constraints 包同时存在某个校验注解，要 import 使⽤ org.hibernate.validator.constraints 包。</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.2.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在之前的 SpringBoot 版本中，hibernate-validator 是作为默认引⼊的 Web 开发的集成 package， 但是在新版的 SpringBoot 已经不是默认引⼊的了，所以需要通过上⾯的 maven 坐标单独引⼊。</p><h3 id="三、校验失败异常"><a href="#三、校验失败异常" class="headerlink" title="三、校验失败异常"></a>三、校验失败异常</h3><p>如果我们修改 family.father.age=18 ,也就是说不满⾜最⼩值是22的这样⼀个校验规则。 校验失败，会有如下异常。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/qEMd8H.png"></p><h3 id="四、附录说明"><a href="#四、附录说明" class="headerlink" title="四、附录说明"></a>四、附录说明</h3><p>Hibernate Validator 是 Bean Validation 的参考实现，它提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有⼀些附加的 constraint。 </p><p>在⽇常开发中，Hibernate Validator 经常⽤来验证 bean 的字段，基于注解，⽅便快捷⾼效。</p><h4 id="1-Bean-Validation-中内置的-constraint"><a href="#1-Bean-Validation-中内置的-constraint" class="headerlink" title="1. Bean Validation 中内置的 constraint"></a>1. Bean Validation 中内置的 constraint</h4><table><thead><tr><th>注解</th><th>作⽤</th></tr></thead><tbody><tr><td>@Valid</td><td>被注释的元素是⼀个对象，需要检查此对象的所有字段值</td></tr><tr><td>@Null</td><td>被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为 false</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼤于等于指定的最⼩值</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼩于等于指定的最⼤值</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼤于等于指定的最⼩值</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼩于等于指定的最⼤值</td></tr><tr><td>@Size(max, min)</td><td>被注释的元素的⼤⼩必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td>被注释的元素必须是⼀个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注释的元素必须是⼀个过去的⽇期</td></tr><tr><td>@Future</td><td>被注释的元素必须是⼀个将来的⽇期</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td>@Email</td><td>被注释的元素必须是电⼦邮箱地址</td></tr></tbody></table><h4 id="2-Hibernate-Validator-附加的-constraint"><a href="#2-Hibernate-Validator-附加的-constraint" class="headerlink" title="2. Hibernate Validator 附加的 constraint"></a>2. Hibernate Validator 附加的 constraint</h4><table><thead><tr><th>注释</th><th>作用</th></tr></thead><tbody><tr><td>@NotBlank</td><td>被注释的字符串的必须⾮空</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串的必须⾮空</td></tr><tr><td>@Length(min=, max=)</td><td>被注释的字符串的⼤⼩必须在指定的范围内</td></tr><tr><td>@Range(min=, max=)</td><td>被注释的元素必须在合适的范围内</td></tr><tr><td>@URL(protocol=,host=, port=, regexp=, flags=)</td><td>被注释的字符串必须是⼀个有效的 url</td></tr><tr><td>@CreditCardNumber</td><td>被注释的字符串必须通过 Luhn 校验算法，银⾏卡，信⽤卡等号码⼀般都⽤ Luhn 计算合法性</td></tr><tr><td>@ScriptAssert(lang=, script=, alias=)</td><td>要有 Java Scripting API 即 JSR 223 (“Scripting for the JavaTM Platform”)的实现</td></tr><tr><td>@SafeHtml(whitelistType=, additionalTags=)</td><td>classpath中要有 jsoup 包</td></tr></tbody></table><p>hibernate 补充的注解中，最后3个不常⽤，可忽略。</p><p>注意区分⼀下 @NotNull @NotEmpty @NotBlank 3个注解的区别：</p><p><strong>@NotNull</strong> 任何对象的 value 不能为null </p><p><strong>@NotEmpty</strong> 集合对象的元素不为0，即集合不为空，也可以⽤于字符串不为 null </p><p><strong>@NotBlank</strong> 只能⽤于字符串不为 null ，并且字符串 trim() 以后 length 要⼤于0</p><blockquote><p>注意：HTTP请求的校验，需要在 Controller 类头部加上 <strong>@Validated</strong> 注解</p></blockquote><h2 id="6-加载额外配置⽂件的两种⽅式"><a href="#6-加载额外配置⽂件的两种⽅式" class="headerlink" title="6. 加载额外配置⽂件的两种⽅式"></a>6. 加载额外配置⽂件的两种⽅式</h2><h3 id="⼀、为什么要加载额外配置⽂件"><a href="#⼀、为什么要加载额外配置⽂件" class="headerlink" title="⼀、为什么要加载额外配置⽂件"></a>⼀、为什么要加载额外配置⽂件</h3><blockquote><p>有⼀些⽼的项⽬⾥⾯的 jar 包并未主动去与 SpringBoot 融合，很多jar包都有⾃⼰的配置⽂件。如 果我们在 SpringBoot 项⽬中使⽤这些 jar 包就必须得使⽤它们的配置⽂件，那就⾯临⼀个问题： <strong>SpringBoot 项⽬默认只有⼀个全局配置⽂件：application.yml 或application.properties 。该 如何加载额外的配置⽂件？</strong></p></blockquote><h3 id="⼆、使⽤-PropertySource加载⾃定义yml或properties⽂件"><a href="#⼆、使⽤-PropertySource加载⾃定义yml或properties⽂件" class="headerlink" title="⼆、使⽤@PropertySource加载⾃定义yml或properties⽂件"></a>⼆、使⽤@PropertySource加载⾃定义yml或properties⽂件</h3><h4 id="1-properties配置⽂件加载"><a href="#1-properties配置⽂件加载" class="headerlink" title="1. properties配置⽂件加载"></a>1. properties配置⽂件加载</h4><p>resouces ⽬录新建 family.properties</p><p><a href="https://www.toyaml.com/index.html">在线yml和properties互转</a></p><p>将之前的 family 相关的 yml 内容粘贴，转换后的内容</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">family.family-name</span><span class="token punctuation">=</span><span class="token value attr-value">happy family</span><span class="token key attr-name">family.father.name</span><span class="token punctuation">=</span><span class="token value attr-value">tom</span><span class="token key attr-name">family.father.age</span><span class="token punctuation">=</span><span class="token value attr-value">38</span><span class="token key attr-name">family.mother.alias[0]</span><span class="token punctuation">=</span><span class="token value attr-value">rose</span><span class="token key attr-name">family.mother.alias[1]</span><span class="token punctuation">=</span><span class="token value attr-value">alice</span><span class="token key attr-name">family.child.name</span><span class="token punctuation">=</span><span class="token value attr-value">jack</span><span class="token key attr-name">family.child.age</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;random.int(5,16)&#125;</span><span class="token key attr-name">family.child.friends[0].hobby</span><span class="token punctuation">=</span><span class="token value attr-value">play</span><span class="token key attr-name">family.child.friends[0].gender</span><span class="token punctuation">=</span><span class="token value attr-value">male</span><span class="token key attr-name">family.child.friends[1].hobby</span><span class="token punctuation">=</span><span class="token value attr-value">sing</span><span class="token key attr-name">family.child.friends[1].gender</span><span class="token punctuation">=</span><span class="token value attr-value">female</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>family.properties</code> 这种格式的配置⽂件，在之前的代码基础之上，加上如下的注解就可以将⽂件中的配置属性进⾏加载。</p><p><font color=red><strong>注意在application.yml中把family相关的配置删掉</strong></font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"family"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:family.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Family</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⼀样可以测试通过</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/TVTBzH.png"></p><h4 id="2-yaml配置⽂件加载"><a href="#2-yaml配置⽂件加载" class="headerlink" title="2. yaml配置⽂件加载"></a>2. yaml配置⽂件加载</h4><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#boot-features-external-config-yaml-shortcomings">spring 官⽅⽂档明确说明不⽀持使⽤@PropertySource加载YAML配置⽂件</a></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/JyQZt9.png"></p><ul><li>新建⼀个配置⽂件 family.yml，⽤来模拟第三⽅ jar 包的额外配置⽂件（⾮ application 配置⽂件）。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">family</span><span class="token punctuation">:</span> <span class="token key atrule">family-name</span><span class="token punctuation">:</span> happy family <span class="token key atrule">father</span><span class="token punctuation">:</span>   <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">38</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> tom <span class="token key atrule">mother</span><span class="token punctuation">:</span>   <span class="token key atrule">alias</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> rose     <span class="token punctuation">-</span> alice   <span class="token key atrule">child</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> jack   <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">6</span>   <span class="token key atrule">friends</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">gender</span><span class="token punctuation">:</span> male       <span class="token key atrule">hobby</span><span class="token punctuation">:</span> play     <span class="token punctuation">-</span> <span class="token key atrule">gender</span><span class="token punctuation">:</span> female       <span class="token key atrule">hobby</span><span class="token punctuation">:</span> sing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DefaultPropertySourceFactory 是进⾏配置⽂件加载的⼯⼚类。</li><li>尽管其默认不⽀持读取 YAML 格式外部配置⽂件，但是我们可以通过继承 DefaultPropertySourceFactory ，然后对它的createPropertySource 进⾏⼀下改造。就可以 实现 YAML 的“额外”配置⽂件加载。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MixPropertySourceFactory</span> <span class="token keyword">extends</span><span class="token class-name">DefaultPropertySourceFactory</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">createPropertySource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sourceName <span class="token operator">=</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name <span class="token operator">:</span> resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceName <span class="token operator">!=</span> <span class="token keyword">null</span>          <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".yml"</span><span class="token punctuation">)</span> <span class="token operator">||</span> sourceName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".yaml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Properties</span> propertiesFromYaml <span class="token operator">=</span> <span class="token function">loadYml</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//将YML配置转成Properties之后，再⽤PropertiesPropertySource绑定</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesPropertySource</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">,</span> propertiesFromYaml<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createPropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//将YML格式的配置转成Properties配置</span>  <span class="token keyword">private</span> <span class="token class-name">Properties</span> <span class="token function">loadYml</span><span class="token punctuation">(</span><span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>    <span class="token class-name">YamlPropertiesFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlPropertiesFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-练习：仿做⾃定义User、Book的属性绑定校验"><a href="#3-练习：仿做⾃定义User、Book的属性绑定校验" class="headerlink" title="3. 练习：仿做⾃定义User、Book的属性绑定校验"></a>3. 练习：仿做⾃定义User、Book的属性绑定校验</h4><h3 id="三、使⽤-ImportResource加载Spring的xml配置⽂件"><a href="#三、使⽤-ImportResource加载Spring的xml配置⽂件" class="headerlink" title="三、使⽤@ImportResource加载Spring的xml配置⽂件"></a>三、使⽤@ImportResource加载Spring的xml配置⽂件</h3><p>新建⼀个类，top.syhan.boot.config.service.TestBeanService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBeanService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在没有 Spring 注解的时代，spring 的相关配置都是通过 xml 来完成的。</p><p>resource ⽬录新建 <strong>beans.xml</strong></p><p>下⾯的 XML 配置的含义是：将 top.syhan.boot.config.service.TestBeanService ⼀个带属性值的实例注⼊到 Spring 上下⽂环境中。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testBeanService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.boot.config.service.TestBeanService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SpringBoot<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试⽤例，测试 Spring 上下⽂环境中是否有 testBeanService 这样⼀个 bean，有的话表示 xml 配置⽂件已经⽣效，成功将testBeanService 实例化并注⼊到 Spring 上下⽂环境中:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestBeanServiceTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注⼊Spring上下⽂环境</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ConfigurableApplicationContext</span> ioc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLoadService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//测试Spring上下⽂环境中是否有testBeanService这样⼀个bean，有的话表示xml配置⽂件⽣效</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"testBeanService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TestBeanService</span> testBeanService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TestBeanService</span><span class="token punctuation">)</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testBeanService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>testBeanService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"SpringBoot"</span><span class="token punctuation">,</span> testBeanService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为还没使⽤ @ImportResource 加载 beans.xml，此时执⾏测试⽤例会失败，<strong>表示 beans.xml 配置⽂件并未加载</strong>，所以没有testBeanService 的存在。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/O6kYVx.png"></p><ul><li>在 spring boot 应⽤⼊⼝启动类上加上注解</li></ul><p><code>@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;) </code>，该注解⽤来加载 Spring XML 配置⽂件。</p><p>此时再测，测试可以通过，beans.xml 配置⽂件被正确加载，并输出了 testBeanService 实例的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/aeDqGC.png"></p><h2 id="7-使⽤SpEL表达式绑定配置项"><a href="#7-使⽤SpEL表达式绑定配置项" class="headerlink" title="7. 使⽤SpEL表达式绑定配置项"></a>7. 使⽤SpEL表达式绑定配置项</h2><blockquote><p>Spring Expression Language (SpEL) 是⼀种功能⾮常强⼤的表达式语⾔，可⽤于在运⾏时查询和操作对象。 SpEL 书写在 XML 配置⽂件或者 Annotation 注解上，在 Spring Bean 的创建过程中 ⽣效。</p></blockquote><p>SpEL 能⽤在很多的场景下，现在给⼤家介绍⼀下在 Spring Boot 中如何使⽤ SpEL 表达式读取配置属性。</p><h3 id="⼀、使⽤SpEL表达式绑定字符串集合"><a href="#⼀、使⽤SpEL表达式绑定字符串集合" class="headerlink" title="⼀、使⽤SpEL表达式绑定字符串集合"></a>⼀、使⽤SpEL表达式绑定字符串集合</h3><p>创建⼀个配置⽂件employee.properties,内容如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">employee.names</span><span class="token punctuation">=</span><span class="token value attr-value">james,curry,zhangsan,姚明</span><span class="token key attr-name">employee.type</span><span class="token punctuation">=</span><span class="token value attr-value">教练,球员,经理</span><span class="token key attr-name">employee.age</span><span class="token punctuation">=</span><span class="token value attr-value">&#123;one:'27', two : '35', three : '34', four: '26'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>上⽂中 names 和 type 属性分别代表雇员 employee 的名字和分类,是字符串类型属性</li><li>age 属性代表雇员的年龄，是⼀组键值对、类对象数据结构</li></ul><p>创建⼀个配置类 <code>Employee</code> ，代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"employeeProperties"</span><span class="token punctuation">,</span>        value <span class="token operator">=</span> <span class="token string">"classpath:employee.properties"</span><span class="token punctuation">,</span>        encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/**     * 使⽤SpEL读取employee.properties配置⽂件     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;'$&#123;employee.names&#125;'.split(',')&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> employeeNames<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@Value 注解和 @PropertySource 注解参考前⾯的学习内容。</li></ul><h3 id="⼆、测试⽤例"><a href="#⼆、测试⽤例" class="headerlink" title="⼆、测试⽤例"></a>⼆、测试⽤例</h3><p>使⽤如下测试⽤例，将属性值绑定到 Employee 类对象上，并将其打印</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//@RunWith(SpringRunner.class)   //Junit4开发者使⽤这个注解</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span>DEFINED_PORT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueBindTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">Employee</span> employee<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueBindTests2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如图所示，说明使⽤ SpEL 读取 employee.properties 配置⽂件，并绑定属性值到 Employee 对象⽣效。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/5lsa1r.png"></p><p>上⾯的例⼦中，我们使⽤ SpEL 表达式读取了employee.names 属性，并将其从字符串属性，以逗号为分隔符转换为 List 类型。属性值注⼊完成之后，employeeNames=[james, curry, zhangsan, 姚明]</p><h3 id="三、SpEL结合-Value注解读取配置⽂件属性–更多示例"><a href="#三、SpEL结合-Value注解读取配置⽂件属性–更多示例" class="headerlink" title="三、SpEL结合@Value注解读取配置⽂件属性–更多示例"></a>三、SpEL结合@Value注解读取配置⽂件属性–更多示例</h3><ul><li>假如我们需要获取第⼀位（数组下标从0开始）雇员的姓名，可以使⽤如下的 SpEL 表达式：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span> <span class="token punctuation">(</span><span class="token string">"#&#123;'$&#123;employee.names&#125;'.split(',')[0]&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> firstEmployeeName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>属性值注⼊完成之后，firstEmployeeName=‘’james‘’</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/gd82b8.png"></p><ul><li>我们还可以使⽤ @Value 注解将键值对、类对象的数据结构转换为 Java 的 Map 数据类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span> <span class="token punctuation">(</span><span class="token string">"#&#123;$&#123;employee.age&#125;&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> employeeAge<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>属性值注⼊完成之后，employeeAge={one=27, two=35, three=34, four=26}</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/afKMtO.png"></p><ul><li>假如我们需要根据 Map 的 Key 获取 Value 属性值，可以使⽤如下的 SpEL 表达式：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span> <span class="token punctuation">(</span><span class="token string">"#&#123;$&#123;employee.age&#125;.two&#125;"</span><span class="token punctuation">)</span><span class="token comment">// @Value ("#&#123;$&#123;employee.age&#125;['two']&#125;") //这样写也可以</span><span class="token keyword">private</span> <span class="token class-name">String</span> employeeAgeTwo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>属性值注⼊完成之后，employeeAgeTwo=35</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/1A7IUl.png"></p><ul><li>如果我们不确定，Map 中的某个 key 是否存在，可以使⽤如下的 SpEL 表达式。如果 key 存在就获取对应的 value ，如果不存在就获得默认值30。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;$&#123;employee.age&#125;['three'] != null ? $&#123;employee.age&#125; ['three']: 30&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> ageWithDefaultValue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>属性值注⼊完成之后，ageWithDefaultValue=31</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/XhsTLF.png"></p><h3 id="四、SpEL结合-Value注解读取系统环境变量"><a href="#四、SpEL结合-Value注解读取系统环境变量" class="headerlink" title="四、SpEL结合 @Value注解读取系统环境变量"></a>四、SpEL结合 @Value注解读取系统环境变量</h3><p>可以使⽤ SpEL 表达式读取系统环境变量，示例：获取 JAVA_HOME ⽬录：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span> <span class="token punctuation">(</span><span class="token string">"#&#123;systemProperties['java.home']&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> javaHome<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同理，可以获取系统⽤户⼯作⽬录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span> <span class="token punctuation">(</span><span class="token string">"#&#123;systemProperties['user.dir']&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> userDir<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>运⾏结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/X7YnLb.png"></p><p>当然，除了以上在 Spring Boot 中使⽤ SpEL 的常⽤⽤法，SpEL 还可以完成算术运算、逻辑运算、 正则匹配运算、条件运算等功能，建议⼤家参照官⽅⽂档学习。</p><p>更多内容可以参考：<a href="https://docs.spring.io/spring/docs/4.3.10.RELEASE/springframework-reference/html/expressions.html">https://docs.spring.io/spring/docs/4.3.10.RELEASE/springframework-reference/html/expressions.html</a></p><h3 id="五、读取properties⽂件中⽂乱码问题的解决"><a href="#五、读取properties⽂件中⽂乱码问题的解决" class="headerlink" title="五、读取properties⽂件中⽂乱码问题的解决"></a>五、读取properties⽂件中⽂乱码问题的解决</h3><p>File-&gt;settings-&gt;File Encoding-&gt;图所示选项及勾选</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/t41iNL.png"></p><p>使⽤ PropertySource 注解时指定 encoding</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/wFzE2w.png"></p><h2 id="8-profile不同环境使⽤不同配置"><a href="#8-profile不同环境使⽤不同配置" class="headerlink" title="8. profile不同环境使⽤不同配置"></a>8. profile不同环境使⽤不同配置</h2><h3 id="⼀、配置⽂件规划"><a href="#⼀、配置⽂件规划" class="headerlink" title="⼀、配置⽂件规划"></a>⼀、配置⽂件规划</h3><p>我们开发的服务通常会部署在不同的环境中，例如开发环境、测试环境，⽣产环境等，⽽不同环境需要不同的配置。 </p><p>最典型的场景就是在不同的环境下需要连接不同的数据库，需要使⽤不同的数据库配置。 我们期待实现的配置效果是：</p><ul><li>减少配置修改次数</li><li>⽅便环境配置切换</li></ul><p>SpringBoot 默认的配置⽂件是 application.properties(或yml)。那么如何实现不同的环境使⽤不同的配置⽂件呢？⽐较好的做法是<strong>为不同的环境定义不同的配置⽂件</strong>。</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/PQDUVD.png"></p><p>全局配置⽂件:application.yml </p><p>开发环境配置⽂件：application-dev.yml </p><p>测试环境配置⽂件：application-test.yml </p><p>⽣产环境配置⽂件：application-prod.yml</p><h3 id="⼆、切换环境的⽅式"><a href="#⼆、切换环境的⽅式" class="headerlink" title="⼆、切换环境的⽅式"></a>⼆、切换环境的⽅式</h3><h4 id="1-通过配置application-yml"><a href="#1-通过配置application-yml" class="headerlink" title="1. 通过配置application.yml"></a>1. 通过配置application.yml</h4><p>application.yml 是默认使⽤的配置⽂件，在其中通过 spring.profiles.active 设置使⽤哪⼀个配置⽂件，下⾯代码表示使⽤ application-prod.yml 配置，如果 application-prod.yml 和 application.yml 配置了相同的配置，⽐如都配置了运⾏端⼝，那 application-prod.yml 的优先级更⾼。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#需要使⽤的配置⽂件</span><span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">profiles</span><span class="token punctuation">:</span>   <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-VM-options、Program-arguments、Active-Profile"><a href="#2-VM-options、Program-arguments、Active-Profile" class="headerlink" title="2. VM options、Program arguments、Active Profile"></a>2. VM options、Program arguments、Active Profile</h4><ul><li>VM options 设置启动参数 -Dspring.profiles.active=prod</li><li>Program arguments 设置 –spring.profiles.active=prod</li><li>Active Profile 设置 prod</li></ul><p><strong>这三个参数不要⼀起设置</strong>，会引起冲突，选⼀种即可，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/gXnuEH.png"></p><h4 id="3-命令⾏⽅式"><a href="#3-命令⾏⽅式" class="headerlink" title="3. 命令⾏⽅式"></a>3. 命令⾏⽅式</h4><p>将项⽬打成 jar 包，在 jar 包的⽬录下打开命令⾏，使⽤如下命令启动：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar spring-boot-profile.jar --spring.profiles.active&#x3D;prod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于 Spring Profiles 更多信息可以参⻅：<a href="https://www.baeldung.com/spring-profiles">Spring Profiles</a>。</p><h2 id="9-配置及配置⽂件的加载优先级"><a href="#9-配置及配置⽂件的加载优先级" class="headerlink" title="9. 配置及配置⽂件的加载优先级"></a>9. 配置及配置⽂件的加载优先级</h2><h3 id="⼀、全局配置⽂件加载优先级"><a href="#⼀、全局配置⽂件加载优先级" class="headerlink" title="⼀、全局配置⽂件加载优先级"></a>⼀、全局配置⽂件加载优先级</h3><p>SpringBoot 启动会扫描以下位置的 application.properties 或者 application.yml ⽂件作为默认配置⽂件，数值越⼩的标号优先级越⾼。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/MkGrPL.png"></p><ol><li>file:./config/ (当前项⽬路径config⽬录下); </li><li>file:./ (当前项⽬路径下); </li><li>classpath:/config/ (类路径config⽬录下); </li><li>classpath:/ (类路径下).</li></ol><p>按照优先级从⾼到低的顺序，所有位置的⽂件都会被加载，<strong>⾼优先级配置内容会覆盖低优先级配置内容</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/TTRdJT.png"></p><p>SpringBoot会从<strong>这四个位置全部加载主配置⽂件</strong>，如果⾼优先级中配置⽂件属性与低优先级配置⽂件不冲突的属性，则会共同存在—互补配置。</p><p>假如我们在上⾯的四个配置⽂件分别设置 server.port=6666、7777、8888、9999 ，然后启动应⽤，<strong>最终的启动端⼝为6666</strong>，因为 <strong><code>file:./config/</code></strong> (当前项⽬路径 config ⽬录下配置⽂件)优先级是最⾼的。</p><p><strong>⾃定义改变全局配置⽂件的加载位置：(优先级最⾼)</strong></p><p>我们也可以通过配置spring.config.location来改变默认配置。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar boot-launch-1.0.jar --spring.config.location&#x3D;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;application.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>项⽬打包好以后，我们可以使⽤命令⾏参数的形式，在启动项⽬的时候来指定配置⽂件的位置。</p><p><strong>打包的时候遇到测试代码问题失败的解决⽅案</strong></p><blockquote><p>有时候可能在你的测试代码中存在⼀些问题，默认是扫描测试代码打包的，那就会出现打包错误的现象。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ddOJyH.png"></p><p><strong>解决⽅法</strong></p><p>1、⽤maven命令打包，跳过测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mvn package -Dmaven.test.skip&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、pom中添加配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、IDEA设置中指定</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/9IDurN.png"></p><h3 id="⼆、配置加载优先级"><a href="#⼆、配置加载优先级" class="headerlink" title="⼆、配置加载优先级"></a>⼆、配置加载优先级</h3><p>SpringBoot 也可以从以下位置加载配置：优先级从⾼到低；⾼优先级的配置覆盖低优先级的配置， 所有的配置会形成互补配置。</p><ol><li>命令⾏参数</li><li>来⾃ java:comp/env 的 JNDI 属性</li><li>Java 系统属性（System.getProperties()）</li><li>操作系统环境变量</li><li>RandomValuePropertySource 配置的 random.* 属性值</li><li> jar 包外部的 application-{profile}.properties 或 application.yml(带spring.profile) 配置⽂件</li><li>jar 包内部的 application-{profile}.properties 或 application.yml(带spring.profile) 配置⽂件</li><li>jar 包外部的 application.properties 或 application.yml(不带spring.profile) 配置⽂件</li><li>jar 包内部的 application.properties 或 application.yml(不带spring.profile) 配置⽂件</li><li>@Configuration 注解类上的 @PropertySource</li><li>通过 SpringApplication.setDefaultProperties 指定的默认属性</li></ol><p>关于配置的优先级不⽤特别去记忆，⽤到的时候查⼀下即可。</p><p> ⼀般来说：特殊指定配置(命令⾏、环境变量)⼤于通⽤配置、外部配置优先级⾼于内部配置、局部 环境配置（带profile）⼤于全局普适性配置。</p><p>参考:<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#features.external-config">官⽅⽂档，获得更多关于配置优先级的内容</a></p><h2 id="10-配置⽂件敏感字段加密"><a href="#10-配置⽂件敏感字段加密" class="headerlink" title="10. 配置⽂件敏感字段加密"></a>10. 配置⽂件敏感字段加密</h2><h3 id="⼀、说明"><a href="#⼀、说明" class="headerlink" title="⼀、说明"></a>⼀、说明</h3><p>使⽤过SpringBoot配置⽂件的⼈都知道，资源⽂件中的内容通常情况下是明⽂显示，安全性就⽐较差⼀些。</p><p>打开 application.properties 或 application.yml ，⽐如 MySql 登陆密码，Redis 登陆密码以及第三⽅的密钥等等⼀览⽆余，这⾥介绍⼀个加解密组件，提⾼⼀些属性配置的安全性。</p><p><strong>jasypt 是由⼀个国外⼤神写的⼀个 SpringBoot 的⼯具包，⽤来加密配置⽂件中的信息。</strong></p><p>GitHub Demo地址：<a href="https://github.com/jeikerxiao/spring-boot2/tree/master/springboot-encrypt">https://github.com/jeikerxiao/spring-boot2/tree/master/springboot-encrypt</a></p><h3 id="⼆、数据⽤户名和数据库密码加密为例"><a href="#⼆、数据⽤户名和数据库密码加密为例" class="headerlink" title="⼆、数据⽤户名和数据库密码加密为例"></a>⼆、数据⽤户名和数据库密码加密为例</h3><h4 id="1-引⼊包"><a href="#1-引⼊包" class="headerlink" title="1. 引⼊包"></a>1. 引⼊包</h4><p>查看最新版本可以到:<a href="https://github.com/ulisesbocchio/jasypt-spring-boot">https://github.com/ulisesbocchio/jasypt-spring-boot</a></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ulisesbocchio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jasypt-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置加密解密的秘钥"><a href="#2-配置加密解密的秘钥" class="headerlink" title="2. 配置加密解密的秘钥"></a>2. 配置加密解密的秘钥</h4><p>application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># jasypt加密的密匙</span><span class="token key atrule">jasypt</span><span class="token punctuation">:</span> <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>   <span class="token key atrule">password</span><span class="token punctuation">:</span> Y6M9fAJQdU7jNp5MW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-写⼀个单元测试，⽤来⽣成加密后的秘钥"><a href="#3-写⼀个单元测试，⽤来⽣成加密后的秘钥" class="headerlink" title="3. 写⼀个单元测试，⽤来⽣成加密后的秘钥"></a>3. 写⼀个单元测试，⽤来⽣成加密后的秘钥</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jasypt<span class="token punctuation">.</span>encryption<span class="token punctuation">.</span></span><span class="token class-name">StringEncryptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtendWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span></span><span class="token class-name">SpringExtension</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description:* @author: syhan* @date: 2022-03-14**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptorTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringEncryptor</span> encryptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEncryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> encryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">"happy family"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下⾯是输出的加密字符串：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/1HYgaQ.png"></p><p>在 properties 或 yml ⽂件中需要对明⽂进⾏加密的地⽅使⽤ ENC() 包裹，如原值：”happy family”， 加密后使⽤ ENC(密⽂) 替换。程序中像往常⼀样使⽤ @Value(“${}”) 获取该配置即可，获取的是解密之后的明⽂值。</p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/l7vemk.png"></p><p> <img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/EUJ271.png"></p><p>⽂本被加密之后，我们需要告知 SpringBoot 该如何解密，因为 SpringBoot 要读取该配置的明⽂内容。在 application.properties 或 yml⽂件中，做如下配置:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 设置盐值（加密解密密钥），我们配置在这⾥只是为了测试⽅便</span><span class="token comment"># ⽣产环境中，切记不要这样直接进⾏设置，可通过环境变量、命令⾏等形式进⾏设置。下⽂会讲</span><span class="token key atrule">jasypt</span><span class="token punctuation">:</span><span class="token key atrule">encryptor</span><span class="token punctuation">:</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏单元测试，打印family对象</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/cVjv7D.png"></p><h3 id="三、“密钥”与配置⽂件分开存放"><a href="#三、“密钥”与配置⽂件分开存放" class="headerlink" title="三、“密钥”与配置⽂件分开存放"></a>三、“密钥”与配置⽂件分开存放</h3><p>本身加解密过程都是通过盐值进⾏处理的，所以正常情况下盐值和加密串是分开存储的。出于安全考量，<strong>盐值应该放在系统属性、命令⾏或是环境变量来使⽤，⽽不是放在同⼀个配置⽂件⾥⾯</strong>。</p><h4 id="1-命令⾏存储⽅式示例"><a href="#1-命令⾏存储⽅式示例" class="headerlink" title="1. 命令⾏存储⽅式示例"></a>1. 命令⾏存储⽅式示例</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar xxx.jar --jasypt.encryptor.password<span class="token operator">=</span>xxx <span class="token operator">&amp;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-环境变量存储⽅式示例"><a href="#2-环境变量存储⽅式示例" class="headerlink" title="2. 环境变量存储⽅式示例"></a>2. 环境变量存储⽅式示例</h4><p>设置环境变量(Linux)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开/etc/profile⽂件</span><span class="token function">vim</span> /etc/profile<span class="token comment"># ⽂件末尾插⼊</span><span class="token builtin class-name">export</span> JASYPT_PASSWORD <span class="token operator">=</span> xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar xxx.jar --jasypt.encryptor.password<span class="token operator">=</span><span class="token variable">$&#123;JASYPT_PASSWORD&#125;</span> <span class="token operator">&amp;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合数据库开发框架</title>
      <link href="/2022/06/27/zheng-he-shu-ju-ku-kai-fa-kuang-jia/"/>
      <url>/2022/06/27/zheng-he-shu-ju-ku-kai-fa-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="整合数据库开发框架"><a href="#整合数据库开发框架" class="headerlink" title="整合数据库开发框架"></a>整合数据库开发框架</h1><h2 id="1-整合-Spring-JDBC-操作数据"><a href="#1-整合-Spring-JDBC-操作数据" class="headerlink" title="1. 整合 Spring JDBC 操作数据"></a>1. 整合 Spring JDBC 操作数据</h2><h3 id="⼀、JDBC-简介"><a href="#⼀、JDBC-简介" class="headerlink" title="⼀、JDBC 简介"></a>⼀、JDBC 简介</h3><p>JDBC（Java DataBase Connectivity）是⼀种⽤于执⾏ SQL 语句的 Java API ，可以为多种关系数 据库提供统⼀访问，它由⼀组⽤ Java 语⾔编写的类和接⼝组成。JDBC 提供了⼀种基准，据此可以 构建更⾼级的⼯具和接⼝，使数据库开发⼈员能够编写数据库应⽤程序。</p><blockquote><p>什么是持久层：持久层就是指对数据进⾏持久化操作的代码，⽐如将数据保存到数据库、⽂件、 磁盘等操作都是持久层操作。所谓持久就是保存起来的意思。对于 web 应⽤最常⽤的持久层框架就是 JDBC、Mybatis、JPA。</p></blockquote><h3 id="⼆、使⽤-JDBC-操作数据库的步骤"><a href="#⼆、使⽤-JDBC-操作数据库的步骤" class="headerlink" title="⼆、使⽤ JDBC 操作数据库的步骤"></a>⼆、使⽤ JDBC 操作数据库的步骤</h3><p>直接在 Java 程序中使⽤ JDBC ⽐较复杂，需要 7 步才能完成数据库的操作：</p><ol><li>加载数据库驱动</li><li>建⽴数据库连接</li><li>创建数据库操作对象</li><li>定义操作的 SQL 语句</li><li>执⾏数据库操作</li><li>获取并操作结果集</li><li>关闭对象，回收资源</li></ol><p>关键代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1、加载数据库驱动</span>    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、获取数据库连接</span>    conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3、获取数据库操作对象</span>    stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4、定义操作的 SQL 语句</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM t_user WHERE id = 1 "</span><span class="token punctuation">;</span>    <span class="token comment">// 5、执⾏数据库操作</span>    rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 6、获取并操作结果集</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 解析结果集</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ⽇志信息</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 7、关闭资源</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出直接使⽤ JDBC 来操作数据库⽐较复杂。</p><p>为此，Spring Boot 针对 JDBC 的使⽤提供了对应的 Starter 包：<strong>spring-boot-starter-jdbc</strong>，它 其实就是在 Spring JDBC 上做了进⼀步的封装，⽅便在 Spring Boot ⽣态中更好的使⽤ JDBC。</p><p>SpringBoot JDBC 参考: <a href="https://www.yiibai.com/springjdbc">https://www.yiibai.com/springjdbc</a></p><blockquote><p>不论是 JDBC，还是封装之后的 Spring JDBC，直接操作数据库都⽐较麻烦，实际开发不建议直接 使⽤ JDBC 操作数据库。</p></blockquote><h3 id="三、-将-Spring-JDBC-集成到-Spring-boot-项⽬"><a href="#三、-将-Spring-JDBC-集成到-Spring-boot-项⽬" class="headerlink" title="三、 将 Spring JDBC 集成到 Spring boot 项⽬"></a>三、 将 Spring JDBC 集成到 Spring boot 项⽬</h3><p>第⼀步：引⼊ Maven 依赖包，包括 Spring JDBC 和 MySQL 驱动。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第⼆步：修改 application.yml，增加数据库连接、⽤户名、密码相关的配置。 driver-class-name 根据⾃⼰使⽤的数据库和数据库版本准确填写。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">datasource</span><span class="token punctuation">:</span>   <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/spring_boot<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=false</span>   <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token important">****</span>   <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token important">****</span>   <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>mysql-connector-java 5.5 版本及其以下，使⽤ com.mysql.jdbc.Driver</p></li><li><p>mysql-connector-java 5.7 版本及以上，使⽤ com.mysql.cj.jdbc.Driver</p></li></ul><h3 id="四、-spring-boot-jdbc-基础代码"><a href="#四、-spring-boot-jdbc-基础代码" class="headerlink" title="四、 spring boot jdbc 基础代码"></a>四、 spring boot jdbc 基础代码</h3><p>spring jdbc 集成完毕之后，我们来写代码做⼀个基本的测试。</p><p>⾸先我们新建⼀张测试表 t_article</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_article<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>author<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'作者'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'内容'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'⽂章'</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DAO 层代码:</p><ul><li>jdbcTemplate.update 适合于 insert 、update 和 delete 操作</li><li>jdbcTemplate.queryForObject ⽤于查询单条记录返回结果</li><li>jdbcTemplate.query ⽤于查询结果列表</li><li>BeanPropertyRowMapper 可以将数据库字段的值向 Article 对象映射，满⾜驼峰标识也可以⾃动映射。如:数据库 create_time 字段映射到 createTime 属性。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span>  <span class="token comment">//持久层依赖注⼊注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleJDBCDAO</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment">//保存⽂章</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//jdbcTemplate.update适合于insert 、update和delete操作；</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO article(author,title,content,create_time) values(?, ?, ?, ?)"</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除⽂章</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//jdbcTemplate.update适合于insert 、update和delete操作；</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM article WHERE id = ?"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//更新⽂章</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//jdbcTemplate.update适合于insert 、update和delete操作；</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"UPDATE article SET author = ?, title = ?,content = ?,create_time = ? WHERE id = ?"</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据id查找⽂章</span>    <span class="token keyword">public</span> <span class="token class-name">Article</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//queryForObject⽤于查询单条记录返回结果</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">)</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM article WHERE id=?"</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查询所有</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//query⽤于查询结果列表</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM article"</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service 层接⼝</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">void</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">updateArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Article</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service 层操作 JDBC 持久层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span>   <span class="token comment">//服务层依赖注⼊注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticlleJDBCService</span>  <span class="token keyword">implements</span>  <span class="token class-name">ArticleService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span>    <span class="token class-name">ArticleJDBCDAO</span> articleJDBCDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span> <span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        articleJDBCDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//int a = 2/0； //⼈为制造⼀个异常，⽤于测试事务</span>        <span class="token keyword">return</span> article<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        articleJDBCDAO<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        articleJDBCDAO<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Article</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> articleJDBCDAO<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> articleJDBCDAO<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，在之前的 ArticleController 中调⽤ ArticleRestJDBCService 实现⽅法，进⾏从 Controller 到 Service 到 DAO 层的全流程测试。</p><ul><li>重点测试⼀下事务的回滚，⼈为制造⼀个被除数为 0 的异常。</li><li>在 saveArticle ⽅法上使⽤了@Trasactional 注解，该注解基本功能为事务管理，保证 saveArticle ⽅法⼀旦有异常，所有的数据库操作就回滚。</li></ul><h2 id="2-主流-ORM-持久层框架选型"><a href="#2-主流-ORM-持久层框架选型" class="headerlink" title="2. 主流 ORM 持久层框架选型"></a>2. 主流 ORM 持久层框架选型</h2><h3 id="⼀、现状描述"><a href="#⼀、现状描述" class="headerlink" title="⼀、现状描述"></a>⼀、现状描述</h3><p>⽬前 Java 持久层 ORM 框架应⽤最⼴泛的就是 JPA 和 Mybatis。JPA 只是⼀个 ORM 框架的规范, 对该 规范的实现⽐较完整就是 Spring Data JPA（底层基于 Hibernate 实现），是基于 Spring 的数据持久 层框架，也就是说它只能⽤在 Spring 环境内。</p><p>Mybatis 也是⼀个优秀的数据持久层框架，能⽐较好的⽀持 ORM 实体关系映射、动态 SQL 等。 为什么国内的开发⼈员或者开发团队较少使⽤ JPA ？国内某度指数搜索如下。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/UA3o10.png"></p><p>图中蓝⾊线条为 Mybatis 搜索量，绿⾊为 JPA 搜索量。如果换⼀个国外的搜索指数，你会得到⼀个完全不同的结果。</p><p>这是为什么呢？我们还要从 JPA 的特点说起：</p><ul><li>JPA 对于单表的或者简单的 SQL 查询⾮常友好，甚⾄可以说⾮常智能。它为你准备好了⼤量拿来 即⽤的持久层操作⽅法。甚⾄只要写 findByName 这样⼀个接⼝⽅法，就能智能的帮你执⾏根据 名称查找实体类对应的表数据，完全不⽤写 SQL 。</li><li>但是，JPA 对于多表关联查询以及动态 SQL 、⾃定义 SQL 等⾮常不友好。对于 JPA 来说，⼀种实 现实现⽅式是 QueryDSL ，实现的代码是下⾯这样的。</li></ul><p>你希望⽤这样的代码代替 SQL 么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPAQueryFactory</span> queryFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPAQueryFactory</span><span class="token punctuation">(</span>em<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JPAQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">></span></span> jpaQuery <span class="token operator">=</span> queryFactory<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">QTCity</span><span class="token punctuation">.</span>tCity<span class="token punctuation">,</span><span class="token class-name">QTHotel</span><span class="token punctuation">.</span>tHotel<span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">QTCity</span><span class="token punctuation">.</span>tCity<span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">QTHotel</span><span class="token punctuation">.</span>tHotel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">QTHotel</span><span class="token punctuation">.</span>tHotel<span class="token punctuation">.</span>city<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">QTCity</span><span class="token punctuation">.</span>tCity<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加查询条件</span>jpaQuery<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拿到结果</span><span class="token keyword">return</span> jpaQuery<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另⼀种⽅法是使⽤ NativeQuery ，你希望在 Java 代码⾥⾯⽤拼字符串的⽅式写 SQL 么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@NamedNativeQueries</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NamedNativeQuery</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token string">"studentInfoById"</span><span class="token punctuation">,</span>        query <span class="token operator">=</span> <span class="token string">" SELECT * FROM student_info "</span>        <span class="token operator">+</span> <span class="token string">" WHERE stu_id = ? "</span><span class="token punctuation">,</span>        resultClass <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span>   <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"student_info"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的这部分实现还没有考虑到动态 SQL 的问题，如果考虑到动态 SQL ，写法会更复杂。</p><p>**所谓的动态 SQL 就是：根据传⼊参数条件的不同，构造不同的 SQL **，很多的⽐较这两个框架的⽂章 都忽略了动态 SQL 的问题，这⽅⾯ Mybatis ⽀持的更好。Mybatis 写的动态 SQL 说到底还是 SQL ，⽽ 不是 Java 代码或者 Java 代码拼字符串。</p><p>程序员特别排斥⼏件事：</p><ul><li>将复杂关联关系的 SQL 写在 Java 代码⾥⾯，拼串书写不⽅便</li><li>SQL 是最能表达实体关系查询的语⾔，程序员不希望使⽤异化 SQL 语⾔</li><li>程序员不希望学习不通⽤的东⻄，显然 SQL ⼤家都会</li><li>JPA 虽然将⼤部分操作封装起来了，挺好⽤的，但是 SQL 调优怎么做？</li></ul><h3 id="⼆、孰优孰劣？"><a href="#⼆、孰优孰劣？" class="headerlink" title="⼆、孰优孰劣？"></a>⼆、孰优孰劣？</h3><p>然⽽，另外有⼀派观点，看⼈家国外的程序员怎么都⽤ JPA ？JPA 使⽤很⽅便啊，唯⼀缺点就是复杂 关联 SQL ⽀持差⼀点,但是只要你学⼀下也还可以⽀持啊，你们这是劣币驱逐良币。如果经过很好的实体关系模型的设计，JPA 显然是最优解，程序员写的 SQL 还真不如 JPA 根据实体关系⽣成的 SQL 。</p><ul><li>⾸先，国外程序员习惯使⽤ JPA 的⼀个原因，真的是因为他们国家的应⽤规模太⼩了，⽐起国内 的⼀个应⽤动则上百万的⽤户相⽐，他们在数据库设计与调优的需求上显然更从容。</li><li>国外的应⽤设计往往更简洁，⽽国内的应⽤需求往往功能性更强。可以去看看⼯作流，什么会签、流程回退什么的都是我们发明的，他们没有。你让他们⽤ JPA 写⼀个我们的⼯作流应⽤试⼀试，累吐⾎他们也做不到。</li><li>异化 SQL 或者代码⾥⾯写 SQL，⼀定程度上增加了学习成本和使⽤成本。所以⽤的⼈少，⽤的⼈少你就得迁就团队中的⼤部分⼈。</li></ul><p>说完以上⼏点，Mybatis 为什么在国内会有如此多的使⽤者及使⽤⼚商就不难理解了。Mybatis 还可 以使⽤如：Mybatis-plus 或者代码⾃动⽣成来弥补易⽤性上的不⾜。JPA 的身材、家室、性格样样 都是满分，就是脸⻓得磕碜点难以处理社交关系。Mybatis 虽说在各⽅⾯都不优秀，身材还可以、样 貌也还说得过去、性格也还好。关键是你说什么都听你的，还有愿意帮他化妆的朋友。要你说你选 哪⼀个？</p><p>那么，有的⼈会说，你这是抬杠？国外就没有受众数量多、功能性强的互联⽹应⽤了么？恐怕⽐国 内还多吧，这个也是事实。但是从⽐例上讲还是国内更多，⽐例决定开发⼈员选择技术的⽅向。这 也导致了⼀个惯性思维，他们平时就⽤ JPA 学习训练，所以写⼤型服务应⽤的时候也⽤ JPA 。那么， 他们写 JPA 会写复杂 SQL 么？答案是很少会⽤到，甚⾄有的国外公司就明令禁⽌写关联查询 SQL 。 那怎么办？不⽤关联 SQL 怎么开发业务需求？不会啊。</p><h3 id="三、服务拆分或微服务"><a href="#三、服务拆分或微服务" class="headerlink" title="三、服务拆分或微服务"></a>三、服务拆分或微服务</h3><p>国内现在有越来越多的公司，进⾏微服务的落地，然⽽真正落地⽐较好的企业少之⼜少。这和多表 关联查询有什么关系？我们先来实现这样⼀个需求：根据⽤户 id 去查询该⽤户所具有的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/5drrLv.png"></p><ul><li>如果我们开发的是传统的单体应⽤，把 user ⽤户表、role ⻆⾊表、auth 权限表进⾏关联查询，然后得到查询结果。</li><li>如果我们做的是微服务接⼝，我们可能是先去根据⽤户 id 查询⽤户信息，在通过⽤户信息查询该⽤户的⻆⾊信息、最后通过⻆⾊信息查询权限信息。并且每⼀次调⽤ SQL 都可能是⼀个单独的 HTTP 服务接⼝。</li></ul><p>那么有的⼈会说，访问多个接⼝⼀定⽐访问⼀个接⼝更慢吧！这个真的不⼀定。如果我们做微服 务，⼀定是我们的应⽤规模及数据量到达了⼀定程度。也⼀定会考虑分表分库、负载均衡、服务拆分细化等问题，当分布式的开发⽅式被应⽤越多，多表关联查询使⽤的机会也就越少。拆分后的服 务由于功能单⼀、负载分流、数据分库存储量级更⼩等原因，访问速度往往⽐⼤数据量数据集中存储、多服务集中部署的应⽤会更快。</p><p>问题回来了，不⽤关联 SQL 怎么开发程序？总的来说就是通过合理的服务拆分、数据库拆分、应⽤的界⾯数据的组织关系的合理的设计，团队拥有⽐较好的微服务落地经验，是可以实现不使⽤关联查询 SQL 开发应⽤的。⼤家也知道，NOSQL 越来越流⾏，绝⼤部分的 NOSQL 数据库都没有所谓的 关联关系。</p><h3 id="四、框架对⽐选型"><a href="#四、框架对⽐选型" class="headerlink" title="四、框架对⽐选型"></a>四、框架对⽐选型</h3><table><thead><tr><th>对⽐项</th><th>Spring Data JPA</th><th>Mybatis</th></tr></thead><tbody><tr><td>单表操作⽅式</td><td>只需继承，代码量极少，⾮常⽅便。⽽且⽀持⽅法名⽤关键字⽣成 SQL</td><td>可以使⽤代码⽣成⼯具或 Mybatis-Plus 等⼯具，也很⽅便，但相对 JPA 要弱⼀些。</td></tr><tr><td>多表关联查询</td><td>不太友好，动态 SQL 使⽤不够⽅便，⽽且 SQL 和代码耦合到⼀起</td><td>友好，可以有⾮常直观的动态 SQL</td></tr><tr><td>⾃定义 SQL</td><td>SQL 写在注解⾥⾯，写动态 SQL 有些费劲</td><td>SQL 可以写在 XML ⾥⾯，是书写动态 SQL 语法利器。也⽀持注解 SQL 。</td></tr><tr><td>学习成本</td><td>略⾼</td><td>较低 ,基本会写 SQL 就会⽤</td></tr></tbody></table><p><strong>总结：</strong></p><ul><li>如果你是⾃⼰开发“⼩⽽美”的应⽤，建议你使⽤ JPA</li><li>如果你是开发⼤⽽全的企业级应⽤，当然要遵从团队的技术选型。这个技术选型在国内通常是 Mybatis 。</li><li>如果你们公司的管理⾮常规范，微服务落地经验也⾮常成熟，可以考虑在团队项⽬中使⽤ JPA 。 少⽤或不⽤关联查询。</li></ul><h2 id="3-Java-bean-的赋值转换"><a href="#3-Java-bean-的赋值转换" class="headerlink" title="3. Java bean 的赋值转换"></a>3. Java bean 的赋值转换</h2><h3 id="⼀、为什么要做-Java-bean-赋值转换"><a href="#⼀、为什么要做-Java-bean-赋值转换" class="headerlink" title="⼀、为什么要做 Java bean 赋值转换"></a>⼀、为什么要做 Java bean 赋值转换</h3><p>在实际的开发过程中，由于业务的复杂性，通常并不能做到⼀个 model 实体贯穿持久层、服务层、 控制层。通常需要进⾏实体对象 java bean 的赋值转换。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/pbcmQf.png"></p><p><strong>PO</strong>: persistent object 持久对象，对应数据库中的 entity。通常在进⾏数据库数据存取操作时使⽤。可以简单的认为⼀个 PO 对应数据库中⼀张表中的⼀个记录。PO 对象⾥⾯只有基本数据类型和 String 类型的属性（如：int、String），与数据库字段是⼀⼀对应的。</p><p><strong>BO</strong>: business object 业务对象，业务对象主要作⽤是把业务逻辑封装为⼀个对象。这个对象可以包括⼀个或多个其它的对象。通常⼀个 BO 是多个 PO 的组合体，⽐如：PO 在查询出来之后，需要经过业务处理，处理过程中对象的属性逐渐变复杂，有嵌套的数组，对象数组等等。</p><p><strong>VO</strong>: view object，主要与 web ⻚⾯的展示结构相对应，所以 VO 也是前端与后端的数据交换定义。</p><p>下图中是⼀个 VO，⽤于返回给前端 Web 界⾯，⽤于渲染的数据内容：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/7DKWl1.png"></p><p>下图是⼀个 PO，⽤于对数据库表的数据的存取。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/vEXqGW.png"></p><p>注意看⼆者的区别，⼀个 AricleVO 不仅包含了 Article 的数据，还包含了 Reader 读者的数据。</p><ul><li>当你需要向数据库⾥⾯插⼊数据的时候，需要将 Article(PO) 和 Reader(PO) 分别作为 PO 记录插 ⼊数据库。</li><li>当你需要将⼀篇⽂章的数据和读者信息返回给⻚⾯做渲染的时候，需要从数据库⾥⾯查询 Article(PO) 和 Reader(PO) ,然后将⼆者组合映射转换为 AricleVO 返回给前端。</li></ul><p><strong>如果你的业务可以⽤⼀个实体类对象，就可以贯穿持久层到展现层，就没有必要做映射赋值转换， 也没有必要去分 VO、BO、PO。⽐如：单表表格数据展现、修改、新增。</strong></p><h3 id="⼆、BeanUtils-和-Dozer？"><a href="#⼆、BeanUtils-和-Dozer？" class="headerlink" title="⼆、BeanUtils 和 Dozer？"></a>⼆、BeanUtils 和 Dozer？</h3><p>⽐较常⽤的 JavaBean 赋值转换⼯具是 BeanUtils 和 Dozer ，如果没有 BeanUtils 和 Dozer 帮我们进⾏对象之间的转换赋值，我们会怎么做？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">beanCopyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user<span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token string">"180****4983"</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">avatar</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BeanUtils 是 Spring Boot 内⾃动集成的 JavaBean ⾃动转换⼯具（ apache 项⽬下也有⼀个 BeanUtils，这⾥专指 Spring 包下⾯的 BeanUtils），使⽤⾮常⽅便。可以通过下⾯的⽅法将 user(PO) 转换为 userVo 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">beanUtilsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token string">"180****4983"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avatar</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是Spring的BeanUtils，不是apache的</span>    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> userVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dozer 是⼀个能把实体和实体之间进⾏转换的⼯具</p><p>只要建⽴好映射关系，就像是 ORM 的数据库和实体映射⼀样。</p><p><strong>dozer 的功能⽐ BeanUtils 功能更强⼤，但是 BeanUtils 的性能更好。所以简单的同名同类型属性赋值转换使⽤ BeanUtils ，复杂的级联结构的属性赋值转换使⽤ Dozer 。</strong></p><ul><li>Dozer 可以实现 Integer 、Long 等基础类型与 String 数据类型的属性之间的转换（只要名字相同 就可以了,数据类型可以不同），BeanUtils 只能做到同数据类型同名的属性之间赋值。</li><li>Dozer 可以实现递归级联结构的对象赋值，BeanUtils（Spring 包下⾯的）也可以。</li><li>Dozer 可以实现复杂的数据转换关系，通过 xml 配置的⽅式，BeanUtils 做不到。</li></ul><p>使⽤⽅法示例如下</p><p>引⼊依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.dozermapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dozer-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">dozerTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token string">"180****4983"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avatar</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Mapper</span> mapper <span class="token operator">=</span> <span class="token class-name">DozerBeanMapperBuilder</span><span class="token punctuation">.</span><span class="token function">buildDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// user(PO) -> userVo</span>    <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token class-name">UserVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段示例代码将 PO 对象 user ，转换为 VO 对象 userVo ，转换过程将所有同名同类型的数据⾃动赋值给 userVo 的成员变量，当然除了 books (因为 PO ⾥⾯没有 books 数组数据)。</p><p>转换属性之间的映射，默认是根据属性名称来匹配的。</p><h3 id="三、引⼊-Dozer（6-5-2）"><a href="#三、引⼊-Dozer（6-5-2）" class="headerlink" title="三、引⼊ Dozer（6.5.2）"></a>三、引⼊ Dozer（6.5.2）</h3><p>从 6.2.0 版本开始，dozer 官⽅为我们提供了 dozer-spring-boot-starter ，这样我们在 spring boot ⾥⾯使⽤ dozer 更⽅便了。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.dozermapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dozer-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际开发中，可能不只需要 PO 转 VO ，有时还需要 <code>List&lt;PO&gt;</code>转 <code>List&lt;VO&gt;</code> 写⼀个⼯具类，封装 Dozer 实现对象互转，List 互转</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>dozermapper<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: dozer转换类* @author: syhan* @date: 2022-03-28**/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DozerUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * dozer转换的核⼼mapper对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Mapper</span> dozerMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">Mapper</span> mapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DozerUtils</span><span class="token punctuation">.</span><span class="token function">setDozerMapper</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDozerMapper</span><span class="token punctuation">(</span><span class="token class-name">Mapper</span> dozerMapper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DozerUtils</span><span class="token punctuation">.</span>dozerMapper <span class="token operator">=</span> dozerMapper<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 转换实体为另⼀个指定的实体     * 任意⼀个参数为NULL时 会抛出NPE     * &#123;@link com.github.dozermapper.core.util.MappingValidator#validateMappingRequest&#125;     *     * @param source 源实体 不能为NULL     * @param clazz ⽬标实体 不能为NULL     * @param &lt;T>   泛型     * @return 转换后的结果     */</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dozerMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 转换List实体为另⼀个指定的实体     * source如果为NULL 会使⽤空集合     * 在⽬标实体为NULL时 会抛出NPE     * &#123;@link com.github.dozermapper.core.util.MappingValidator#validateMappingRequest&#125;     *     * @param source 源集合 可以为NULL     * @param clazz ⽬标实体 不能为NULL     * @param &lt;T>   泛型     * @return 转换后的结果     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> source<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>bean <span class="token operator">-></span> dozerMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、⾃定义类型转换（⾮对称类型转换）"><a href="#四、⾃定义类型转换（⾮对称类型转换）" class="headerlink" title="四、⾃定义类型转换（⾮对称类型转换）"></a>四、⾃定义类型转换（⾮对称类型转换）</h3><p>在平时的开发中，我们的 VO 和 PO 的同名字段尽量是类型⼀致的。</p><p>String 属性-&gt; String 属性，Date 属性 -&gt; Date 属性，但是也不排除由于最开始的设计失误。</p><ul><li>需要 String 属性 -&gt; Date 属性，或者 ClassA 转 ClassB 呢？这种我们该如何实现呢？</li><li>或者需要 createDate 转 cDate 这种属性名称都不⼀样的，怎么做。</li></ul><p>⽐如下⾯的两个测试 model ，进⾏属性⾃动赋值转换映射。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestA</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> createDate<span class="token punctuation">;</span>  <span class="token comment">//注意这⾥名称不⼀样，类型不⼀样</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> cDate<span class="token punctuation">;</span>    <span class="token comment">//注意这⾥名称不⼀样，类型不⼀样</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们需要⾃⼰去创建转换对应关系，⽐如：resources/dozer/dozer-mapping.xml。</p><p>xml 内容看上去复杂，其实核⼼结构很简单。就是 class-a 到 classb 的转换，filed ⽤来定义特殊字段 （名称或类型不⼀致）。configuration 可以做全局的配置，date-format 对所有的⽇期字符串转换 ⽣效。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dozermapper.github.io/schema/bean-mapping<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dozermapper.github.io/schema/beanmapping          https://dozermapper.github.io/schema/bean-mapping.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>date-format</span><span class="token punctuation">></span></span>yyyy-MM-dd HH:mm:ss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>date-format</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class-a</span><span class="token punctuation">></span></span>top.syhan.boot.orm.dozer.TestA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class-b</span><span class="token punctuation">></span></span>top.syhan.boot.orm.dozer.TestB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class-b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>createDate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>cDate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把 dozer 转换配置⽂件通知 application.yml ，进⾏加载⽣效。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dozer</span><span class="token punctuation">:</span>  <span class="token key atrule">mapping-files</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/dozer/dozer<span class="token punctuation">-</span>mapping.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样⼀个对象⾥⾯有 String 属性到 Date 属性转换的时候，就会⾃动应⽤这个转换规则， 不再报错。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">dozerTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Mapper</span> mapper <span class="token operator">=</span> <span class="token class-name">DozerBeanMapperBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMappingFiles</span><span class="token punctuation">(</span><span class="token string">"dozer/dozermapping.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TestA</span> testA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestA</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"2022-03-28 12:12:12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>testA<span class="token punctuation">,</span> <span class="token class-name">TestB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">TestB<span class="token punctuation">(</span>name<span class="token operator">=</span>zhangsan, <span class="token assign-left variable">cDate</span><span class="token operator">=</span>FRI Mar <span class="token number">17</span> <span class="token number">12</span>:12:12 CST <span class="token number">2022</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-整合-Spring-Data-JPA"><a href="#4-整合-Spring-Data-JPA" class="headerlink" title="4. 整合 Spring Data JPA"></a>4. 整合 Spring Data JPA</h2><h3 id="⼀、-Sping-Data-JPA-简介"><a href="#⼀、-Sping-Data-JPA-简介" class="headerlink" title="⼀、 Sping Data JPA 简介"></a>⼀、 Sping Data JPA 简介</h3><p><strong>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的⼀套 JPA 应⽤框架</strong>，底层使⽤了 Hibernate 的 JPA 技术实现，可使开发者⽤极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常⽤功能接⼝，且易于扩展。</p><p>学习并使⽤ Spring Data JPA 可以极⼤提⾼开发效率。</p><p>由于微服务系统的⼴泛应⽤，服务粒度逐渐细化，多表关联查询的场景⼀定程度减少。</p><p><strong>单表查询和单表的数据操作正是 JPA 的优势。</strong></p><h3 id="⼆、-将-Spring-Data-JPA-集成到-Spring-Boot"><a href="#⼆、-将-Spring-Data-JPA-集成到-Spring-Boot" class="headerlink" title="⼆、 将 Spring Data JPA 集成到 Spring Boot"></a>⼆、 将 Spring Data JPA 集成到 Spring Boot</h3><p>第⼀步：引⼊ maven 依赖包，包括 Spring Data JPA 和 Mysql 的驱动</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第⼆步：修改 application.yml ，配置好数据库连接和 jpa 的相关配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">datasource</span><span class="token punctuation">:</span>   <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/spring_boot<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=false</span>   <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token important">****</span>   <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token important">******</span>   <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token comment"># ⾃动创建、更新、验证数据库表结构</span> <span class="token key atrule">jpa</span><span class="token punctuation">:</span>   <span class="token key atrule">properties</span><span class="token punctuation">:</span>     <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>       <span class="token key atrule">hbm2ddl</span><span class="token punctuation">:</span>         <span class="token key atrule">auto</span><span class="token punctuation">:</span> update   <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect</code></p><p>Hibernate 创建数据库表的时候，默认使⽤的数据库存储引擎是 MyISAM ，这个参数作⽤是在建表的时候，将存储引擎切换为 InnoDB 。</p></li><li><p><code>spring.jpa.show-sql=true</code> 在⽇志中打印出执⾏的 SQL 语句信息。</p></li><li><p><code>spring.jpa.properties.hibernate.hbm2ddl.auto</code> 是 hibernate 的配置属性，其主要作⽤是：⾃动根据实体类的定义创建、更新、验证数据库表结构。所以这个参数是⼀个⽐较危 险的参数，使⽤的时候⼀定要注意。该参数的⼏种配置如下：</p><ul><li><code>create</code> ：每次加载 hibernate 时都会删除上⼀次的⽣成的表，然后根据你的 model 类再重 新来⽣成新表，哪怕两次没有任何改变也要这样执⾏，这就是导致数据库表数据丢失的⼀个 重要原因。</li><li><code>create-drop</code> ：每次加载 hibernate 时根据 model 类⽣成表，但是 sessionFactory ⼀关闭,表就⾃动删除。</li><li><code>update</code> ：最常⽤的属性，第⼀次加载 hibernate 时根据 model 类会⾃动建⽴起表的结构 （前提是先建⽴好数据库），以后加载 hibernate 时根据 model 类⾃动更新表结构，即使表结构改变了但表中的⾏仍然存在不会删除以前的⾏。要注意的是当部署到服务器后，表结构是不会被⻢上建⽴起来的，是要等应⽤第⼀次运⾏起来后才会。</li><li><code>validate</code> ：每次加载<code>hibernate</code>时，验证创建数据库表结构，只会和数据库中的表进⾏⽐较，不会创建新表，但是会插⼊新值。</li></ul></li></ul><blockquote><p>作为⼀个谨慎的程序员，应永远</p><p>将 <code>spring.jpa.properties.hibernate.hbm2ddl.auto</code> 的值设置为 validate 。在⽣产 环境上的任何⼀次配置失误都可能导致数据库表结构变化甚⾄ drop 数据丢失。</p><p>可能有⼈会觉得 JPA(hibernate) 的这种⽅式⾃动建表更新表结构，⾯向程序员很友好，但是在⽣ 产环境下这是最不友好的⽅式。表还是要通过模型去设计、通过 SQL 去创建，尽量不要⽤这种根据 model 类⽣成数据库表结构的⽅式。</p></blockquote><h3 id="三、-基础核⼼⽤法"><a href="#三、-基础核⼼⽤法" class="headerlink" title="三、 基础核⼼⽤法"></a>三、 基础核⼼⽤法</h3><p>我们来实现⼀个简单的使⽤ JPA 操作数据库的例⼦。</p><h4 id="3-1-实体-Model-类"><a href="#3-1-实体-Model-类" class="headerlink" title="3.1 实体 Model 类"></a>3.1 实体 Model 类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span><span class="token class-name">GenerationType</span><span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>@Entity</code>必选注解，表示这个类是⼀个实体类，接受 JPA 控制管理，对应数据库中的⼀个表。</li><li><code>@Table</code> 可选注解，指定这个类对应数据库中的表名。如果这个类名和数据库表名符合驼峰及下划线规则，可以省略这个注解。如 FlowType 类名对应表名 flow_type。</li><li><code>@Id</code> 指定这个字段为表的主键。</li><li><code>@GeneratedValue(strategy=GenerationType.IDENTITY) </code>指定主键的⽣成⽅式，⼀般主键为⾃增的话，就采⽤ GenerationType.IDENTITY 的⽣成⽅式</li><li><code>@Column</code> 注解针对⼀个字段，对应表中的⼀列。nullable = false 表示数据库字段不能为空, unique = true 表示数据库字段不能有重复值, length = 32 表示数据库字段最⼤程度为 32。</li></ul><p>关于更多注解的详细⽤法，请参考：<a href="https://docs.jboss.org/hibernate/annotations/3.4/reference/zh_cn/html_single/#entity"># Hibernate Annotations 参考⽂档</a></p><h4 id="3-2-数据操作接⼝"><a href="#3-2-数据操作接⼝" class="headerlink" title="3.2 数据操作接⼝"></a>3.2 数据操作接⼝</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>XxxRepository 继承 JpaRepository 为我们提供了各种针对单表的数据操作⽅法：增删改查，通过调⽤接⼝的⽅法名称就能知道⽅法是做什么操作的。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Aee5rB.png"></p><h3 id="四、写⼀个服务层调⽤的例⼦"><a href="#四、写⼀个服务层调⽤的例⼦" class="headerlink" title="四、写⼀个服务层调⽤的例⼦"></a>四、写⼀个服务层调⽤的例⼦</h3><h4 id="4-1-service-层接⼝"><a href="#4-1-service-层接⼝" class="headerlink" title="4.1 service 层接⼝"></a>4.1 service 层接⼝</h4><p>定义⼀个 service 层接⼝</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleRestService</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">ArticleVO</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token class-name">ArticleVO</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">updateArticle</span><span class="token punctuation">(</span><span class="token class-name">ArticleVO</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">ArticleVO</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-service-层接⼝实现"><a href="#4-2-service-层接⼝实现" class="headerlink" title="4.2 service 层接⼝实现"></a>4.2 service 层接⼝实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleJPARestService</span> <span class="token keyword">implements</span>  <span class="token class-name">ArticleRestService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//将JPA仓库对象注⼊</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">Mapper</span> dozerMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArticleVO</span> <span class="token function">saveArticle</span><span class="token punctuation">(</span> <span class="token class-name">ArticleVO</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> articlePO <span class="token operator">=</span> dozerMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存⼀个对象到数据库，insert</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>articlePO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  article<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//根据id删除1条数据库记录</span>        articleRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateArticle</span><span class="token punctuation">(</span><span class="token class-name">ArticleVO</span> article<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> articlePO <span class="token operator">=</span> dozerMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新⼀个对象到数据库，仍然使⽤save⽅法，实际是根据articlePO.id去update</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>articlePO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ArticleVO</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> article <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//根据id查找⼀条数据</span>        <span class="token keyword">return</span> dozerMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ArticleVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articleLis <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查询article表的所有数据</span>        <span class="token keyword">return</span> <span class="token class-name">DozerUtils</span><span class="token punctuation">.</span><span class="token function">mapList</span><span class="token punctuation">(</span>articleLis<span class="token punctuation">,</span><span class="token class-name">ArticleVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：虽然新增和修改都是使⽤的 save ⽅法，但是完成的功能是不⼀样的。当保存的对象有主键 id 的时候，save ⽅法会根据 id 更新记录；当保存的对象没有主键 id 的时候，save ⽅法会向数据库⾥⾯ insert ⼀条记录。</p><p>可以在控制层调⽤⼀下 service 层⽅法，⽤ postman 测试⼀下。</p><h3 id="五、关键字查询接⼝"><a href="#五、关键字查询接⼝" class="headerlink" title="五、关键字查询接⼝"></a>五、关键字查询接⼝</h3><p>除了 JpaRepository 为我们提供的增删改查的⽅法。我们还可以⾃定义⽅法，使⽤起来⾮常简单， 甚⾄可以说是强⼤。把下⾯的⽅法名放到 ArticleRepository ⾥⾯，它就⾃动为我们实现了通过 author 字段查找 article 表的所有数据。也就是说，我们使⽤了 find(查找) 关键字， JPA 就⾃动将⽅法 名为我们解析成数据库 SQL 操作，太智能了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注意这个⽅法的名称，jPA会根据⽅法名⾃动⽣成SQL执⾏</span><span class="token class-name">Article</span> <span class="token function">findByAuthor</span><span class="token punctuation">(</span><span class="token class-name">String</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等同于</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> article<span class="token keyword">WHERE</span> author <span class="token operator">=</span> ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其他具体的关键字，使⽤⽅法和⽣产成 SQL 如下表所示</p><table><thead><tr><th>关键字</th><th>接口函数例子</th><th>JPQL 片段</th></tr></thead><tbody><tr><td>And</td><td>findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td>Or</td><td>findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td>Is,Equals</td><td>findByFirstnameIs,findByFirstn ameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td>Between</td><td>findByStartDateBetween</td><td>… where x.startDate between ? 1 and ?2</td></tr><tr><td>LessThan</td><td>findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td>LessThanEqual</td><td>findByAgeLessThanEqual</td><td>… where x.age ⇐ ?1</td></tr><tr><td>GreaterThan</td><td>findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td>GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td>After</td><td>findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td>Before</td><td>findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td>IsNull</td><td>findByAgeIsNull</td><td>… where x.age is null</td></tr><tr><td>IsNotNull,NotNull</td><td>findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td>Like</td><td>findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td>NotLike</td><td>findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td>StartingWith</td><td>findByFirstnameStartingWith</td><td>… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td>EndingWith</td><td>findByFirstnameEndingWith</td><td>… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td>Containing</td><td>findByFirstnameContaining</td><td>… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td>OrderBy</td><td>findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td>Not</td><td>findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td>In</td><td>findByAgeIn(Collection ages)</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td>NotIn</td><td>findByAgeNotIn(Collection age)</td><td>… where x.age not in ?1</td></tr><tr><td>TRUE</td><td>findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td>FALSE</td><td>findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td>IgnoreCase</td><td>findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table><p>可以看到我们这⾥没有任何类 SQL 语句就完成了两个条件查询⽅法。</p><p>这就是 Spring-data-jpa 的⼀⼤特性：<strong>通过解析⽅法名创建查询</strong>。</p><p>针对单表的数据查询简单到令⼈发指，怎么可以这么简单，照这个趋势发展，程序员早晚失业。</p><h3 id="六、测试关键字查询"><a href="#六、测试关键字查询" class="headerlink" title="六、测试关键字查询"></a>六、测试关键字查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JPAKeyWordTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">findByAuthor</span><span class="token punctuation">(</span><span class="token string">"mqxu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h3><p>spring-data-jpa 的能⼒远不⽌这些，不建议使⽤ <strong>Query、NamedQuery、Specification、 QueryDSL</strong> 等，如果你⽤这些东⻄，还不如⾃⼰写 SQL。</p><p>可参考下⽅⽂档进⾏更深⼊的学习：</p><p><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference">Spring Data JPA 官⽅⽂档 </a></p><h2 id="5-整合-Mybatis"><a href="#5-整合-Mybatis" class="headerlink" title="5. 整合 Mybatis"></a>5. 整合 Mybatis</h2><h3 id="⼀、数据库和数据表"><a href="#⼀、数据库和数据表" class="headerlink" title="⼀、数据库和数据表"></a>⼀、数据库和数据表</h3><p>建表脚本</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* Navicat Premium Data Transfer Source Server         : local_conn Source Server Type   : MySQL Source Server Version : 80026 Source Host           : localhost:3306 Source Schema         : spring_boot Target Server Type   : MySQL Target Server Version : 80026 File Encoding         : 65001 Date: 28/03/2022 07:50:23*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_teacher 教师表：和班级表⼀对⼀</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_teacher<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_teacher<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>teacher_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'教师id'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>teacher_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'教师姓名'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>clazz_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'教师管理的班级id'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>teacher_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci ROW_FORMAT<span class="token operator">=</span>DYNAMIC<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of t_teacher</span><span class="token comment">-- ----------------------------</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_teacher<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'许⽼师'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_teacher<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'张⽼师'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_clazz 班级表：和教师表⼀对⼀，和学⽣表⼀对多</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_clazz<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_clazz<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>clazz_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'班级id'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>clazz_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'班级名称'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>teacher_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'班级管理⽼师的id'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>clazz_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci ROW_FORMAT<span class="token operator">=</span>DYNAMIC<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of t_clazz</span><span class="token comment">-- ----------------------------</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_clazz<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'后端开发班'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_clazz<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'前端开发班'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_student 学⽣表：和班级表多对⼀，和课程表多对多</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>student_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学⽣id'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>clazz_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学⽣所属班级的id'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>student_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学⽣姓名'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hometown<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学⽣籍贯'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>birthday<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'出⽣⽇期'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>student_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3010</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci ROW_FORMAT<span class="token operator">=</span>DYNAMIC<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of t_student</span><span class="token comment">-- ----------------------------</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'钱智康'</span><span class="token punctuation">,</span> <span class="token string">'江苏苏州'</span><span class="token punctuation">,</span> <span class="token string">'2000-01-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'李智康'</span><span class="token punctuation">,</span> <span class="token string">'江苏⽆锡'</span><span class="token punctuation">,</span> <span class="token string">'2000-02-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张智康'</span><span class="token punctuation">,</span> <span class="token string">'江苏常州'</span><span class="token punctuation">,</span> <span class="token string">'2000-03-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'王智康'</span><span class="token punctuation">,</span> <span class="token string">'江苏南京'</span><span class="token punctuation">,</span> <span class="token string">'2000-04-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'孙志康'</span><span class="token punctuation">,</span> <span class="token string">'江苏徐州'</span><span class="token punctuation">,</span> <span class="token string">'2001-05-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'周志康'</span><span class="token punctuation">,</span> <span class="token string">'江苏泰州'</span><span class="token punctuation">,</span> <span class="token string">'2001-06-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1007</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'郭志康'</span><span class="token punctuation">,</span> <span class="token string">'江苏扬州'</span><span class="token punctuation">,</span> <span class="token string">'2001-07-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1008</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'陈志康'</span><span class="token punctuation">,</span> <span class="token string">'江苏盐城'</span><span class="token punctuation">,</span> <span class="token string">'2001-08-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_course 课程表：和学⽣表多对多</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_course<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_course<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>course_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程id'</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>course_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程名称'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>course_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">20003</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci ROW_FORMAT<span class="token operator">=</span>DYNAMIC<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of t_course</span><span class="token comment">-- ----------------------------</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_course<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span> <span class="token string">'后端⼯程化开发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_course<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">20002</span><span class="token punctuation">,</span> <span class="token string">'前端⼯程化开发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、加依赖"><a href="#⼆、加依赖" class="headerlink" title="⼆、加依赖"></a>⼆、加依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、写配置"><a href="#三、写配置" class="headerlink" title="三、写配置"></a>三、写配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/spring_boot<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token comment"># 指定相应接⼝对应的xml⽂件所在⽬录</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span>    classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>    <span class="token comment"># 实体类所在包</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.mqxu.boot.orm.mybatis.domain  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># mybatis开启驼峰式命名</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、综合示例"><a href="#四、综合示例" class="headerlink" title="四、综合示例"></a>四、综合示例</h3><blockquote><p>以教师、班级、学⽣、课程等为例，来做⼀个综合的例⼦</p></blockquote><p>Student.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 学⽣id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> studentId<span class="token punctuation">;</span>    <span class="token comment">/**     * 学⽣所属班级的id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> clazzId<span class="token punctuation">;</span>    <span class="token comment">/**     * 学⽣姓名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span>    <span class="token comment">/**     * 学⽣籍贯     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> hometown<span class="token punctuation">;</span>    <span class="token comment">/**     * 出⽣⽇期     */</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StudentMapper.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 新增学⽣     *     * @param student student对象     * @return int     */</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 根据id删除学⽣     *     * @param studentId 学⽣id     * @return int     */</span>    <span class="token keyword">int</span> <span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> studentId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 根据id查询学⽣     *     * @param studentId 学⽣id     * @return 查询到的学⽣对象     */</span>    <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> studentId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 修改学⽣信息     *     * @param student student对象     * @return int     */</span>    <span class="token keyword">int</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量新增学⽣     *     * @param students 学⽣集合     * @return int     */</span>    <span class="token keyword">int</span> <span class="token function">batchInsert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量删除     * * @param idList 待删记录id集合     * @return int     */</span>    <span class="token keyword">int</span> <span class="token function">batchDelete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"idList"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量修改     *     * @param students 学⽣集合     * @return int     */</span>    <span class="token keyword">int</span> <span class="token function">batchUpdate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 按条件单表查询，结合动态SQL     *     * @param student 参数对象     * @return List&lt;Student>     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">selectByDynamicSql</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StudentMapper.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.mqxu.springboot.mybatis.mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       `student_id`,       `clazz_id`,       `student_name`,       `hometown`,       `birthday`    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.springboot.mybatis.domain.Student<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       insert into `t_student` (`clazz_id`, `student_name`, `hometown`, `birthday`)       values (#&#123;clazzId,jdbcType=INTEGER&#125;, # &#123;studentName,jdbcType=VARCHAR&#125;, #&#123;hometown,jdbcType=VARCHAR&#125;,               #&#123;birthday,jdbcType=DATE&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       from `t_student`       where `student_id` = #&#123;studentId,jdbcType=INTEGER&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       delete       from `t_student`       where `student_id` = #&#123;studentId,jdbcType=INTEGER&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateByPrimaryKeySelective<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       update `t_student`        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzId != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               `clazz_id` = #&#123;clazzId,jdbcType=INTEGER&#125;,            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentName != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               `student_name` = #&#123;studentName,jdbcType=VARCHAR&#125;,            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               `hometown` = #&#123;hometown,jdbcType=VARCHAR&#125;,            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               `birthday` = #&#123;birthday,jdbcType=DATE&#125;,            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>       where `student_id` = #&#123;studentId,jdbcType=INTEGER&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>batchInsert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       insert into t_student values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           (#&#123;student.studentId&#125;, #&#123;student.clazzId&#125;, #&#123;student.studentName&#125;, #&#123;student.hometown&#125;, #&#123;student.birthday&#125;)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>batchDelete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       delete       from t_student               where student_id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idList<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span><span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           #&#123;item&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>batchUpdate<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           update t_student t            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.clazzId != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   `clazz_id` = #&#123;item.clazzId,jdbcType=INTEGER&#125;,                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.studentName != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   `student_name` = #&#123;item.studentName,jdbcType=VARCHAR&#125;,                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.hometown != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   `hometown` = #&#123;item.hometown,jdbcType=VARCHAR&#125;,                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.birthday != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   `birthday` = #&#123;item.birthday,jdbcType=DATE&#125;,                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>           where t.student_id = #&#123;item.studentId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByDynamicSql<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select *       from t_student               where 1 = 1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzId != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and clazz_id = #&#123;clazzId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and hometown like "%"#&#123;hometown&#125;"%"            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StudentMapperTest.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtendWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span></span><span class="token class-name">SpringExtension</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>mqxu<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">StudentMapperTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StudentMapper</span> studentMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">clazzId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">studentName</span><span class="token punctuation">(</span><span class="token string">"test学⽣"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">hometown</span><span class="token punctuation">(</span><span class="token string">"江苏南京"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">birthday</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"⾦晨星"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">studentId</span><span class="token punctuation">(</span><span class="token number">1009</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">clazzId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">studentName</span><span class="token punctuation">(</span><span class="token string">"新名字"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">batchInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">studentId</span><span class="token punctuation">(</span><span class="token number">3000</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">clazzId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">studentName</span><span class="token punctuation">(</span><span class="token string">"测试学⽣"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">hometown</span><span class="token punctuation">(</span><span class="token string">"测试城市"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">birthday</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">batchInsert</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">batchUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">studentId</span><span class="token punctuation">(</span><span class="token number">3000</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">clazzId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">studentName</span><span class="token punctuation">(</span><span class="token string">"新名字"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">batchDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> idList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">batchDelete</span><span class="token punctuation">(</span>idList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectByDynamicSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hometown</span><span class="token punctuation">(</span><span class="token string">"江"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectByDynamicSql</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要提醒！</strong></p><ul><li>启动主类不要忘记加注解</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/9gR9ld.png"></p><ul><li>配置⽂件的数据库连接串如下添加，让它⽀持批量操作</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/DWX7lQ.png"></p><h3 id="五、Mybatis-关联查询"><a href="#五、Mybatis-关联查询" class="headerlink" title="五、Mybatis 关联查询"></a>五、Mybatis 关联查询</h3><h4 id="1、⼀对⼀"><a href="#1、⼀对⼀" class="headerlink" title="1、⼀对⼀"></a>1、⼀对⼀</h4><blockquote><p>教师和班级</p></blockquote><ul><li>在<strong>⼀⽅声明另⼀⽅</strong>的对象，暂时以教师作为主导⽅，反过来也⼀样</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serial</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Builder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span><span class="token class-name">Alias</span></span><span class="token punctuation">;</span><span class="token comment">/*** @author syhan* @TableName t_teacher*/</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"Teacher"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Serial</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 教师id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> teacherId<span class="token punctuation">;</span>    <span class="token comment">/**     * 教师姓名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> teacherName<span class="token punctuation">;</span>    <span class="token comment">/**     * 教师管理的班级id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> clazzId<span class="token punctuation">;</span>    <span class="token comment">/**     * 教师管理的班级对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">Clazz</span> clazz<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>teacherId <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>teacherName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TeacherMapper.java 接⼝声明查询⽅法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Teacher</span></span><span class="token punctuation">;</span><span class="token comment">/*** @author syhan* @description 针对表【t_teacher】的数据库操作Mapper* @createDate 2022-03-27 21:54:00* @Entity com.mqxu.boot.orm.mybatis.domain.Teacher*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TeacherMapper</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据id查询教师信息（⼀对⼀，关联查询出其管理的班级对象信息）     *     * @param teacherId 教师id     * @return 教师对象     */</span>    <span class="token class-name">Teacher</span> <span class="token function">selectOneByOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> teacherId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TeacherMapper.xml 实现⼀对⼀关联查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper        PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"top.syhan.boot.orm.mybatis.mapper.TeacherMapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"teacherMap"</span> type<span class="token operator">=</span><span class="token string">"Teacher"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"teacher_id"</span> property<span class="token operator">=</span><span class="token string">"teacherId"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"teacher_name"</span> property<span class="token operator">=</span><span class="token string">"teacherName"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>association property<span class="token operator">=</span><span class="token string">"clazz"</span> javaType<span class="token operator">=</span><span class="token string">"Clazz"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"clazz_id"</span> property<span class="token operator">=</span><span class="token string">"clazzId"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"clazz_name"</span> property<span class="token operator">=</span><span class="token string">"clazzName"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>association<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectOneByOne"</span> resultMap<span class="token operator">=</span><span class="token string">"teacherMap"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span><span class="token operator">></span>       SELECT <span class="token operator">*</span>       FROM t_teacher t<span class="token punctuation">,</span>             t_clazz c       WHERE t<span class="token punctuation">.</span>teacher_id <span class="token operator">=</span> #<span class="token punctuation">&#123;</span>teacherId<span class="token punctuation">&#125;</span>         AND t<span class="token punctuation">.</span>clazz_id <span class="token operator">=</span> c<span class="token punctuation">.</span>clazz_id    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TeacherMapperTest 测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Teacher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtendWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span></span><span class="token class-name">SpringExtension</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description:* @author: syhan* @date: 2022-03-28**/</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">TeacherMapperTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">TeacherMapper</span> teacherMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectOneByOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> teacherMapper<span class="token punctuation">.</span><span class="token function">selectOneByOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>teacher<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> teacher<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、⼀对多"><a href="#2、⼀对多" class="headerlink" title="2、⼀对多"></a>2、⼀对多</h4><blockquote><p>班级和学⽣</p></blockquote><ul><li>⼀⽅(Clazz)声明多⽅(Student)的集合</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clazz</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 班级id   */</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> clazzId<span class="token punctuation">;</span>  <span class="token comment">/**   * 班级名称   */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> clazzName<span class="token punctuation">;</span>  <span class="token comment">/**   * 班级管理老师的id   */</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> teacherId<span class="token punctuation">;</span>  <span class="token comment">/**   * 一方里声明多方的集合   */</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ClazzMapper.java 接⼝</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CLazzMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 根据班级id查询班级   *   * @param clazzId 班级id   * @return 查询到的班级对象   */</span>  <span class="token class-name">Clazz</span> <span class="token function">getClazzOneToMany</span><span class="token punctuation">(</span><span class="token keyword">int</span> clazzId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ClazzMapper.xml 实现⼀对多关联查询</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.boot.orm.mybatis.mapper.ClazzMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clazz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzName<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findOneToMany<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       SELECT c.clazz_id, c.clazz_name, s.student_id, s.student_name, s.hometown       FROM t_clazz c,             t_student s       WHERE c.clazz_id = #&#123;clazzId&#125;         AND c.clazz_id = s.clazz_id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/zZBZPv.png"></p><h4 id="3、多对⼀"><a href="#3、多对⼀" class="headerlink" title="3、多对⼀"></a>3、多对⼀</h4><blockquote><p>学⽣和班级</p></blockquote><ul><li>多⽅⾥声明⼀⽅的对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 学生id   */</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> studentId<span class="token punctuation">;</span>  <span class="token comment">/**   * 学生所属班级的id   */</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> clazzId<span class="token punctuation">;</span>  <span class="token comment">/**   * 学生姓名   */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span>  <span class="token comment">/**   * 学生籍贯   */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> hometown<span class="token punctuation">;</span>  <span class="token comment">/**   * 出生日期   */</span>  <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span>  <span class="token comment">/**   * 在多方里，声明一方的对象   */</span>  <span class="token keyword">private</span> <span class="token class-name">Clazz</span> clazz<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StudentMapper 接⼝</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 根据学生id查询（关联查询出所属班级信息）   *   * @param studentId 学生id   * @return student学生   */</span> <span class="token class-name">Student</span> <span class="token function">getStudentManyToOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StudentMapper.xml 实现多对⼀关联查询</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.boot.orm.mybatis.mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clazz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentManyToOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       SELECT s.student_id, s.student_name, s.hometown, c.clazz_id, c.clazz_name       FROM t_student s,             t_clazz c       WHERE s.student_id = #&#123;clazzId&#125;         AND s.clazz_id = c.clazz_id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">getStudentManyToOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Student</span> student <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">getStudentManyToOne</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClazzId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、综合"><a href="#4、综合" class="headerlink" title="4、综合"></a>4、综合</h4><h5 id="1-查询班级信息"><a href="#1-查询班级信息" class="headerlink" title="1) 查询班级信息"></a>1) 查询班级信息</h5><blockquote><p>班级和教师存在⼀对⼀关系，同时⼜和学⽣存在⼀对多关系</p><p>在查询⼀个班级的时候，同时关联查询出班级教师信息、班级所有学⽣信息</p></blockquote><p>Clazz.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clazz</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 班级id   */</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> clazzId<span class="token punctuation">;</span>  <span class="token comment">/**   * 班级名称   */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> clazzName<span class="token punctuation">;</span>  <span class="token comment">/**   * 班级管理老师的id   */</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> teacherId<span class="token punctuation">;</span>  <span class="token comment">/**   * 管理班级的教师对象（一对一）   */</span>  <span class="token keyword">private</span> <span class="token class-name">Teacher</span> teacher<span class="token punctuation">;</span>  <span class="token comment">/**   * 一方里声明多方的集合（一对多）   */</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ClazzMapper.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClazzMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 根据班级id查询班级   *   * @param clazzId 班级id   * @return 查询到的班级对象（班级自身信息、班级教师信息、班级所有学生的信息）   */</span>  <span class="token class-name">Clazz</span> <span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token keyword">int</span> clazzId<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ClazzMapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.boot.orm.mybatis.mapper.ClazzMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clazz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teahcer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getClazz<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       SELECT c.clazz_id, c.clazz_name, t.teacher_name, s.student_id, s.student_name, s.hometown       FROM t_clazz c       LEFT JOIN t_teacher t       ON c.clazz_id = t.clazz_id       LEFT JOIN t_student s       ON c.clazz_id = s.clazz_id       WHERE c.clazz_id = #&#123;clazzId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ClazzMapperTest</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> <span class="token class-name">ClazzMapper</span> clazzMapper<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Clazz</span> clazz <span class="token operator">=</span> clazzMapper<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"软件2126"</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getClazzName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getClazzId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTeacherId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"许老师"</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTeacherName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班级信息："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClazzId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getClazzName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班级教师信息："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTeacherId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTeahcerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班级学生："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    clazz<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getHometown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-查询学⽣信息"><a href="#2-查询学⽣信息" class="headerlink" title="2) 查询学⽣信息"></a>2) 查询学⽣信息</h5><blockquote><p>学⽣和班级存在多对⼀关系，同时⼜和课程存在多对多关系</p><p>在查询⼀个学⽣的时候，同时关联查询出该学⽣所在班级信息、以及学⽣选的所有课程信息</p></blockquote><ul><li>Student.java 实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 学生所属班级的id   */</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> clazzId<span class="token punctuation">;</span>  <span class="token comment">/**   * 学生姓名   */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span>  <span class="token comment">/**   * 学生籍贯   */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> hometown<span class="token punctuation">;</span>  <span class="token comment">/**   * 出生日期   */</span>  <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span>  <span class="token comment">/**   * 学生和班级多对一   */</span>  <span class="token keyword">private</span> <span class="token class-name">Clazz</span> clazz<span class="token punctuation">;</span>  <span class="token comment">/**   * 学生和课程多对多   */</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">></span></span> courses<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StudentMapper.java 接⼝</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 根据学生id查询（关联查询出所属班级信息,所选课程信息）   *   * @param studentId 学生id   * @return student对象   */</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StudentMapper.xml 实现</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.boot.orm.mybatis.mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hometown<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clazz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courses<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courseId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courseName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       SELECT s.student_id, s.student_name, s.hometown, s.birthday, c.clazz_id, c.clazz_name, cc.course_id, cc.course_name       FROM t_student s       LEFT JOIN t_clazz c       ON s.clazz_id = c.clazz_id       LEFT JOIN t_course_student ts       ON s.student_id = ts.student_id       LEFT JOIN t_course cc       ON ts.course_id = cc.course_id       WHERE s.student_id = #&#123;studentId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">getStudentManyToOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Student</span> student <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCLazzId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"软件2126"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClazzName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getCourses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具介绍、新建项目及插件配置</title>
      <link href="/2022/06/26/1-gong-ju-jie-shao-xin-jian-xiang-mu-ji-cha-jian-pei-zhi/"/>
      <url>/2022/06/26/1-gong-ju-jie-shao-xin-jian-xiang-mu-ji-cha-jian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="工具介绍、新建项目及插件配置"><a href="#工具介绍、新建项目及插件配置" class="headerlink" title="工具介绍、新建项目及插件配置"></a>工具介绍、新建项目及插件配置</h1><p>相信你已经做好了准备（一台折腾得起的电脑和一颗肯行动的心）。</p><p>正所谓工欲善其事，必先利其器，我们要开发微信小程序和APP，有两个工具是必不可少的：</p><ol><li>微信开发者工具</li><li>HbuilderX</li></ol><h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><p>我们要做的应用需要编译成小程序，因此也要<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载微信开发者工具</a>进行编译预览效果。</p><p>找到对应版本，下载安装，完成打开。</p><p>要先做个配置，找到菜单 【设置】 &gt;&gt; 【安全设置】，该配置可以使 Uniapp 使用命令行调用微信开发者工具，实现项目的预览与热更新。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/W8zBk4.png"></p><p>把服务端口选择开启即可</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/2gshwo.png"></p><p>如果不开启，接下来的调试会报以下错</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/yVkB5L.png"></p><h2 id="HbuilderX"><a href="#HbuilderX" class="headerlink" title="HbuilderX"></a>HbuilderX</h2><p>打开 <a href="https://www.dcloud.io/hbuilderx.html">HbuilderX官方网站</a>，使用 Uniapp 框架开发项目搭配官方的编辑器 HBuilderX 开发，编辑器集成了node，添加了很多底层配置。无需复杂的安装，开箱即用并且搭配了可视化界面，可以轻松编辑。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/8SqE6H.png"></p><p>选择 App 开发版本（App 开发版已集成相关插件、开箱即用），下载成功后直接解压：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/lNbN07.png"></p><p>安装找到这个图标打开，基本上可以达到秒开。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/6CjW2J.png"></p><p>修改主题 【工具】&gt;&gt;【主题】&gt;&gt;【雅蓝】，即可看到熟悉的 IDE 的界面。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/dCURZC.png"></p><p>如果你熟悉了其他的开发工具，完全可以无缝衔接过来，因为可以快捷键切换，还是同样的配方，熟悉的味道，不用再次学习。</p><p>打开编译器，空白区域有快捷键方案设置，点击选择即可。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/WGlC7F.png"></p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>【选择新建项目】 &gt;&gt; 【uni-app】 &gt;&gt; 【默认模板】 &gt;&gt; 【创建】</p><p>选择 uni-app(U) 创建项目是为了开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ycmpDy.png"></p><p>一秒即可创建成功</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/PBoZk0.png" alt="1" style="zoom:60%;margin-left:0;" /><p>项目目录结构：</p><ul><li>pages 业务页面文件存放的目录</li><li>static 静态文件目录(images之类)</li><li>App.vue App 全局应用配置</li><li>main.js 初始化入口文件</li><li>manifest.json 多端配置信息</li><li>pages.json 配置页面路由、导航等信息，类似原生小程序的 app.json</li></ul><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>选择菜单 【工具】 &gt;&gt; 【插件安装】</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/oiBM7s.png"></p><p>建议安装这些：</p><ul><li>NPM</li><li>内置浏览器</li><li>内置终端</li><li>App真机运行</li><li>uni-app编译</li><li>Git插件</li><li>js-beautify</li><li>prettier</li><li>htmlhint</li><li>stylelint</li><li>eslint-plugin-vue</li><li>eslint-js</li><li>js压缩</li><li>css压缩</li><li>scss/sass编译</li><li>es6编译</li></ul><p>其余根据自己需要安装。</p><h2 id="运行-Uniapp-项目"><a href="#运行-Uniapp-项目" class="headerlink" title="运行 Uniapp 项目"></a>运行 Uniapp 项目</h2><p>上面的配置插件完成之后，就可以运行一下刚才的项目了，运行 Uniapp 项目主要有3种方式：</p><ul><li>浏览器</li><li>小程序</li><li>手机 App</li></ul><p>这里简单说一下浏览器预览。</p><p>HBuilder 可能检测不到的浏览器所在位置，所有的运行配置都需要对应上你在本机安装的浏览器的安装路径才能进行命令行启动预览。小程序，手机的运行配置一致。<br>选择菜单【工具】&gt;&gt;【设置】&gt;&gt;【运行配置】</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/lNTXEK.png"></p><p>完成 Chrome 等浏览器运行配置，操作 【运行】&gt;&gt;【运行到浏览器】&gt;&gt;【Chrome】，HBuilder 会在底部开启终端，实行项目更新与热编译的检测：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/vzNejy.png"></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>官方文档更像一份新华字典，大而全，可以反复查阅，我们的文档像一份干货小结，来源于项目用于项目。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>磨刀不误砍柴工，只有刀磨锋利，接下来才会更顺手。</p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UniAPP基础知识</title>
      <link href="/2022/06/26/2-uniapp-ji-chu-zhi-shi/"/>
      <url>/2022/06/26/2-uniapp-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="UniAPP-基础知识"><a href="#UniAPP-基础知识" class="headerlink" title="UniAPP 基础知识"></a>UniAPP 基础知识</h1><blockquote><p>Uniapp 设计的开发标准是：Vue 的语法 + 小程序的 API + 条件编译扩展平台个性化能力。</p></blockquote><p>了解 Vue 基本开发原理就可使用 Uniapp 了。</p><h2 id="什么是-MVC-与-MVVM-？"><a href="#什么是-MVC-与-MVVM-？" class="headerlink" title="什么是 MVC 与 MVVM ？"></a>什么是 MVC 与 MVVM ？</h2><p>我们先来了解什么是 MVC 与 MVVM ？才能一步一步深入了解 Vue 框架的出现和 Vue 可以解决的问题。</p><p>MVC 的定义：MVC 是 Model-View-Controller 的简写。即模型-视图-控制器。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/MTpHbF.png"></p><ul><li><strong>模型</strong>（Model）指的是后端传递的数据（比如数据库记录列表）。</li><li><strong>视图</strong>（View）指的是所看到的页面，显示数据（数据记录）。</li><li><strong>控制器</strong>（Controller）是应用程序中处理用户交互的部分，处理输入（写入数据库记录）。</li></ul><p>在前端并不成熟的时期，很多业务逻辑是在后端实现的，MVC 允许在不改变视图的情况下改变视图对用户输入的响应方式，用户对视图的操作交给了 Controller 处理，在 Controller 中响应 View 的事件调用 Model 的接口对数据进行操作，一旦 Model 发生变化便通知相关视图进行更新。</p><p>使用 MVC 的目的就是将 Model 和 View 的代码分离。MVC 是单向通信。也就是 View 跟 Model，必须通过 Controller 来承上启下。但是 MVC 中大量的 DOM 操作又加上视图的二次加载更新，用户看到的更新数据页面会慢一些，并且页面渲染性能降低，影响了用户体验。</p><p>为解决这样的问题，MVVM 就出现了。</p><p>在过去的 10 年中，我们已经把很多传统的服务端代码放到了浏览器中，这样就产生了成千上万行的 javascript 代码，它们连接了各式各样的 HTML 和 CSS 文件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用 javascript 框架。比如：Angular、React、Vue。浏览器的兼容性问题已经不再是前端的阻碍。前端的项目越来越大，项目的可维护性和扩展性、安全性等成了主要问题。当年为了解决浏览器兼容性问题，出现了很多类库，其中最典型的就是 jQuery。但是这类库没有实现对业务逻辑的分成，所以维护性和扩展性极差。</p><p>综合上面原因，才有了 MVVM 模式一类框架的出现，通过数据的双向绑定，极大了提高了开发效率。Vue 就是基于 MVVM 模式实现的一套框架。</p><p>下面来看一下 MVVM。</p><p>MVVM 是 Model-View-ViewModel 的简写，即模型-视图-视图模型。MVVM 模式是通过以下三个核心组件组成：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/6Vhr4s.png"></p><ul><li>业务和验证逻辑的数据模型。</li><li><strong>视图</strong>（View）指的是所看到的页面，定义屏幕中 View 的结构，布局和外观。</li><li><strong>视图模型</strong>（ViewModel） 是 MVVM 模式的核心，它是连接 View 和 Model 的桥梁，帮忙处理 View 的全部业务逻辑。</li></ul><p>ViewModel 的角色就是将<strong>视图</strong>与<strong>模型</strong>之间来回转化：</p><ul><li><strong>模型</strong>转化为<strong>视图</strong>：将服务器发送的数据转化成我们看到的页面内容。这就是进行 <code>&#123;&#123; ... &#125;&#125;</code> 数据对应的作用。</li><li><strong>视图</strong>转化为<strong>模型</strong>：将所页面内容及用户操作信息转化成服务器的数据。这部分是指令与 dom 事件对应的作用。</li></ul><blockquote><p><strong>视图</strong>与<strong>模型</strong>这两者之间的来回转化，我们称之为数据的双向绑定。</p></blockquote><h2 id="双向绑定的使用"><a href="#双向绑定的使用" class="headerlink" title="双向绑定的使用"></a>双向绑定的使用</h2><p>来看一个添加名单的应用页面的 index.vue 结构，用户可以在输入框输入名字，书写的内容可以即时反映显示在文本中，用户可以操作添加，把该名字插入列表数据中：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/kr47gF.png"></p><p>在 Vue 中可以发现：</p><ul><li>Model：data 处存放的数据</li><li>View：template 中 HTML 代码展示的视图</li><li>ViewModel：是 methods 里的 JS 逻辑代码</li></ul><p>如此，我们对 MVVM 有了初步的认识。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/E5kCzc.png"></p><p>DOM 的数据通过 Vue 的 directives（指令）来改变，所以直接改变 model 的数据就可以直接将数据反映在 DOM 上面。前面的 <code>v-model</code> 指令就是用户在输入框操作时反映显示在视图中（你要添加的名字:  ），所以我们使用 Vue 这样的框架时，想要改变视图样式不是直接像 jQuery 操作 DOM 一样去操作，而是改变数据，让数据的去驱动视图样式的改变。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Vue 实例有一个完整的生命周期，也就是说从开始创建、初始化数据、编译模板、挂在 DOM、渲染-更新-渲染、卸载等一系列过程。Vue 实例的生命周期钩子就是在某个阶段给你一个做某些处理的机会。比如 Vue 整个渲染完 DOM 的时候，你才可以操作 DOM，如果在 DOM 未渲染完之前去操作 DOM，由于 DOM 不存在而操作失败。</p><p>由于 Uniapp 是集成多端的，因此完整的支持 <strong>Vue 实例的生命周期</strong>，同时还支持<strong>应用生命周期</strong>及<strong>页面生命周期</strong>，区别在于你是开发 H5，小程序还是 APP。</p><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onLaunch</td><td align="left">初始化完成时触发（全局只触发一次），例如：点击分享页面进入应用，可以捕获在分享链接的参数</td></tr><tr><td align="left">onShow</td><td align="left">启动，或从后台进入前台显示</td></tr><tr><td align="left">onHide</td><td align="left">从前台进入后台</td></tr><tr><td align="left">onError</td><td align="left">报错时触发</td></tr></tbody></table><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onLoad</td><td align="left">监听页面加载，每个页面触发一次，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）</td></tr><tr><td align="left">onShow</td><td align="left">监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td></tr><tr><td align="left">onReady</td><td align="left">监听页面初次渲染完成。如果渲染速度快，会在页面进入动画完成前触发</td></tr><tr><td align="left">onHide</td><td align="left">监听页面隐藏</td></tr><tr><td align="left">onUnload</td><td align="left">监听页面卸载</td></tr><tr><td align="left">onResize</td><td align="left">监听窗口尺寸变化</td></tr><tr><td align="left">onPullDownRefresh</td><td align="left">监听下拉刷新</td></tr><tr><td align="left">onReachBottom</td><td align="left">监听触底上拉加载</td></tr><tr><td align="left">onShareAppMessage</td><td align="left">监听点击右上角分享</td></tr><tr><td align="left">onPageScroll</td><td align="left">监听页面滚动</td></tr><tr><td align="left">onBackPress</td><td align="left">监听左上角返回按钮或 android 返回键</td></tr></tbody></table><p>以上的生命周期在项目中会经常使用到。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>来一个简单的基于 HTML 的模板语法：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;view class&#x3D;&quot;content&quot;&gt;    &lt;view :title&#x3D;&quot;singer&quot;&gt;喜欢的歌手是: &#123;&#123; singer &#125;&#125;&lt;&#x2F;view&gt;    &lt;button @click&#x3D;&quot;changeName&quot;&gt;更换名字&lt;&#x2F;button&gt;  &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      singer: &quot;周杰伦&quot;,    &#125;;  &#125;,  methods: &#123;    changeName() &#123;      this.singer &#x3D; &quot;张学友&quot;;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue 数据绑定最常见的形式就是使用 <code>Mustache</code> 语法 (双大括号) 的文本插值，比如 <code>&#123;&#123;singer&#125;&#125;</code>，Mustache 标签将会被替代为对应数据对象上 singer 属性的值。无论何时，绑定的数据对象上 singer 属性发生了改变，插值处的内容都会更新，<code>&#123;&#123;singer&#125;&#125;</code> 会被渲染成 <code>周杰伦</code>。</p><p>Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;view v-bind:title&#x3D;&quot;singer&quot;&gt;喜欢的歌手是: &#123;&#123;singer&#125;&#125;&lt;&#x2F;view&gt;&#x2F;&#x2F; 渲染成&lt;view title&#x3D;&quot;周杰伦&quot;&gt;喜欢的歌手是: 周杰伦&lt;&#x2F;view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可使用简写 <code>v-bind</code> 指令，将 <code>v-bind:title=&quot;singer&quot;</code> 写成 <code>:title=&quot;singer&quot;</code>，直接用 <code>:</code> 代替。</p><p>当然模板语法提供了完全的 JavaScript 表达式支持，你可以写一些简单的表达式，下面这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#123; number + 1 &#125;&#125;&#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;&#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;&lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>在上面的代码块中，有个 methods 对象，Vue 把所有的事件都放在 methods 属性中，对应具体的方法函数：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;view class&#x3D;&quot;content&quot;&gt;    &lt;view :title&#x3D;&quot;singer&quot;&gt;喜欢的歌手是: &#123;&#123; singer &#125;&#125;&lt;&#x2F;view&gt;    &lt;button @click&#x3D;&quot;changeName&quot;&gt;更换名字&lt;&#x2F;button&gt;  &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      singer: &quot;周杰伦&quot;,    &#125;;  &#125;,  methods: &#123;    changeName() &#123;      this.singer &#x3D; &quot;张学友&quot;;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的方式可以统一集中处理事件，并且开发者可以直观知道事件绑定在哪个元素中，比如 <code>changeName</code> 方法绑定在 button 中，如果想要解除事件直接删除就可，而不用担心别的元素隐形绑定该事件而导致报错。</p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;example&quot;&gt;  &#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果处理一个比较复杂的变量，那么在 <code>&#123;&#123;&#125;&#125;</code> 书写就不合适了，看到长长的代码都能让你头大。对于任何复杂逻辑，都应当使用计算属性。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;view class&#x3D;&quot;content&quot;&gt;    &lt;view&gt;喜欢的歌手是: &#123;&#123; singer &#125;&#125;&lt;&#x2F;view&gt;    &lt;view&gt;喜欢的歌手是: &#123;&#123; computedSinger &#125;&#125;&lt;&#x2F;view&gt;  &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      singer: &quot;周杰伦&quot;,    &#125;;  &#125;,  computed: &#123;    &#x2F;&#x2F; 对singer二次加工处理    computedSinger: function () &#123;      &#x2F;&#x2F; &#96;this&#96; 指向 Vue 实例      return this.singer.split(&quot;&quot;).reverse().join(&quot;&quot;);    &#125;,  &#125;,  methods: &#123;    changeName() &#123;      this.singer &#x3D; &quot;张学友&quot;;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">喜欢的歌手是: 周杰伦喜欢的歌手是: 伦杰周<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>在 Vue 中指令是带有 <code>v-</code> 前缀的特殊属性，通过属性来操作元素。</p><p>常见的指令有：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- v-text：在元素当中插入值 --&gt;  &lt;view v-text&#x3D;&quot;singer&quot;&gt;&lt;&#x2F;view&gt;  &lt;!-- v-for：根据变量的值来循环渲染元素 --&gt;  &lt;view v-for&#x3D;&quot;(item, index) in list&quot;&gt; &#123;&#123; item &#125;&#125;--&#123;&#123; index &#125;&#125; &lt;&#x2F;view&gt;  &lt;!-- v-if和v-else：根据表达式的真假值来动态插入和移除元素 --&gt;  &lt;view v-if&#x3D;&quot;isShow&quot;&gt;我会显示&lt;&#x2F;view&gt;  &lt;view v-else&gt;我不会显示，但是我要跟有 v-if 指令的元素并齐&lt;&#x2F;view&gt;  &lt;!-- v-model：把input的值和变量绑定了，实现了数据和视图的双向绑定 --&gt;  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;singer&quot; &#x2F;&gt;  &lt;!-- v-bind：绑定元素的属性并执行相应的操作 --&gt;  &lt;view v-bind:class&#x3D;&quot;&#123; t1: isBig &#125;&quot;    &gt;isBig 为 true 时，该元素class类名会变为 t1&lt;&#x2F;view  &gt;  &lt;!-- 上面v-bind可以简写 : --&gt;  &lt;view :class&#x3D;&quot;&#123; t1: isBig &#125;&quot;&gt;isBig 为 true 时，该元素class类名会变为 t1&lt;&#x2F;view&gt;  &lt;!-- v-on：监听元素事件，并执行相应的操作 --&gt;  &lt;view v-on:click&#x3D;&quot;change&quot;&gt;该元素绑定了点击事件&lt;&#x2F;view&gt;  &lt;!-- 上面 v-on：可以简写 @ --&gt;  &lt;view @click&#x3D;&quot;change&quot;&gt;该元素绑定了点击事件&lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      singer: &quot;周杰伦&quot;,      list: [1, 2, 3, 4],      isShow: true,      isBig: true,    &#125;;  &#125;,  methods: &#123;    change() &#123;      &#x2F;&#x2F; ...    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-template-gt-和-lt-block-gt"><a href="#lt-template-gt-和-lt-block-gt" class="headerlink" title="&lt;template/&gt; 和 &lt;block/&gt;"></a><code>&lt;template/&gt;</code> 和 <code>&lt;block/&gt;</code></h3><p>Uniapp 支持在 template 模板中嵌套 <code>&lt;template/&gt;</code> 和 <code>&lt;block/&gt;</code>，用来进行 列表渲染 和 条件渲染。</p><p><code>&lt;template/&gt;</code> 和 <code>&lt;block/&gt;</code> 并不是一个组件，它们仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p><p>代码示例:</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;view&gt;    &lt;template v-if&#x3D;&quot;test&quot;&gt;      &lt;view&gt;test 为 true 时显示&lt;&#x2F;view&gt;    &lt;&#x2F;template&gt;    &lt;template v-else&gt;      &lt;view&gt;test 为 false 时显示&lt;&#x2F;view&gt;    &lt;&#x2F;template&gt;  &lt;&#x2F;view&gt;  &lt;!-- 列表渲染 --&gt;  &lt;block v-for&#x3D;&quot;(item, index) in list&quot; :key&#x3D;&quot;index&quot;&gt;    &lt;view&gt;&#123;&#123; item &#125;&#125; - &#123;&#123; index &#125;&#125;&lt;&#x2F;view&gt;  &lt;&#x2F;block&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局变量-状态管理"><a href="#全局变量-状态管理" class="headerlink" title="全局变量(状态管理)"></a>全局变量(状态管理)</h2><p>在 Vue（Uniapp）中有多种处理全局变量，全局方法的做法：</p><h3 id="1-挂载-Vue-prototype"><a href="#1-挂载-Vue-prototype" class="headerlink" title="1. 挂载 Vue.prototype"></a>1. 挂载 Vue.prototype</h3><p>将一些使用频率较高的常量或者方法，直接扩展到 Vue.prototype 上，每个 Vue 对象都会“继承”下来。</p><p>注意这种方式只支持多个 Vue 页面或多个 nVue 页面之间公用，Vue 和 nVue 之间不公用。</p><p>示例如下：</p><p>在 main.js 中挂载属性/方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>websiteUrl <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在 pages/index/index.Vue 中调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">getBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websiteUrl <span class="token operator">+</span> <span class="token string">'/banner'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式，只需要在 main.js 中定义好即可在每个页面中直接调用。但要注意的是，当前的 this 指向的是当前模块，稍微不注意就可能出现重复命名的情况。</p><p>建议在 Vue.prototype 上挂载的属性或方法，可以加一个统一的前缀<code>$</code>。比如<code>$url</code> 、<code>$global_url</code>这样，在阅读代码时也容易与当前页面的内容区分开。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$websiteUrl <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">;</span><span class="token comment">// 访问</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$websiteUrl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>this.$websiteUrl</code> 的时候，与你协作的开发人员一看 <code>$</code> 开头就知道是全局扩展的属性。</p><p>那如果只是简单的变量呢？</p><h3 id="2-globalData"><a href="#2-globalData" class="headerlink" title="2. globalData"></a>2. globalData</h3><p>如果你了解开发小程序的话，会发现这个和小程序是一样的。如果你还不熟悉，可以往下看</p><p>从字面上来看 globalData ，可以翻译为全局变量。Uniapp 也把 globalData 作为一种比较简单的全局变量使用方式，但是有一点要清楚，<strong>globalData 走内存，storage 走缓存</strong>，即小程序退出， globalData 会清空，storage 则不会。</p><p>在 App.vue 可以定义 globalData ，也可以使用 API 读写这个值。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default &#123;  globalData: &#123;    websiteUrl: &quot;http:&#x2F;&#x2F;localhost:3000&quot;,  &#125;,  onLaunch: function () &#123;    console.log(&quot;App Launch&quot;);  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>js 中操作 globalData 的方式如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">赋值：getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>websiteUrl <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span>取值：console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>websiteUrl<span class="token punctuation">)</span> <span class="token comment">// 'http://localhost:3000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-Vuex"><a href="#3-Vuex" class="headerlink" title="3. Vuex"></a>3. Vuex</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/XAMN7H.png" alt="" style="zoom:40%;" /><p>关于<code>Vuex</code>，内容较多，后面课程详细讲解。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>MVVM 是解决 MVC 的一些问题而出现的。</li><li>Vue 是以数据驱动来改变视图的，所有的元素属性，文字节点，事件都可以进行管理；</li><li>全局变量可以让你在项目中管理整个状态，类似使用”全局变量”。</li></ol><h2 id="一、项目和插件"><a href="#一、项目和插件" class="headerlink" title="一、项目和插件"></a>一、项目和插件</h2><h3 id="1、项目目录结构"><a href="#1、项目目录结构" class="headerlink" title="1、项目目录结构"></a>1、项目目录结构</h3><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/WuGXUa.png" alt="" style="zoom:60%;margin-left:0;" /><p>目录结构：</p><ul><li>pages 业务页面文件存放的目录</li><li>static 静态文件目录(images 之类)</li><li>App.vue App 全局应用配置</li><li>main.js 初始化入口文件</li><li>manifest.json 多端配置信息</li><li>pages.json 配置页面路由、导航等信息，类似原生小程序的 app.json</li></ul><h3 id="2、插件配置"><a href="#2、插件配置" class="headerlink" title="2、插件配置"></a>2、插件配置</h3><p>建议安装：</p><ul><li>NPM</li><li>内置浏览器</li><li>内置终端</li><li>App 真机运行</li><li>uni-app 编译</li><li>Git 插件</li><li>js-beautify</li><li>prettier</li><li>htmlhint</li><li>stylelint</li><li>eslint-plugin-vue</li><li>eslint-js</li><li>js 压缩</li><li>css 压缩</li><li>scss/sass 编译</li><li>es6 编译</li></ul><p>其余根据自己需要安装</p><h2 id="二、生命周期"><a href="#二、生命周期" class="headerlink" title="二、生命周期"></a>二、生命周期</h2><p>Vue 实例有一个完整的生命周期，也就是说从开始创建、初始化数据、编译模板、挂在 DOM、渲染-更新-渲染、卸载等一系列过程。Vue 实例的生命周期钩子就是在某个阶段给你一个做某些处理的机会。比如 Vue 整个渲染完 DOM 的时候，你才可以操作 DOM，如果在 DOM 未渲染完之前去操作 DOM，由于 DOM 不存在而操作失败。</p><p>由于 Uniapp 是集成多端的，因此完整的支持 Vue 实例的生命周期，同时还支持<code>应用生命周期</code>及<code>页面生命周期</code>，区别在于是开发 h5，小程序，app。</p><h3 id="1、应用生命周期"><a href="#1、应用生命周期" class="headerlink" title="1、应用生命周期"></a>1、应用生命周期</h3><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onLaunch</td><td align="left">初始化完成时触发（全局只触发一次），例如：点击分享页面进入应用，可以捕获在分享链接的参数</td></tr><tr><td align="left">onShow</td><td align="left">启动，或从后台进入前台显示</td></tr><tr><td align="left">onHide</td><td align="left">从前台进入后台</td></tr><tr><td align="left">onError</td><td align="left">报错时触发</td></tr></tbody></table><h3 id="2、页面生命周期"><a href="#2、页面生命周期" class="headerlink" title="2、页面生命周期"></a>2、页面生命周期</h3><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onLoad</td><td align="left">监听页面加载，每个页面触发一次，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）</td></tr><tr><td align="left">onShow</td><td align="left">监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td></tr><tr><td align="left">onReady</td><td align="left">监听页面初次渲染完成。如果渲染速度快，会在页面进入动画完成前触发</td></tr><tr><td align="left">onHide</td><td align="left">监听页面隐藏</td></tr><tr><td align="left">onUnload</td><td align="left">监听页面卸载</td></tr><tr><td align="left">onResize</td><td align="left">监听窗口尺寸变化</td></tr><tr><td align="left">onPullDownRefresh</td><td align="left">监听下拉刷新</td></tr><tr><td align="left">onReachBottom</td><td align="left">监听触底上拉加载</td></tr><tr><td align="left">onShareAppMessage</td><td align="left">监听点击右上角分享</td></tr><tr><td align="left">onPageScroll</td><td align="left">监听页面滚动</td></tr><tr><td align="left">onBackPress</td><td align="left">监听左上角返回按钮或 android 返回键</td></tr></tbody></table><h2 id="三、基本语法"><a href="#三、基本语法" class="headerlink" title="三、基本语法"></a>三、基本语法</h2><h3 id="1、插值表达式"><a href="#1、插值表达式" class="headerlink" title="1、插值表达式"></a>1、插值表达式</h3><h3 id="2、指令"><a href="#2、指令" class="headerlink" title="2、指令"></a>2、指令</h3><h3 id="3、事件"><a href="#3、事件" class="headerlink" title="3、事件"></a>3、事件</h3><h3 id="4、计算属性"><a href="#4、计算属性" class="headerlink" title="4、计算属性"></a>4、计算属性</h3><h3 id="5、列表渲染和条件渲染"><a href="#5、列表渲染和条件渲染" class="headerlink" title="5、列表渲染和条件渲染"></a>5、列表渲染和条件渲染</h3><p>Uniapp 支持在 template 模板中嵌套 <code>&lt;template/&gt;</code> 和 <code>&lt;block/&gt;</code>，用来进行 列表渲染 和 条件渲染。</p><p><code>&lt;template/&gt;</code> 和 <code>&lt;block/&gt;</code> 并不是一个组件，它们仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;view&gt;    &lt;template v-if&#x3D;&quot;test&quot;&gt;      &lt;view&gt;test 为 true 时显示&lt;&#x2F;view&gt;    &lt;&#x2F;template&gt;    &lt;template v-else&gt;      &lt;view&gt;test 为 false 时显示&lt;&#x2F;view&gt;    &lt;&#x2F;template&gt;  &lt;&#x2F;view&gt;  &lt;!-- 列表渲染 --&gt;  &lt;block v-for&#x3D;&quot;(item, index) in list&quot; :key&#x3D;&quot;index&quot;&gt;    &lt;view&gt;&#123;&#123; item &#125;&#125; - &#123;&#123; index &#125;&#125;&lt;&#x2F;view&gt;  &lt;&#x2F;block&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、全局变量-状态管理"><a href="#6、全局变量-状态管理" class="headerlink" title="6、全局变量(状态管理)"></a>6、全局变量(状态管理)</h3><p>在 Vue（Uniapp）中有多种处理全局变量，全局方法的做法：</p><p><strong>1. 挂载 Vue.prototype</strong></p><p>将一些使用频率较高的常量或者方法，直接扩展到 Vue.prototype 上，每个 Vue 对象都会“继承”下来。</p><p>注意这种方式只支持多个 Vue 页面或多个 nVue 页面之间公用，Vue 和 nVue 之间不公用。</p><p>示例如下：</p><p>在 main.js 中挂载属性/方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>websiteUrl <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在 pages/index/index.Vue 中调用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default &#123;  methods: &#123;    getBanner() &#123;      uni.request(&#123;        url: this.websiteUrl + &quot;&#x2F;banner&quot;,        method: &quot;GET&quot;,        data: &#123;&#125;,        success: (res) &#x3D;&gt; &#123;&#125;,        fail: () &#x3D;&gt; &#123;&#125;,        complete: () &#x3D;&gt; &#123;&#125;,      &#125;);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式，只需要在 main.js 中定义好即可在每个页面中直接调用。但要注意的是，当前的 this 指向的是当前模块，稍微不注意就可能出现重复命名的情况。</p><p>建议在 Vue.prototype 上挂载的属性或方法，可以加一个统一的前缀<code>$</code>。比如<code>$url</code> 、<code>$global_url</code>这样，在阅读代码时也容易与当前页面的内容区分开。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$websiteUrl <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">;</span><span class="token comment">// 访问</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$websiteUrl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>this.$websiteUrl</code> 的时候，与你协作的开发人员一看 <code>$</code> 开头就知道是全局扩展的属性。</p><p>那如果只是简单的变量呢？</p><p><strong>2. globalData</strong></p><p>如果你了解开发小程序的话，会很熟悉这个，没用过也没事，可以往下看</p><p>从字面上来看 globalData ，可以翻译为全局变量。Uniapp 也把 globalData 作为一种比较简单的全局变量使用方式，但是有一点要清楚，<strong>globalData 走内存，storage 走缓存</strong>，即小程序退出 globalData 会清空，storage 则不会。</p><p>在 App.vue 可以定义 globalData ，也可以使用 API 读写这个值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">globalData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>           <span class="token literal-property property">websiteUrl</span><span class="token operator">:</span> <span class="token string">'http://localhost:3000'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'App Launch'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>js 中操作 globalData 的方式如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">赋值：getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>websiteUrl <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span>取值：console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>websiteUrl<span class="token punctuation">)</span> <span class="token comment">// 'http://localhost:3000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3. Vuex</strong></p><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/FOwbXs.png" alt="" style="zoom:40%;" /><p>Vuex 内容较多，后续前端课程会专门学习。</p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础组件、自定义组件、全局组件</title>
      <link href="/2022/06/26/3-ji-chu-zu-jian-zi-ding-yi-zu-jian-quan-ju-zu-jian/"/>
      <url>/2022/06/26/3-ji-chu-zu-jian-zi-ding-yi-zu-jian-quan-ju-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="基础组件、自定义组件、全局组件"><a href="#基础组件、自定义组件、全局组件" class="headerlink" title="基础组件、自定义组件、全局组件"></a>基础组件、自定义组件、全局组件</h1><h2 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h2><p>什么是组件化？在前端界，特别是现在 React，Vue，Angular 几大流行开发框架的盛行的时代下，已经把组件化的设计思想推向了一个新的高度了，出现了框架与组件共同繁荣的景象。</p><p>组件简单的来说就是可实现独立的功能的单一整体代码片段，无论把这个片段放在哪里，它还是保持着原有的功能和样式，从而可以实现复用，这种整体独立化的设计思想就是组件化，而这样设计出来的单一整体代码片段叫做组件。这样的设计可以非常灵活的使用在项目中，项目设计更具系统性，从而提高了项目管理开发效率。</p><p>如果上面说的比较拗口，来点简单的。比如一座房子，把房子看成一个独立的整体由屋顶、窗户、门，墙等组成。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/NE5xCm.png"></p><p>用代码来表示就是：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;!-- 这是一个房子 --&gt;    &lt;view&gt;        &lt;!-- 屋顶 --&gt;        &lt;roof&gt;&lt;&#x2F;roof&gt;        &lt;!-- 墙 --&gt;        &lt;wall&gt;&lt;&#x2F;wall&gt;        &lt;!-- 窗户 --&gt;        &lt;window&gt;&lt;&#x2F;window&gt;        &lt;!-- 门 --&gt;        &lt;door&gt;&lt;&#x2F;door&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么换成一个页面呢？一个完整的页面由页头，内容，页脚等组成：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;view&gt;        &lt;!-- 页头 --&gt;        &lt;page-header&gt;&lt;&#x2F;page-header&gt;        &lt;!-- 内容 --&gt;        &lt;content&gt;&lt;&#x2F;content&gt;        &lt;!-- 页脚 --&gt;        &lt;pager-footer&gt;&lt;&#x2F;pager-footer&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在开发页面的时候，头部和尾部都是固定不变的，只要内容更改就行。在开发框架中，页面其实也是作为组件化的一部分，但是我们组件更多关注的是页面的每个部件，比如头部，内容区，弹出框甚至确认按钮都可以作为一个组件，每个组件有独立的HTML、CSS、JS 代码。</p><h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><p>Uniapp 根据多端的特性以 Vue 语法糖 + 小程序的 API 打造了一大批组件，这些组件在开发的时候以 HBuliderX 为 IDE，生产的时候把那些代码编译转换为各个平台特性的语法与 API。</p><p>Uniapp 框架根据组件的设计思想为我们设计提供了一系列的基础组件，我们可以通过组合这些基础组件进行快速开发。每一个基础组件都独立定义了样式与功能，这些基础组件中比如 button 组件，你可以设置按钮的大小，文字样式，里面的回调时机，这个按钮组件具有独立的并且有完整的多样化功能，相当于我们以参数的形式去定义这个按钮。</p><p><strong>Uniapp 基础组件分为以下八大类：</strong></p><ul><li>视图容器（View Container）</li><li>基础内容（Basic Content）</li><li>表单组件（Form）</li><li>导航（Navigation）</li><li>媒体组件（Media）</li><li>地图（Map）</li><li>画布（Canvas）</li><li>webview（Web-view）</li></ul><p>这些基础的组件可以让我们快速地开发项目，但由于每个人都处理的业务功能都不一样，就需要根据自己的业务情况去定制一个组件。如果 Uniapp 基础组件没有你想要的组件，而你又需要一个代码片段来实现功能的复用，那么你可以根据组件规范来注册属于自己自定义的组件。</p><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><p>在数据绑定的三大框架 Angular、React、Vue 中，所有的元素都可以细分为一个组件，甚至是一个页面。这个组件可以重复的复用，组件的使用也造就了当今的前端的繁华的原因之一，当然现在使用的 Uniapp 也不例外，综合了小程序，weex，h5 等共有特性。</p><p>一个组件由三大部分组成：template 模板，JS 数据交互和 CSS 样式层：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;view class&#x3D;&quot;content&quot;&gt;       &lt;image class&#x3D;&quot;logo&quot; src&#x3D;&quot;&#x2F;static&#x2F;logo.png&quot;&gt;&lt;&#x2F;image&gt;       &lt;button @tap&#x3D;&quot;getMsg&quot;&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;button&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;    export default &#123;        &#x2F;&#x2F; props 是从父级（引用当前组件）的变量占位，在当前组件下给这些变量一个初始化值（initValue）        props:&#123;            title: &#123;                type: String,                default: &#39;&#39;            &#125;,            list:&#123;                type: Array,                default () &#123;  &#x2F;&#x2F; 这里返回值需要是一个函数                    return []                &#125;            &#125;        &#125;,        data() &#123;            return &#123;                title: &#39;Hello&#39;            &#125;        &#125;,        created() &#123;        &#125;,        methods: &#123;            getMsg () &#123;                console.log(&#39;I am a demo&#39;)                this.$emit(&#39;getMsg&#39;, this)            &#125;        &#125;    &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;    ...&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到上面主要由三个主要元素组成 <code>template</code> ， <code>script</code> ，<code>style</code>。</p><ol><li>html 部分由 <code>template</code> 标签元素闭合组成，其余 <code>view</code>, <code>image</code> 元素遵循<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">小程序的元素</a>定义组成，需要注意的是组件元素必须有一个根元素（root element）包裹，不然会报错编译失败。</li><li><code>script</code> 部分由 ES6 的 <code>export default</code> 导出整个页面模块，可以在其他页面引入该组件。</li></ol><ul><li><p><code>props</code> 是申明需要从父组件接收的数据</p></li><li><p><code>data</code> 数据部分是一个函数，返回该页面实例下的所有数据引用，data 必须声明为返回一个初始数据对象的函数；否则该组件关闭时，数据不会自动销毁，再次打开该组件时，会显示上次数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//正确用法，使用函数返回对象</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Hello'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//错误写法，会导致再次打开页面时，显示上次数据</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Hello'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>props</code> 中声明的数据与组件 <code>data</code> 函数 <code>return</code> 的数据主要区别就是 <code>props</code> 的来自父级，而 <code>data</code> 中的是组件自己的数据，作用域是组件本身，这两种数据都可以在模板 <code>template</code> 及计算属性 <code>computed</code> 和方法 <code>methods</code> 中使用。</p></li><li><p><code>created</code> 组件生命周期函数, 还有 <code>beforeCreate</code> , <code>beforeMount</code> 等生命周期与 Vue 标准组件的生命周期相同，但没有页面级的 onLoad 等生命周期。</p></li><li><p><code>methods</code> 是事件处理函数对象，包含整个页面交互及逻辑处理的函数。在上面例子中我定义了一个 tap 事件在 methods 中，当用户触碰（tap）的时候就会打印这个文字。</p></li></ul><p><code>this.$emit(&#39;getMsg&#39;, this)</code> 这一句是该组件通过 this.$emit() 派发事件，引用这个组件的地方可以利用 $on 对事件进行监听，实现参数的传递与事件向上传递，当前的 this 指的是该组件本身，指针指向当前组件。通俗的话就是，传递一个叫 <code>getMsg</code> 事件并当前所有的参数内容出去，只要在外面接收就可以了。</p><ol><li>css 部分由 <code>style</code> 标签组成，这里面样式只作用当前的元素。style 支持 css3 标准，不用再写多余的 hack，比如 -webkit- 前缀等，已经由整个框架完成 hask 编译, 可以看到 style 标签有个 <code>lang=&quot;scss&quot;</code>,说明里面的样式表可以直接以 <a href="https://www.sass.hk/">scss</a> 形式书写，当然 lang 的属性值还可以是 <a href="http://lesscss.cn/">less</a>,<a href="https://stylus-lang.net/">stylus</a>，找到合适自己的 css 预编译期可以事半功倍。</li></ol><p>父子组件（组件引用者与组件）的关系可以总结为 props 向下传递，事件向上传递。父组件通过 props 给子组件下发数据，子组件通过事件给父组件发送消息。</p><p>注意：</p><ol><li>所有组件与属性名都是小写，单词之间以连字符-连接。</li><li>根节点为 <code>&lt;template&gt;</code>，这个 <code>&lt;template&gt;</code> 下只能有一个根 <code>&lt;view&gt;</code> 组件。</li></ol><p>Uniapp 并没有限制使用 HTML 标签，如果开发者写了 div 等标签，在编译到非 H5 平台时也会被编译器转换为 view 标签，类似的还有 span 转 text 、a 转 navigator 等，包括 css 里的元素选择器也会转。</p><p>但为了管理方便、策略统一，新写代码时仍然建议使用 view 等组件。</p><h2 id="自定义完成一个商品卡片组件"><a href="#自定义完成一个商品卡片组件" class="headerlink" title="自定义完成一个商品卡片组件"></a>自定义完成一个商品卡片组件</h2><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/fcye03.png"></p><p>一个商品信息由商品图片，商品名称，商品价格，商品参考价组成。</p><p>实现步骤：</p><ol><li>建立组件模板。</li><li>准备组件的数据输入，定义 props 里面的数据、类型。</li><li>准备好组件的数据输出。即根据组件逻辑，做好要暴露出来的方法。</li><li>封装完成，进行命名调用。</li></ol><p>在 components 文件夹创建 product-card.vue 文件:</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;view class&#x3D;&quot;prod&quot;&gt;&lt;image class&#x3D;&quot;img&quot; :src&#x3D;&quot;imgSrc&quot; mode&#x3D;&quot;aspectFill&quot;&gt;&lt;&#x2F;image&gt;&lt;view class&#x3D;&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;flex-box&quot;&gt;&lt;view class&#x3D;&quot;price&quot;&gt;￥&#123;&#123;price&#125;&#125;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;market-price&quot;&gt;&#123;&#123;marketPrice&#125;&#125;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;&#x2F;&#x2F; 从父组件传值props: &#123;imgSrc: &#123;type: String,default: &#39;&#39;&#125;,title: &#123;type: String,default: &#39;&#39;&#125;,price: &#123;type: String,default: &#39;&#39;&#125;,marketPrice: &#123;type: String,default: &#39;&#39;&#125;,&#125;,data() &#123;return &#123;&#125;&#125;,methods: &#123;&#125;&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;.prod &#123;position: relative;width: 350rpx;line-height: 34rpx;color: #333;background: #fff;border-radius: 10rpx;overflow: hidden;font-size: 26rpx;border: 1px solid #ccc;margin-bottom: 10px;.img &#123;display: block;width: 100%;height: 260rpx;&#125;.title &#123;padding: 5px;&#125;.price &#123;padding: 2px 5px;color: #ff5000;&#125;.market-price &#123;padding: 2px 5px;font-size: 24rpx;color: #979797;text-decoration: line-through;&#125;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面组件的图片路径、商品名称、价格、市场价都经过 props 定义，只要在引用这个组件的页面里传值就行。</p><p>这样我们在首页 /pages/index.vue 就可以引用这个组件了</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;view class&#x3D;&quot;content&quot;&gt;&lt;product-card :imgSrc&#x3D;&quot;prod.img&quot; :title&#x3D;&quot;prod.title&quot; :price&#x3D;&quot;prod.price&quot; :marketPrice&#x3D;&quot;prod.marketPrice&quot;v-for&#x3D;&quot;count in 8&quot; &#x2F;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;import productCard from &#39;@&#x2F;components&#x2F;product-card.vue&#39;export default &#123;components: &#123;productCard&#125;,data() &#123;return &#123;prod: &#123;img: &#39;http:&#x2F;&#x2F;gw.alicdn.com&#x2F;bao&#x2F;uploaded&#x2F;i3&#x2F;1917047079&#x2F;O1CN01VlEDD522AEJzpw3A5_!!2item_pic.png_360x10000.jpg&#39;,title: &#39;Apple&#x2F;苹果 iPhone 12 Pro&#39;,price: &#39;8699.00&#39;,marketPrice: &#39;￥8699.00&#39;,&#125;&#125;&#125;,onLoad() &#123;&#125;,methods: &#123;&#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;.content &#123;background: #fff;padding: 5px;display: flex;flex-wrap: wrap;justify-content: space-around;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>Uniapp 支持配置全局组件，需在 <code>main.js</code> 里进行全局注册，注册后就可在所有页面里使用该组件。</p><p>但是要求：</p><ul><li>Vue.component 的第一个参数必须是静态的字符串。</li><li>nvue 页面暂不支持全局组件<br>(注：建议统一用按需页面引入组件)</li></ul><p><code>main.js</code>里进行全局导入和注册</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> pageHead <span class="token keyword">from</span> <span class="token string">'./components/page-head.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'page-head'</span><span class="token punctuation">,</span> pageHead<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>index.vue里可直接使用组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;view&gt;    &lt;page-head&gt;&lt;&#x2F;page-head&gt;  &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="非H5端不支持列表"><a href="#非H5端不支持列表" class="headerlink" title="非H5端不支持列表"></a>非H5端不支持列表</h2><p>Uniapp 只支持 Vue 单文件组件（ .vue 组件）。其他的诸如：动态组件，自定义 render 和 <code>&lt;script type=&quot;text/x-template&quot;&gt;</code> 字符串模版等，在非 H5 端不支持。</p><ul><li>Slot（scoped 暂时还没做支持）</li><li>动态组件</li><li>异步组件</li><li>inline-template</li><li>X-Templates</li><li>keep-alive</li><li>transition （可使用 animation 或 CSS 动画替代）</li><li>老的非自定义组件编译模式不支持在组件引用时，在组件上定义 click 等原生事件、v-show（可用 v-if 代替）和 class style 等样式属性(例：<code>&lt;card class=&quot;class-name&quot;&gt; &lt;/card&gt;</code> 样式是不会生效的)。建议更新为自定义组件模式。</li><li>老的非自定义组件编译模式组件里使用 slot 嵌套的其他组件时不支持 v-for。建议更新为自定义组件模式。</li></ul><p>注意</p><p>在 Uniapp 中有些关键字做了保留，不可作为组件名，所以建议自定义组件时加上前缀，类似 <code>xm-button</code>。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>组件是可实现独立的功能的单一整体代码片段，无论把这个片段放在哪里，它还是保持着原有的功能和样式，从而可以实现复用，这种整体独立化的设计思想就是组件化，而这样设计出来的单一整体代码片段叫做组件；</li><li>如果框架的功能组件满足不了你，你就需要根据组件的规范自己定义一个组件；</li><li>全局组件可以挂在到 Vue 实例中，作用在每一个页面文件上；</li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 SASS 编写公用样式</title>
      <link href="/2022/06/26/5-shi-yong-sass-bian-xie-gong-yong-yang-shi/"/>
      <url>/2022/06/26/5-shi-yong-sass-bian-xie-gong-yong-yang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-SASS-编写公用样式"><a href="#使用-SASS-编写公用样式" class="headerlink" title="使用 SASS 编写公用样式"></a>使用 SASS 编写公用样式</h1><p>学习 SCSS 的基本使用，rpx 单位的概念，了解 uni.scss 在项目中的使用。</p><p>实际的开发更多是<strong>结合什么样的工具，利用什么样的技术栈来实现快捷开发</strong>。</p><p>前端三大工具 JS，HTML，CSS，特别是 CSS 上手容易，但是并不能实现复杂的逻辑判断。如果你想轻松自如健步如飞地写样式，那么 SCSS 绝对适合你，特别是 Uniapp 集成了插件后，不用复杂的配置 Webpack 参数即可使用。</p><p>我们在新建 uni-app 项目的模板目录可以发现有一个 uni.scss 文件（相当于公用样式）。这样你就可以轻松使用 scss ，尝试使用 scss ，会让你工作效率更高。</p><p>SCSS 是一种 CSS 预处理器和一种语言, 它可以用来定义一套新的语法规则和函数，以加强和提升 CSS，可以解放代码量。</p><p>Uniapp 首推使用 SCSS ，因此这边主要以 SCSS 来讲解，使用时需要 Vue 文件中 style 节点上加上 <code>lang=&quot;scss&quot;</code> 指定编译语言:</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">&lt;style lang=<span class="token string">"scss"</span>>    <span class="token comment">/* or lang="less" */</span>    <span class="token comment">/* 测试代码 */</span>    <span class="token selector">.list</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token selector">.item</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码经过 scss 编译成 css 后，嵌套的层级会处理成扁平的样式表:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.list</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你还可以跟 JS 一样使用变量，比如定义一个颜色 <code>$white: #fff</code> （变量以 $ 符号开头），所有引用这个变量的样式值都会编译成 <code>#fff</code>：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">&lt;style lang=<span class="token string">"scss"</span>>    <span class="token property"><span class="token variable">$white</span></span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token selector">.list</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$white</span><span class="token punctuation">;</span>        <span class="token selector">.item</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$white</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**/</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.list</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就上面的方法就已经可以让你解放双手了，你是否见过下面这样一大串的，甚至更长的层级的样式表：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.goods-list .item .img .txt</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式 */</span> <span class="token punctuation">&#125;</span><span class="token selector">.goods-list .item .name</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式 */</span> <span class="token punctuation">&#125;</span><span class="token selector">.goods-list .item .name .sub</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式 */</span> <span class="token punctuation">&#125;</span><span class="token selector">.goods-list .item .price</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式 */</span> <span class="token punctuation">&#125;</span><span class="token selector">.goods-list .item .num</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式 */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很多后端的小伙伴就是因为不想写那么臃长的样式表而选择了后端开发，如果你用 SCSS 可以让你 <strong>按 模块 来写样式</strong>：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.goods-list </span><span class="token punctuation">&#123;</span>    <span class="token selector">.item </span><span class="token punctuation">&#123;</span>        <span class="token selector">.img .txt</span><span class="token punctuation">&#123;</span>            <span class="token comment">/* 样式 */</span>         <span class="token punctuation">&#125;</span>        <span class="token selector">.name</span><span class="token punctuation">&#123;</span>            <span class="token comment">/* 样式 */</span>             <span class="token selector">.sub</span><span class="token punctuation">&#123;</span>                <span class="token comment">/* 样式 */</span>             <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.price</span><span class="token punctuation">&#123;</span>            <span class="token comment">/* 样式 */</span>         <span class="token punctuation">&#125;</span>        <span class="token selector">.num</span><span class="token punctuation">&#123;</span>            <span class="token comment">/* 样式 */</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>想了解更多 scss 特性请查看 <a href="https://www.sass.hk/">官网</a>。</p></blockquote><p>在项目目录里面的 uni.scss 文件是个变量文件，了解 scss 才能使你更加了解 uni.scss 的使用，让你在开发中更加自由驰骋。</p><blockquote><p>UniApp 官方文档上说了，UniApp 官方扩展插件及 <a href="https://ext.dcloud.net.cn/">插件市场</a> 上很多三方插件均使用了这些样式变量，如果你是插件开发者，建议你使用 SCSS 预处理，并在插件代码中直接使用这些变量（无需 import 这个文件），方便用户通过搭积木的方式开发整体风格一致的 APP。</p></blockquote><p>UniApp 默认提供这样一套 UI 主题，同时允许在一定程度上定制新的主题，以满足业务的多样化视觉需求。</p><p>开发阶段，每个 UniApp 项目在目录都会有一个 uni.scss 的文件，可以通过修改 scss 文件的变量来定制自己的插件主题，实现自定义主题功能。</p><p>UniApp 定义了相关变量（相当于框架开发规范），方便开发者引用，修改指定变量值即可，以下是 uni.scss 的部分相关变量：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">/* 颜色变量 */</span><span class="token property"><span class="token variable">$theme-color</span></span><span class="token punctuation">:</span> #21d398<span class="token punctuation">;</span><span class="token comment">/* 行为相关颜色 */</span><span class="token property"><span class="token variable">$uni-color-primary</span></span><span class="token punctuation">:</span> #007aff<span class="token punctuation">;</span><span class="token property"><span class="token variable">$uni-color-success</span></span><span class="token punctuation">:</span> #4cd964<span class="token punctuation">;</span><span class="token property"><span class="token variable">$uni-color-warning</span></span><span class="token punctuation">:</span> #f0ad4e<span class="token punctuation">;</span><span class="token property"><span class="token variable">$uni-color-error</span></span><span class="token punctuation">:</span> #dd524d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在你使用的 vue 页面文件中轻松使用这些变量，定制主题就是编辑这个变量列表，然后在页面中使用这些变量：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">&lt;style lang=<span class="token string">"scss"</span>>    <span class="token comment">/* 例如，设置页面背景 #007aff */</span>    <span class="token selector">page</span><span class="token punctuation">&#123;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$uni-color-primary</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token selector">.btn</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$theme-color</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题化下引用这些样式变量，所有的风格都会保持一致，比如这个音乐应用的主题颜色是浅绿色的，一些按钮，图标都是以这个颜色样式呈现。</p><p>运用行为相关颜色，文字基本颜色，背景颜色，边框颜色，文字尺寸，组件禁用态的透明度等等 scss 变量，会让你的项目呈现高度统一，保持一致性.</p><h2 id="使用-rpx-开发"><a href="#使用-rpx-开发" class="headerlink" title="使用 rpx 开发"></a>使用 rpx 开发</h2><p>在样式单位处理方面，<strong>UniApp 默认为 rpx</strong>。这是小程序官方推荐的单位，也是 Uniapp 可跨端的通用单位。</p><p>大多数人心里肯定会在嘀咕，又多了一个样式单位，这是还嫌 rem，%，em，vh不够麻烦是吧？</p><p>慢慢来一起区分这些单位，有个充分认识。</p><p>平常前端在开发过程中，px 是最常用的样式单位，但是随着移动设备的兴起，rem，%，em，vw 更多单位走入了我们的视野。这些单位的出现无非多是为了解决页面适配的问题，rpx 也不例外。</p><p><strong>页面适配指的是同样的布局，在不同大小的屏幕上怎么进行缩放、控制间距、宽高、字号等大小都会以同样的样式渲染。</strong></p><p>页面适配的方式有很多：</p><ul><li>使用 %，按百分比自适应布局；</li><li>使用 rem，结合 html 元素的 font-size 来根据屏幕宽度适配；</li><li>使用 vw、vh，直接根据视口宽高适配。</li></ul><p>可是这些只是在h5网页的某些范围里可以实现，但在其他端并不完全支持， rpx 这个单位就是为了解决这个问题的。</p><p><strong>rpx 即响应式 px</strong>，跟 rem 实现是类似的，一种根据屏幕宽度自适应的动态单位。规定以 <code>750rpx</code> 为屏幕基准宽（移动端更多以 iphone 6 的尺寸设计），750rpx 恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。Uniapp 集成了其他 iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台的特性，为实现多端开发而定义的一种样式单位。</p><p>开发者可以通过设计稿基准宽度计算页面元素 rpx 值，设计稿 1px 与框架样式 1rpx 转换公式如下：</p><p><strong>设计稿 1px / 设计稿基准宽度 = 框架样式 1rpx / 750rpx</strong></p><p>换言之，页面元素宽度在 Uniapp 中的宽度计算公式：</p><p><strong>750 * 元素在设计稿中的宽度 / 设计稿基准宽度</strong></p><p>用一句话简单来说就是，你在750px的设计稿中量到多少数目，就是多少数目的 rpx 量，不用管单位，知道它是伸缩适配的就行。</p><blockquote><p>若设计稿宽度为 750px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 750，结果为：100rpx。</p><p>若设计稿宽度为 640px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 640，结果为：117rpx。</p><p>若设计稿宽度为 375px，元素 B 在设计稿上的宽度为 200px，那么元素 B 在 uni-app 里面的宽度应该设为：750 * 200 / 375，结果为：400rpx。</p></blockquote><p>是不是看到这样的换算方程式有点懵？别急，UniApp 提供了自动换算的功能：</p><p>在 HBuilderX【偏好设置】-&gt;【编辑器设置】中进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/t0ZRG8.png"></p><p>之后代码里就有提示了</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/eNzNbu.png"></p><p>可能你在别处听说过 upx，这个官方已经弃用了，目前版本统一用 rpx，了解完之后就愉快的使用 rpx 吧 :)</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>合理利用工具能让你的开发效率稳步提升，使用 scss 是一个很好提高效率和管理样式的方式；</li><li>uni.scss 可以实现自定义主题功能，实现全局样式变量的应用；</li><li>rpx 是 Uniapp 开发可跨端的通用单位，配置工具提示，根据设计稿大小，可以实现简单的基准换算；</li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>样式与布局、BEM的应用、跨端兼容</title>
      <link href="/2022/06/26/6-yang-shi-yu-bu-ju-bem-de-ying-yong-kua-duan-jian-rong/"/>
      <url>/2022/06/26/6-yang-shi-yu-bu-ju-bem-de-ying-yong-kua-duan-jian-rong/</url>
      
        <content type="html"><![CDATA[<h1 id="样式与布局、BEM的应用、跨端兼容"><a href="#样式与布局、BEM的应用、跨端兼容" class="headerlink" title="样式与布局、BEM的应用、跨端兼容"></a>样式与布局、BEM的应用、跨端兼容</h1><p>主要学习 CSS 命名规范与 HTML 结构相结合的关系，并使用条件编译对应不同平台。</p><p>先看一下 CSS 命名弊端。</p><h2 id="CSS-命名弊端"><a href="#CSS-命名弊端" class="headerlink" title="CSS 命名弊端"></a>CSS 命名弊端</h2><p>你是否有见过这样的代码？</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.top--left .left1-block_nav-liItem > li a</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.gy-theme .bar-header .hy-nav .order-search .pull-down.active .select-drop</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码风格各异的使用了 <code>-</code> , <code>_</code>，驼峰等风格而且嵌套深，CSS 引擎查找样式从右到左进行匹配，遍历页面上每个 li a 元素并确定其父元素。</p><p>每个人的代码都有自己的风格在，对于本人也会对自己写的代码会比较熟悉，但是放在多人开发上就显得另类了。协同开发的小伙伴可能根本不知道你写的是什么，甚至跟你写的代码冲突覆盖。或者会反感你写的代码。</p><p>我们先了解一下 CSS 中命名规范中的 BEM。</p><h2 id="什么叫BEM？"><a href="#什么叫BEM？" class="headerlink" title="什么叫BEM？"></a>什么叫BEM？</h2><p><strong>BEM 是 BlockElementModifier 的简称</strong>，其实是块（block）、元素（element）、修饰符（modifier）的简称，是 CSS 中的一种命名规范。这种巧妙的命名方法让你的 CSS 类对其他开发者来说更加透明而且更有意义。BEM命名约定更加严格，而且包含更多的信息，它们用于一个团队开发一个耗时的大项目。</p><p>BEM 的关键是光凭名字就可以告诉其他开发者某个标记是用来干什么的。通过浏览HTML代码中的class属性，你就能够明白模块之间是如何关联的：有一些仅仅是组件，有一些则是这些组件的子孙或者是元素，还有一些是组件的其他形态或者是修饰符。</p><p>看一下这个大家比较熟悉的哆啦A梦吧，看看这之间有什么相似之处。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/EQrUK7.png"></p><p>上面的哆啦A梦如果用进行分块，可以分为头部（脸部），手部，脚部这三大块。其中我们把脸部拿出来细分：眼睛、嘴巴、鼻子，用关系图表示：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/0k2ee3.png"></p><h2 id="页面布局-BEM-scss"><a href="#页面布局-BEM-scss" class="headerlink" title="页面布局 + BEM + scss"></a>页面布局 + BEM + scss</h2><p>我们用 BEM 规范来表达一下哆啦A梦的结构：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;view&gt;&lt;view class&#x3D;&quot;doraemon&quot;&gt;&lt;view class&#x3D;&quot;doraemon--face&quot;&gt;&lt;view class&#x3D;&quot;doraemon--face-eye doraemon--face-eye_active&quot;&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;doraemon--face-mouth&quot;&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;doraemon--face-nose&quot;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;doraemon--hand&quot;&gt;&lt;view class&#x3D;&quot;doraemon--hand-finger&quot;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;doraemon--footer&quot;&gt;&lt;view class&#x3D;&quot;doraemon--footer-toe&quot;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;.doraemon&#123;.doraemon--face&#123;.doraemon--face-eye&#123;&#125;.doraemon--face-mouth&#123;&#125;.doraemon--face-nose&#123;&#125;&#125;.doraemon--hand&#123;.doraemon--hand-finger&#123;&#125;&#125;.doraemon--footer&#123;.doraemon--footer-toe&#123;&#125;&#125;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面使用 BEM 规范：<strong>块和元素之间用 – 连接</strong>，<strong>元素和修饰符之间用 _ 连接</strong> （示例：b–e_m），来命名 CSS（用代码组织哆啦A梦），组织 HTML 元素结构，一一对应 CSS 代码，使得代码结构更清晰。</p><p>使用 BEM 的方式，还是混淆使用 <code>-</code>，<code>_</code>，而且命名方式长，就命名这一个会让你举手投降。</p><p>利用 BEM 的规范思想，我们可以有自己的一套命名规范。</p><p>比如上面的示例中最里层的代码顶层元素，代表颗粒度最小的元素组成部分了，以此为准则，最底层元素不加任何前缀修饰符和块表示，并且以全小写用 - 连接（kebab-case），因此我们可以这么去做：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;view&gt;&lt;view class&#x3D;&quot;doraemon&quot;&gt;&lt;view class&#x3D;&quot;doraemon-face&quot;&gt;&lt;view class&#x3D;&quot;eye&quot;&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;mouth&quot;&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;nose&quot;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;doraemon-hand&quot;&gt;&lt;view class&#x3D;&quot;finger&quot;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;doraemon-footer&quot;&gt;&lt;view class&#x3D;&quot;toe&quot;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;.doraemon&#123;.doraemon-face&#123;.eye&#123;&#125;.mouth&#123;&#125;.nose&#123;&#125;&#125;.doraemon-hand&#123;.finger&#123;&#125;&#125;.doraemon-footer&#123;.toe&#123;&#125;&#125;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然每个团队的规范不一样，为了更容易阅读和理解，更容易协作，更容易控制，需要服从团队的意识再去以开发效率去考虑，让团队甚至是你个人都能够更加容易地维护代码，如果你做到了，那么你自己也有了规范。</p><p>当我们自己将不同的规范糅合在一起以形成自己的行为准则时，需要考虑：</p><ol><li>修改元素 class 的时候会不会干扰到其他地方的样式，导致其他引用这个样式的地方错乱；</li><li>class 名称是否足够简洁，不会让人烧脑；</li><li>样式的引用在哪里存放，是否会以 class 命名存放，然后修改 style 能快捷定位；</li><li>H5 中 class 命名的元素有没有绑定事件，修改会不会导致事件失效。</li></ol><h2 id="全局样式与局部样式"><a href="#全局样式与局部样式" class="headerlink" title="全局样式与局部样式"></a>全局样式与局部样式</h2><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p><p>注意：</p><ol><li>nvue页面暂不支持全局样式；</li><li>App.vue 中通过 <code>@import</code> 语句可以导入外联样式，一样作用于每一个页面。</li></ol><p>这样我们可以在 common 的文件夹添加一个 common.scss 引入到app.vue中作为基础样式</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">&lt;!-- App.vue -->&lt;style lang=<span class="token string">"scss"</span>>    <span class="token keyword">@import</span> <span class="token string">'./common/css/common.scss'</span><span class="token punctuation">;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样式的条件编译"><a href="#样式的条件编译" class="headerlink" title="样式的条件编译"></a>样式的条件编译</h2><blockquote><p>如果有个需求是 元素在 H5 的情况下渲染红色，在小程序下渲染绿色，怎么做？</p></blockquote><p>判断平台，判断设备？用 UniApp 就不用考虑那么复杂了，UniApp 直接做了条件编译。</p><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p>条件编译写法：<strong>以 #ifdef 或 #ifndef 加 “平台名称” 开头，以 #endif 结尾</strong>。</p><ul><li>#ifdef：if defined 仅在某平台存在</li><li>#ifndef：if not defined 除了某平台均存在</li><li>%PLATFORM%：平台名称</li></ul><p>平台名称参数对应：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/o2WH5Z.png"></p><p>条件编译是利用注释实现的，在不同语法里注释写法不一样，<strong>JS 使用 // 注释、CSS 使用 /* 注释 */</strong></p><p>可以这么实现:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* #ifdef MP-WEIXIN */</span><span class="token selector">.wx-clor</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* #endif */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>使用良好的命名规范更容易阅读和理解，更容易协作，更容易控制，能让你的团队开发效率提升一大截；</li><li>局部样式就是每个 vue 页面的样式，它的权重比全局样式要高；</li><li>UniApp 的条件编译是开发者编写一套代码发布多端项目的利器。</li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面导航、网络请求、数据缓存</title>
      <link href="/2022/06/26/4-ye-mian-dao-hang-wang-luo-qing-qiu-shu-ju-huan-cun/"/>
      <url>/2022/06/26/4-ye-mian-dao-hang-wang-luo-qing-qiu-shu-ju-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="页面导航、网络请求、数据缓存"><a href="#页面导航、网络请求、数据缓存" class="headerlink" title="页面导航、网络请求、数据缓存"></a>页面导航、网络请求、数据缓存</h1><h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h2><p>说到页面导航，我们可能首先想到的是页面跳转（页面A跳转到页面B），页面跳转在不同端之间有不同的区别：</p><ul><li>H5 通过 window.history 属性对其进行访问，改变路由记录从而实现跳转</li><li>iOS/安卓 是改变根视图或操作导航控制器出栈进栈从而实现跳转</li><li>小程序实现跳转采用的方式也是改变根视图或操作导航控制器出栈进栈</li></ul><p>如果你要把用 Uniapp 开发的项目编译成 H5，那么该项目呈现的是单页面应用，单页面应用实现页面跳转是通过监测页面 url 的 hash 改变而加载不同页面。hash 模式背后的原理是 onhashchange 事件，可以在 window 对象上监听这个事件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">'list/list'</span> <span class="token comment">// 设置页面 url 的 hash，会在当前url后加上 '#list/list'</span><span class="token keyword">let</span> hash <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token comment">// '#/pages/list/list'</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 监听 hash 变化，点击浏览器的前进后退或者hash改变会触发</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如访问列表地址，# 后面的路径就是指向页面地址：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://localhost:8080/#/pages/list/list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不想要很丑的 hash，我们可以用路由的 history 模式，在项目的配置文件 【manifest.json】&gt;&gt;【h5配置】&gt;&gt; 【路由模式】 进行修改：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/TV5oTG.png"></p><p>history 模式改变 url 的方式会导致浏览器向服务器发送请求，如果服务器端未做任何处理，则会请求资源失败，我们需要在服务器端做处理：如果匹配不到任何静态资源，则应该始终返回同一个 html 页面。具体操作可以看 <a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">这里</a></p><p>如果你要用 Uniapp 开发的项目编译成微信小程序，就要注意微信小程序的页面栈的限制了，小程序中页面栈<strong>限制最多十层</strong>（微信进行了限制调整），随着页面栈的push增加，在不知道的情况下就会堆栈到十层，再用 API navigateTo 去跳转页面就跳不动了，用户会跳转失效（卡死状态）。</p><p>如果遇到上述问题，删除当前页面栈（redirectTo）或删除所有页面栈（reLaunch）来跳转了，页面栈以跳转的 url 为第一个页面栈。页面栈可以通过 getCurrentPages 方法获取。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> goType <span class="token operator">=</span> <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'redirectTo'</span> <span class="token operator">:</span> <span class="token string">'navigateTo'</span>    wx<span class="token punctuation">[</span>goType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单化是微信小程序的开发理念的其中之一，如果你的页面栈层出现爆栈卡制，那么可以考虑一下你的产品项目的入口是不是设计的太深了。</p><p>通过上面这些介绍，我们来看下 Uniapp 的路由与页面跳转</p><h2 id="Uniapp-的路由与页面跳转"><a href="#Uniapp-的路由与页面跳转" class="headerlink" title="Uniapp 的路由与页面跳转"></a>Uniapp 的路由与页面跳转</h2><p>Uniapp 集成多端的跳转方式，以标签 navigator 及封装 API 的形式控制应用内的跳转。</p><p>如果想要首页跳转到列表页面并传一些参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在起始页面跳转到list.vue页面并传递参数</span>uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/pages/list/list?id=1&amp;name=uniapp'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者使用标签形式跳转</span><span class="token operator">&lt;</span>navigator url<span class="token operator">=</span><span class="token string">"/pages/list/list?id=1&amp;name=uniapp"</span><span class="token operator">></span>去列表<span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">></span><span class="token comment">// 在list.vue页面接受参数</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//option为object类型，会序列化上个页面传递的参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印出上个页面传递的参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印出上个页面传递的参数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用下面的几个 API 操作页面跳转:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 保留当前页面，跳转到应用内的某个页面，使用 uni<span class="token punctuation">.</span>navigateBack 可以返回到原页面。uni<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 关闭当前页面，跳转到应用内的某个页面。uni<span class="token punctuation">.</span><span class="token function">reLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 关闭所有页面，打开到应用内的某个页面。reLaunch 可以打开任意页面。uni<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。switchTab 只能打开 tabBar 页面。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">*</span> navigateTo<span class="token punctuation">,</span> redirectTo 只能打开非 tabBar 页面。<span class="token operator">*</span> 页面跳转路径有层级限制，不能无限制跳转新页面<span class="token operator">*</span> 跳转到 tabBar 页面只能使用 switchTab 跳转<span class="token operator">*</span> 路由 <span class="token constant">API</span> 的目标页面必须是在 pages<span class="token punctuation">.</span>json 里注册的 vue 页面。如果想打开 web url，在 App 平台可以使用 plus<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>openURL 或 web<span class="token operator">-</span>view 组件；<span class="token constant">H5</span> 平台使用 window<span class="token punctuation">.</span>open；小程序平台使用 web<span class="token operator">-</span>view 组件（url需在小程序的联网白名单中）。在 hello uni<span class="token operator">-</span>app 中有个组件 ulink<span class="token punctuation">.</span>vue 已对多端进行封装，可参考。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用标签形式进行跳转改变标签 <code>open-type</code> 属性即可：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigate/navigate?title=navigate<span class="token punctuation">"</span></span> <span class="token attr-name">open-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    跳转到新页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>open-type 跳转方式参数对应：</p><table><thead><tr><th>值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>navigate</td><td>对应 uni.navigateTo 的功能</td><td></td></tr><tr><td>redirect</td><td>对应 uni.redirectTo 的功能</td><td></td></tr><tr><td>switchTab</td><td>对应 uni.switchTab 的功能</td><td></td></tr><tr><td>reLaunch</td><td>对应 uni.reLaunch 的功能</td><td>头条小程序不支持</td></tr><tr><td>navigateBack</td><td>对应 uni.navigateBack 的功能</td><td></td></tr></tbody></table><h2 id="Uniapp中的网络请求"><a href="#Uniapp中的网络请求" class="headerlink" title="Uniapp中的网络请求"></a>Uniapp中的网络请求</h2><p>Uniapp 使用 API <code>uni.request()</code> 发起网络请求，如果你用过微信小程序开发就会熟悉这个 API（wx.request()），Uniapp 兼容了微信代码，如果你写了 <code>wx.</code> 前缀，也可以执行，效果等同于 <code>uni.</code>。</p><p>代码示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://www.example.com/request'</span><span class="token punctuation">,</span> <span class="token comment">//仅为示例，并非真实接口地址</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'uni.request'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'custom-header'</span><span class="token operator">:</span> <span class="token string">'hello'</span> <span class="token comment">//自定义请求头信息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'request success'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定接口地址、请求方法、请求参数，可以拿来即用。如果没有传入 success / fail / complete 参数，则会返回封装后的 Promise 对象:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Promise</span>uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://www.example.com/request'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token comment">// data为一个数组，数组第一项为错误信息，第二项为返回数据</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> res<span class="token punctuation">]</span>  <span class="token operator">=</span> data<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何中断一次请求呢？</p><p>很多场景下是如果请求2个接口数据，当某一个接口成功的时候，就可能需要禁止掉另外一个接口的继续请求了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> requestTask <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://www.example.com/request'</span> <span class="token comment">// 仅为示例，并非真实接口地址。</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 中断请求任务</span>requestTask<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面对 request 对象进行一次返回，这样我们可以调用该对象下的 <code>abort</code> 方法，可中断请求任务。如果需要更好的实现拦截，并统一管理请求，Uniapp 插件市场有 flyio、axios 等三方封装的拦截器可用。</p><p>当然更多的时候，我们会进行另外一个操作，<strong>设置网络请求超时</strong>。</p><p>服务器未必会如同我们想的那么快捷，携带的信息也并非轻量，我们并不希望让这个请求一直保持触发状态。对于用户来说，这就是卡死的状态。Uniapp 规定可以统一在 manifest.json 文件中配置 networkTimeout 的参数：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"mvvm"</span><span class="token punctuation">,</span><span class="token property">"appid"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"description"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"versionName"</span> <span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span><span class="token property">"versionCode"</span> <span class="token operator">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span><span class="token property">"transformPx"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"networkTimeout"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"request"</span> <span class="token operator">:</span> <span class="token number">6000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有效封装能够更好的管理业务，比如服务器 500 错误的处理，400 的错误怎么去处理，这些就是让用户能在错误请求中获得良好体验。</p><p>一段 request 封装处理的响应代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">resInterceptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> conf <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO do your response</span>    <span class="token keyword">const</span> statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span>statusCode    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'statusCode：'</span><span class="token operator">+</span> statusCode<span class="token punctuation">)</span>    <span class="token comment">// response interceptor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> statusCode <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//成功</span>        <span class="token function">_responseLog</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> conf<span class="token punctuation">,</span> <span class="token string">"response 200-299"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">===</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">_responseLog</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> conf<span class="token punctuation">,</span> <span class="token string">"response 500"</span><span class="token punctuation">)</span>        <span class="token comment">// 为了对reject的内容更加可控，我们增加了一个控制字段 wakaryReqToReject</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 根据当前字段来判断是否reject</span>            <span class="token literal-property property">wakaryReqToReject</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 下面可以配置您的其它返回信息，方便您更加统一的处理reject的内容。</span>            <span class="token comment">// 以下内容会被作为reject的返回，根据您的需要处理，比如返回您的具体错误信息</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"服务器错误"</span><span class="token punctuation">,</span>            <span class="token literal-property property">res</span><span class="token operator">:</span> response        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">_responseLog</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> conf<span class="token punctuation">,</span> <span class="token string">"response 300-499"</span><span class="token punctuation">)</span>        <span class="token comment">// 为了对reject的内容更加可控，我们增加了一个控制字段 wakaryReqToReject</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 根据当前字段来判断是否reject</span>            <span class="token literal-property property">wakaryReqToReject</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 下面可以配置您的其它返回信息，方便您更加统一的处理reject的内容。</span>            <span class="token comment">// 以下内容会被作为reject的返回，根据您的需要处理，比如返回您的具体错误信息</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"这里是提示信息"</span><span class="token punctuation">,</span>            <span class="token literal-property property">res</span><span class="token operator">:</span> response        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>良好体验的 APP，还会判断当前是否处于飞行模式、是 wifi 还是 蜂窝数据</li><li>单次网络请求数据量建议控制在50K以下（仅指 JSON数据，不含图片），过多数据应分页获取，以提升应用体验。</li><li>localhost、127.0.0.1等服务器地址，只能在电脑端运行，手机端连接时不能访问，请使用标准 IP 并保证手机能连接电脑网络</li></ol><h2 id="Uniapp-中的storage存储信息"><a href="#Uniapp-中的storage存储信息" class="headerlink" title="Uniapp 中的storage存储信息"></a>Uniapp 中的storage存储信息</h2><p>Uniapp 集成了小程序，app，h5 的数据缓存，统一了 <code>uni.setStorage()</code>，<code>uni.setStorage()</code> 系列API，完成对缓存数据的操作。</p><p>示例代码:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'storage_key'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，存储的内容，只支持原生类型、及能够通过 JSON.stringify 序列化的对象。</p><p>记住，uniapp设置存储有同步与异步之分，使用 <code>uni.setStorage()</code> 参数对象需指定键值 <code>key</code> ，存储数据 <code>data</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 异步需指定 key 和 data</span>uni<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'storage_key'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同步，不用指定 key 和 data 的键</span>uni<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'storage_key'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为是异步操作，有接口调用成功的回调函数，如果有业务逻辑处理或者判定失败等情况，就可以从这入手。</p><p><strong>注意:</strong></p><p>Uniapp 的 Storage 在不同端的实现不同：</p><ol><li>H5 端为 localStorage，<strong>浏览器限制 5M 大小</strong>，持久化，可能会被清理</li><li>App 端为原生的 plus.storage，<strong>无大小限制</strong>，不是缓存，持久化</li><li>各个小程序端为其自带的 storage api，数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用。</li><li>微信小程序<strong>单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB</strong>。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>页面跳转的方式是一个应用的基本，但是入口太深会让你的用户失去耐心；</li><li>请求的二次封装可以更好的管理你的请求动作，取消中断操作，业务问题，服务器错误等；</li><li>留意操作 Storage 的异步同步之分，以及 Storage 在各端的表现；</li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iconfont作为整站图标</title>
      <link href="/2022/06/26/7-shi-yong-iconfont-zuo-wei-zheng-zhan-tu-biao/"/>
      <url>/2022/06/26/7-shi-yong-iconfont-zuo-wei-zheng-zhan-tu-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="使用iconfont作为整站图标"><a href="#使用iconfont作为整站图标" class="headerlink" title="使用iconfont作为整站图标"></a>使用iconfont作为整站图标</h1><p>主要学习如何建立图标库，并在 UniApp 中应用字体图标。</p><p>我们在做项目的时候，使用的图标会很多，全都以图片形式加载的话，整个文件体积会变得非常大，不仅会增加额外的 http 请求，还会有图片放大后失真的问题，在小程序开发当中，整个小程序所有代码量大小不超过 8M。如果没有很合理的运用与优化，加载速度也会大打折扣。</p><h2 id="为什么要使用字体图标"><a href="#为什么要使用字体图标" class="headerlink" title="为什么要使用字体图标"></a>为什么要使用字体图标</h2><ul><li>字体图标是矢量图标，可进行无限缩放不失真，一旦字体加载了，图标就会马上渲染出来，不需要下载一个个图像</li><li>加载字体图标无需 http 请求，字体图标体积更小，相较图片加载速度更快</li><li>兼容性方面，字体图标支持现代浏览器，甚至是低版本的IE浏览器</li><li>可以像页面中的文字一样，通过 font-size 属性来对其进行大小的设置，而且还可以添加各种文字效果，如 color、hover、filter、text-shadow、transform 等效果</li></ul><p><a href="https://www.iconfont.cn/">Iconfont-阿里巴巴矢量图标库</a>  是国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能。由阿里巴巴体验团队倾力打造，是设计和前端开发的便捷工具。</p><h2 id="使用-iconfont-图标库"><a href="#使用-iconfont-图标库" class="headerlink" title="使用 iconfont 图标库"></a>使用 iconfont 图标库</h2><p>在阿里图标库里，可以找到非常多各式各样的字体图标，并且可以私人上传定制图标库，与团队协同开发管理图标。首次登录需要先捆绑账号，支持github及新浪微博快捷入口登录。登录后点击【图标管理】&gt;&gt;【我的项目】进入项目页面：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/PN6w8E.png"></p><p>进入页面点击右侧紫色的添加图标新建一个项目，点进出现弹窗，在弹出的弹窗中填好项目名称及项目描述，然后点击新建：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/S2aYYC.png"></p><p>回到图标库，在搜索框中输入自己想要的图标，并鼠标悬浮到具体图标中，点击购物车（添加入库），此时你的购物车会添加1：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Eaka0Z.png"></p><p>找到所有想要的图标并添加进购物车后，点击右上角购物车的图标，将购物车里的图标添加至项目，选择刚才新建的项目：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/AVTqlw.png"></p><p>回到我的项目页面，点击<strong>下载至本地</strong>按钮，解压即可：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/voMyIW.png"></p><h2 id="在项目中使用-iconfont"><a href="#在项目中使用-iconfont" class="headerlink" title="在项目中使用 iconfont"></a>在项目中使用 iconfont</h2><p>第一步，解压文件</p><p>将上面下载的文件解压缩后可以看到 woff，woff2，ttf，eot后缀名的字体文件：</p><p>查看 iconfont.css 样式表中如何引用这些字体文件，并且可以清楚知道，引用了四个字体文件加上一个svg文件：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"iconfont"</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'iconfont.eot?t=1573520590765'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token comment">/* IE9 */</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'iconfont.eot?t=1573520590765#iefix'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* IE6-IE8 */</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'data:application/x-font-woff2;charset=utf-8;base64,d0...'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'iconfont.woff?t=1573520590765'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'iconfont.ttf?t=1573520590765'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'iconfont.svg?t=1573520590765#iconfont'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* iOS 4.1- */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，引入文件</p><p>将上面提到的5个文件放入到新建文件夹 common/css 中，放在这里的原因是字体属于全局文件，可以统一管理：</p><p>要想在所有页面上生效，要在 App.vue 引入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- App.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*每个页面公共css */</span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">'./common/css/iconfont.css'</span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：引用字体文件的时候注意使用相对路径，避免查找失败。</strong></p><p>第三步，在页面中使用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;view class&#x3D;&quot;content&quot;&gt;&lt;view class&#x3D;&quot;iconfont&quot;&gt;&amp;#xe64f;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;iconfont&quot;&gt;&amp;#xe604;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以在浏览器，小程序上预览效果了：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/F3Y6DM.png"></p><p>可能有小伙伴会有疑问，为什么这样做会生效？其实我们在 App.vue 引入 iconfont.css 的时候，样式表<code>font-family</code>属性指定了字体文件，作用于<code>iconfont</code>命名的元素，并且在字体库中查找对应的 code（以 <code>iconfont</code> 命名的元素包裹的字符）：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;!-- iconfont.css -->.iconfont</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'iconfont'</span> <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 28rpx<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 <code>iconfont</code> 命名的元素包裹的字符从哪里来呢？就是在 iconfont 项目中把字体图标显示以 Unicode 的形式显示，鼠标悬浮可复制代码：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Em1nFI.png"></p><p>如果你不想每次都这么麻烦，添加一个图标然后又重复以上操作，你可以使用生成的 cdn 地址：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/vwb3wp.png"></p><p>代码修改调整：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;!-- iconfont.css --><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'iconfont'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://at.alicdn.com/t/font_1487619_1bjjf4kxjov.eot'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://at.alicdn.com/t/font_1487619_1bjjf4kxjov.eot?#iefix'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://at.alicdn.com/t/font_1487619_1bjjf4kxjov.woff2'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://at.alicdn.com/t/font_1487619_1bjjf4kxjov.woff'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://at.alicdn.com/t/font_1487619_1bjjf4kxjov.ttf'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://at.alicdn.com/t/font_1487619_1bjjf4kxjov.svg#iconfont'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：小程序不能自动配对 https 的，必须手动添加 <code>https:</code>，所以最好要将 iconfont.css 文件内 url 路径转换为在线路径，加上 <code>https:</code></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>有效利用字体图标的优势，让臃肿的项目可以缩小不少，并优化速度；</li><li>iconfont 的引入能让你有效的管理图标库；</li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex快速掌握</title>
      <link href="/2022/06/26/8-vuex-kuai-su-zhang-wo/"/>
      <url>/2022/06/26/8-vuex-kuai-su-zhang-wo/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex快速掌握"><a href="#Vuex快速掌握" class="headerlink" title="Vuex快速掌握"></a>Vuex快速掌握</h1><h2 id="什么是-Vuex？"><a href="#什么是-Vuex？" class="headerlink" title="什么是 Vuex？"></a>什么是 Vuex？</h2><p>首先我们要弄清楚 Vuex 是做什么的？为什么使用 Vuex ?</p><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。uniapp集成了vuex的状态管理功能，可以在多端情况下使用。</p><p>Vuex 需要解决的问题：</p><ol><li>多个视图依赖于同一状态。比如当前音乐应用的账号页，我的页面保持登录状态以及用户信息。</li><li>来自不同视图的行为需要变更同一状态。比如登录页更改登录状态，账号页面退出登录改成未登录状态。</li></ol><p>这个状态自管理应用包含以下几个部分：</p><ul><li>state，驱动应用的数据源；</li><li>view，以声明方式将 state 映射到视图；</li><li>actions，响应在 view 上的用户输入导致的状态变化。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mY6Yqk.png"></p><p>在这引用了一位技术大拿关于管理状态（state）的讲解：</p><blockquote><p>不管是 Vue ，还是 React，都需要管理状态（state），比如组件之间都有共享状态的需要。什么是共享状态？比如一个组件需要使用另一个组件的状态，或者一个组件需要改变另一个组件的状态，都是共享状态。</p></blockquote><blockquote><p>父子组件之间，兄弟组件之间共享状态，往往需要写很多没有必要的代码，比如把状态提升到父组件里，或者给兄弟组件写一个父组件，听听就觉得挺啰嗦。</p></blockquote><blockquote><p>如果不对状态进行有效的管理，状态在什么时候，由于什么原因，如何变化就会不受控制，就很难跟踪和测试了。如果没有经历过这方面的困扰，可以简单理解为会搞得很乱就对了。</p></blockquote><blockquote><p>在软件开发里，有些通用的思想，比如隔离变化，约定优于配置等，隔离变化就是说做好抽象，把一些容易变化的地方找到共性，隔离出来，不要去影响其他的代码。约定优于配置就是很多东西我们不一定要写一大堆的配置，比如我们几个人约定，view 文件夹里只能放视图，不能放过滤器，过滤器必须放到 filter 文件夹里，那这就是一种约定，约定好之后，我们就不用写一大堆配置文件了，我们要找所有的视图，直接从 view 文件夹里找就行。</p></blockquote><blockquote><p>根据这些思想，对于状态管理的解决思路就是：把组件之间需要共享的状态抽取出来，遵循特定的约定，统一来管理，让状态的变化可以预测。根据这个思路，产生了很多的模式和库。</p></blockquote><p>Vuex 防止随意修改而不好跟踪状态，规定组件不允许直接修改 store 实例的 state，组件必须通过 action 来改变 state ，也就是说，组件里面应该执行 action 来分发 (dispatch) 事件通知 store 去改变。这样约定的好处是，我们能够记录所有 store 中发生的 state 改变，同时实现能做到记录变更 (mutation)、保存状态快照、历史回滚的先进的调试工具。</p><h2 id="Vuex-的基础使用（创建一个改变登录状态的应用）"><a href="#Vuex-的基础使用（创建一个改变登录状态的应用）" class="headerlink" title="Vuex 的基础使用（创建一个改变登录状态的应用）"></a>Vuex 的基础使用（创建一个改变登录状态的应用）</h2><p>我们一个简单的登录状态的应用开始。</p><p><strong>第一步，创建 store</strong> </p><p>首先在根目录下新建文件夹 <code>store</code>，并创建 index.js ：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">isLogin</span><span class="token operator">:</span> <span class="token boolean">false</span>   <span class="token comment">// 是否登录的状态，默认为未登录 false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定义一个操作isLogin状态的方法</span>        <span class="token function">storeLogin</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          state<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码引入了 <code>vue</code>，<code>vuex</code> ，并使用 <code>Vue.use(Vuex)</code> 安装Vuex插件，在 <code>new Vuex.Store</code> 传参对象中定义 <code>state</code> ，<code>mutations</code> 。定义了 <code>isLogin</code>，整个项目以这个变量作为登录标记，<code>storeLogin</code> 的方法来修改 <code>isLogin</code> 值，而且修改 <code>isLogin</code> 值只能通过 <code>storeLogin</code> 方法。</p><p><strong>第二步，新建登录页login.vue</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/F6m90V.png"></p><p><strong>第三步，引入 Vuex</strong> </p><p>在主入口 main.js 引入刚才新建的 store：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$store <span class="token operator">=</span> storeVue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>App<span class="token punctuation">.</span>mpType <span class="token operator">=</span> <span class="token string">'app'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>App<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>Vue.prototype.$store = store</code> 把 <code>store</code> 挂在到 <code>Vue</code> 中，这样整个项目就可以共享这个 <code>$store</code> 状态，通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。下面要在 login.vue 页面共享 <code>isLogin</code> 登录状态；</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- login.vue --&gt;&lt;template&gt;    &lt;view&gt;       登录状态: &#123;&#123;$store.state.isLogin&#125;&#125;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;    export default &#123;        data() &#123;            return &#123;                            &#125;;        &#125;    &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第四步：访问 Vuex 定义变量</strong></p><p>在应用启动情况下访问 <code>http://localhost:8080/#/pages/login/login</code> 可以看到 login.vue 页面上的 <code>&#123;&#123;$store.state.isLogin&#125;&#125;</code> 被渲染成了一个 <code>false</code>，这个 <code>false</code> 是第一步在文件 store/index.js 中添加的 <code>isLogin</code> 变量。</p><p>因为有 <code>Vue.prototype.$store = store</code> 这样我们就可以在页面组件中以 <code>$store</code> 访问 <code>state</code> 定义下的所有状态变量，也就是说你可以在页面B，页面C，甚至是页面Y都可以访问到这个变量。</p><p>那如果我定义的变量很多或者很长呢，这种写法 <code>$store.state.isLogin</code> 有没有更加便捷的方法呢？</p><h2 id="Vuex-的-state-多种用法"><a href="#Vuex-的-state-多种用法" class="headerlink" title="Vuex 的 state 多种用法"></a>Vuex 的 state 多种用法</h2><p>Vuex 封装了一些<strong>辅助函数</strong> <code>mapState</code> 方法，让你写的状态可以映射出来，减少查询。当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。这样我们可以简化一下 login.vue 代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- login.vue --&gt;&lt;template&gt;    &lt;view&gt;        登录状态: &#123;&#123;isLogin&#125;&#125;        登录状态: &#123;&#123;hasLogin&#125;&#125;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;    import &#123; mapState &#125; from &#39;vuex&#39;;    export default &#123;        data() &#123;            return &#123;                           &#125;;        &#125;,        computed: mapState(&#123;            &#x2F;&#x2F; 箭头函数可使代码更简练            isLogin: state &#x3D;&gt; state.isLogin,                    &#x2F;&#x2F; 传字符串参数 &#39;isLogin&#39; 等同于 &#96;state &#x3D;&gt; state.isLogin&#96;            hasLogin: &#39;isLogin&#39;,        &#125;),        &#x2F;&#x2F; computed: &#123;        &#x2F;&#x2F;    ...mapState([&#39;isLogin&#39;])        &#x2F;&#x2F; &#125;,    &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>script</code> 中引入辅助函数 <code>import &#123; mapState &#125; from &#39;vuex&#39;</code>，就可以在 <code>computed</code> 对象中使用 <code>mapState</code> 辅助函数了；</p><p>上面第一个写法中 由 <code>state.isLogin</code> 映射到状态 <code>isLogin</code>，第二个写法是直接以传字符串参数的形式将Vuex的储存状态 <code>isLogin</code> 直接映射到 <code>hasLogin</code> ，保存后可以在浏览器看到 <code>isLogin</code> ，<code>hasLogin</code> 渲染是一样的。</p><p>好像还不够简便的样子，那来一个更简便的写法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'isLogin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样的形式也可以访问 <code>isLogin</code> 状态，该写法运用了es6中的 <code>...</code> 对象扩展运算符号，意思是里面的数组值 <code>[&#39;isLogin&#39;]</code> 通过 <code>mapState</code> 辅助方法映射出来之后，再通过扩展运算符一个一个对应出来，这样就可以在视图直接访问了 <code>&#123;&#123;isLogin&#125;&#125;</code>，如果有多个状态值（比如还有 ‘stateA’ , ‘stateB’ ）就显得便捷很多了，不用写多余的方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'isLogin'</span><span class="token punctuation">,</span> <span class="token string">'stateA'</span><span class="token punctuation">,</span> <span class="token string">'stateB'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面只是介绍如何获取 state 状态，那如果想要改变状态呢？</p><h2 id="Vuex-的-Mutation-用法"><a href="#Vuex-的-Mutation-用法" class="headerlink" title="Vuex 的 Mutation 用法"></a>Vuex 的 Mutation 用法</h2><p>还记得我们在 store/index.js 文件中定义一个操作 <code>isLogin</code> 状态的方法吗？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ...</span><span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个操作isLogin状态的方法</span>    <span class="token function">storeLogin</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</strong> （在 mutations 中定义的方法），我们可以访问事件去触发 <code>storeLogin()</code> 更改登录状态，重新回到 login.vue 页面，添加一个按钮方法去触发 <code>storeLogin()</code>:</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- login.vue --&gt;&lt;template&gt;    &lt;view&gt;        &lt;view&gt;            登录状态: &#123;&#123;isLogin&#125;&#125;        &lt;&#x2F;view&gt;        &lt;button @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;    import &#123; mapState &#125; from &#39;vuex&#39;;    export default &#123;        data() &#123;            return &#123;                            &#125;;        &#125;,        computed: &#123;           ...mapState([&#39;isLogin&#39;])        &#125;,        methods: &#123;            &#x2F;&#x2F; 登录            login () &#123;               this.$store.commit(&#39;storeLogin&#39;)            &#125;        &#125;,    &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们点击登录按钮的时候执行 <code>this.$store.commit(&#39;storeLogin&#39;)</code> 就可以把登录状态修改为 <code>true</code> 了。</p><p>我们不能直接调用一个 mutation 方法事件，要调用 store.commit 方法去触发，相当于中间搭了一个桥来衔接这些方法。</p><p>在程序设定开发中我们肯定会改变很多状态，不仅仅是把未登录改为登录，还会退出登录改为未登录，这样我们可以不用写一个退出登录的方法，我们直接传递一个参数过去就可以搞定了，回到 store/index.js 文件中 <code>storeLogin()</code> 这个方法会接受 <code>state</code> 作为第一个参数，自定义参数作为余后的参数，通常把这叫做 <strong>载荷</strong><code>payload</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">isLogin</span><span class="token operator">:</span> <span class="token boolean">false</span>   <span class="token comment">// 是否登录的状态，默认为未登录 false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定义一个操作isLogin状态的方法</span>        <span class="token function">storeLogin</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          state<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们在 login.vue 页中就可以传参数了。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- login.vue --&gt;&lt;template&gt;    &lt;view&gt;        &lt;view&gt;            登录状态: &#123;&#123;isLogin&#125;&#125;        &lt;&#x2F;view&gt;        &lt;button @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;        &lt;button @click&#x3D;&quot;logout&quot;&gt;退出&lt;&#x2F;button&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;    import &#123; mapState &#125; from &#39;vuex&#39;;    export default &#123;        data() &#123;            return &#123;                            &#125;;        &#125;,        computed: &#123;           ...mapState([&#39;isLogin&#39;])        &#125;,        methods: &#123;            &#x2F;&#x2F; 登录            login () &#123;               this.$store.commit(&#39;storeLogin&#39;, true)            &#125;,            &#x2F;&#x2F; 退出            login () &#123;               this.$store.commit(&#39;storeLogin&#39;, false)            &#125;        &#125;,    &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再添加一个退出按钮，同样调用触发 <code>storeLogin()</code> 修改登录状态，这样只是更改参数就可以改变登录状态了，是不是很简单 ，再优化一下代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- login.vue --&gt;&lt;template&gt;    &lt;view&gt;        &lt;view&gt;            登录状态: &#123;&#123;isLogin&#125;&#125;        &lt;&#x2F;view&gt;        &lt;button @click&#x3D;&quot;login(true)&quot;&gt;登录&lt;&#x2F;button&gt;        &lt;button @click&#x3D;&quot;login(false)&quot;&gt;退出登录&lt;&#x2F;button&gt;                &lt;navigator url&#x3D;&quot;..&#x2F;index&#x2F;index&quot;&gt;去首页&lt;&#x2F;navigator&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;    import &#123; mapState &#125; from &#39;vuex&#39;;    export default &#123;        data() &#123;            return &#123;                            &#125;;        &#125;,        computed: &#123;           ...mapState([&#39;isLogin&#39;])        &#125;,        methods: &#123;            &#x2F;&#x2F; 改变登录状态            login (bool) &#123;               this.$store.commit(&#39;storeLogin&#39;, bool)            &#125;,        &#125;,    &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改首页，让首页也可以访问登录状态 <code>isLogin</code> ：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 首页 index.vue --&gt;&lt;template&gt;    &lt;view class&#x3D;&quot;content&quot;&gt;        &lt;view class&#x3D;&quot;text-area&quot;&gt;            &lt;text class&#x3D;&quot;title&quot;&gt;当前是首页&lt;&#x2F;text&gt;            &lt;view&gt;                登录状态: &#123;&#123;isLogin&#125;&#125;            &lt;&#x2F;view&gt;        &lt;&#x2F;view&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;    import &#123; mapState &#125; from &#39;vuex&#39;;    export default &#123;        data() &#123;            return &#123;                            &#125;;        &#125;,        computed: &#123;           ...mapState([&#39;isLogin&#39;])        &#125;,        methods: &#123;                    &#125;,    &#125;&lt;&#x2F;script&gt;&lt;style&gt;    &lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器运行，你就可以尝试改变登录状态的时候去首页查看，发现首页也是登录的。如果实现了，恭喜你已经掌握了 Vuex 。</p><p>Vuex 还有 Action 概念，可以包含任意异步操作，如果你使用了异步操作，直接调用 mutation 里面的方法可能并不会成功，因为 mutation 必须同步执行。</p><p>如果你的应用模块足够多的话，可以以模块的方式管理这些，比如客户模块，商品模块，这样这些状态就可以轻松管理了。整个项目，无论是页面还是组件都可以用上面提到的方式访问到 state 和修改 state。</p><p>然后再回顾一下这篇文章的第一个图，你就能轻松了解 Vuex 的机制了。</p><p>想要查看更多的理论知识可以查看 <a href="https://vuex.vuejs.org/zh/">官网vuex</a>。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>Vuex 是一个专为应用程序开发的状态管理模式。</li><li>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。我们不能直接调用一个 mutation 方法事件，我们要调用 store.commit 方法去触发，相当于中间搭了一个桥来衔接这些方法。</li><li>合理的使用 Vuex 可以让我们友好便捷的管理状态，不仅是登录状态，可以是用户信息，可以是一个修改标记，但使用 Vuex 可能是繁琐冗余的。——如果你的应用够简单，最好不要使用 Vuex。</li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序、APP调试环境配置</title>
      <link href="/2022/06/26/9-xiao-cheng-xu-app-diao-shi-huan-jing-pei-zhi/"/>
      <url>/2022/06/26/9-xiao-cheng-xu-app-diao-shi-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序、APP调试环境配置"><a href="#小程序、APP调试环境配置" class="headerlink" title="小程序、APP调试环境配置"></a>小程序、APP调试环境配置</h1><p>在解决了大部分开发的时候，我们的开发可以往调试处理兼容方向走了，虽然浏览器（内置浏览器）提供了很大的便利性，可以在控制台查看交互信息，样式的渲染。但实际的代码呈现还是有不一样的，并且模拟器存在一定的误差，因此需要真机模拟处理。</p><p>在操作之前先说一下关于兼容。</p><h2 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h2><p>Web 网页是以浏览器为载体的，因此兼容问题都是浏览器方面的问题，当前市场上浏览器种类很多，不同浏览器的内核也不尽相同，所以各个浏览器对网页的解析存在一定的差异。浏览器内核主要分为两种，一是渲染引擎，另一个是 JS 引擎，内核更加倾向于说渲染引擎。</p><p>开发 H5 页面要处理兼容，需要了解不同浏览器的解析方式和对HTML，CSS，JS 三者不同版本的支持，比如桌面端浏览器对 ES2015 的支持情况：</p><ol><li>Chrome：51 版起便可以支持 97% 的 ES6 新特性。</li><li>Firefox：53 版起便可以支持 97% 的 ES6 新特性。</li><li>Safari：10 版起便可以支持 99% 的 ES6 新特性。</li></ol><p>如果你的 JS 使用了 ES6 的语法，又没有转编译成这些版本浏览器支持的语言，浏览器就会认不出你写的代码而报错。</p><p>HTML，CSS 的兼容问题大致如此，导致渲染出现异常，未能达到预期效果。</p><p>网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题，网站必须做好浏览器兼容，才能够让网站在不同的浏览器下都正常显示。因此只要多个浏览器查看有没有问题出现。很幸运的是，使用 HBilder X 编译器的 es6 编译插件就可以在 UniApp 愉快地使用 es6了，你的代码就会编译成其他浏览器可识别的 ES2015 版本代码了。</p><h2 id="小程序兼容"><a href="#小程序兼容" class="headerlink" title="小程序兼容"></a>小程序兼容</h2><p>本质其实就是 hybrid app，介于 Web APP 与 Native 之间，具备丰富的调用手机各种功能的接口，同时又具备灵活性，可跨平台。</p><blockquote><p>微信小程序运行在三端：iOS（iPhone/iPad）、Android 和 用于调试的开发者工具。<br>三端的脚本执行环境以及用于渲染非原生组件的环境是各不相同的：<br>在 iOS 上，小程序逻辑层的 javascript 代码运行在 JavaScriptCore 中，视图层是由 WKWebView 来渲染的，环境有 iOS8、iOS9、iOS10；</p><p>在 Android 上，旧版本，小程序逻辑层的 javascript 代码运行中 X5 JSCore 中，视图层是由 X5 基于 Mobile Chrome 57 内核来渲染的；新版本，小程序逻辑层的 javascript 代码运行在 V8 中，视图层是由自研 XWeb 引擎基于 Mobile Chrome 67 内核来渲染的；</p><p>在开发工具上，小程序逻辑层的 Javascript 代码是运行在 NW.js 中，视图层是由 Chromium 60 Webview 来渲染的。</p></blockquote><p>小程序是运行在微信，以微信作为载体的，大部分兼容性问题都已经由微信内部处理。更多的兼容问题体现在不同微信版本中。</p><p>我们要处理的是一些小程序特性的问题，举例几个兼容问题：</p><ol><li>scroll-view 在手机上可能会出现滚动条</li><li>直接在标签添加 style 行内样式</li><li>CSS 不支持本地路径图片</li><li>控件层级表现有出入，z-index 在 native 组件下失效</li></ol><p>这些问题只是因为语言特性渲染机制不同产生的，微信也在文档做了说明，要想处理兼容问题，熟知语言框架的特性，才能避免问题，最快定位问题，处理问题。开发时尽量避免使用太新的CSS，JS，HTML，可能在老款手机上产生浏览器兼容问题。</p><h2 id="小程序调试"><a href="#小程序调试" class="headerlink" title="小程序调试"></a>小程序调试</h2><p>进行小程序调试，打开 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a>，还需要申请一个微信小程序的 AppID ，可登录 <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com</a> 申请。</p><p>接着：</p><ol><li>在 HbuilderX 编译器中打开这个工程，找到 manifest.json 文件并选中；</li><li>找到微信小程序配置，在配置面板微信小程序 AppID 中输入刚才申请注册的 AppID；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/UEOR9c.png"></p><ol><li>点击【运行】&gt;&gt; 【运行到小程序模拟器】&gt;&gt; 【运行到小程序模拟器】&gt;&gt; 【微信开发者工具】 （选定第二个，可指定启动页面）：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/1ZrS9i.png"></p><ol><li>项目开始编译，并启动微信开发者工具，可能需要在微信开发者工具中开启服务端口（第一章说过），然后 HbuilderX 才能访问，这个在控制台一般有提示，打开微信开发者工具【设置】&gt;&gt;【安全设置】&gt;&gt; 【开启服务端口】就行了（当然还需要手机扫码登录微信开发者）。</li><li>这时候的代码保持着热更新中，在 HbuilderX 编译器保存文件（Ctrl + S）可及时查看修改效果，这也是一大便利。</li><li>在微信小程序的工具栏找到预览并点击，小程序会打包你的代码，等待打包完就会出现一个二维码，用手机微信扫描即可。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/qL5pXA.png"></p><ol><li>在真机上，点击屏幕右上角的按钮打开的菜单里选择「打开调试」，会要求重新打开小程序，再次打开发现右下角会出现 vConsole 按钮，点击打开看到关于请求，报错，生命周期，系统等日志。</li></ol><h2 id="ios真机调试"><a href="#ios真机调试" class="headerlink" title="ios真机调试"></a>ios真机调试</h2><p>HbuilderX 的调试对比 xcode 等其他工具是非常简单了，跟着步骤提示来，你也可以成功</p><h3 id="Mac上真机调试"><a href="#Mac上真机调试" class="headerlink" title="Mac上真机调试"></a>Mac上真机调试</h3><p>在 HbuilderX 编译器里面 点击 【运行】&gt;&gt; 【运行到手机或模拟器】&gt;&gt; 【运行设备**】在这里可以检测到在 itunes 关联的苹果手机：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/TTBWsJ.png"></p><p>建立手机连接需要安装 HbuilderX 调试基座（iPhone_base.ipa）关联，根据提示点击安装在苹果手机：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/WDleWk.png"></p><p>安装成功之后会，手机上可以看见 HbuilderX 图标，点开。稍等片刻，HbuilderX 会开始打包代码同步到手机并运行</p><blockquote><p>UniApp 会提示 iOS9.0 及以上系统需要在”设置”-“通用”-“设备管理”(或”描述文件”)中信任 DCloud 企业证书( Digital Heaven 开头的证书)才可以正常使用，<br>我们需要在手机上打开该软件可能会显示此软件未受信任的情况，需要 【设置】&gt;&gt; 【通用】&gt;&gt;【设备管理】&gt;&gt; 进入设备管理页面，我们找到想要授信的企业级应用，直接点击打开，系统将会在 iPhone 上弹出一个提醒窗口，我们直接点击【信任】按钮即可</p></blockquote><p>如无意外，编译成功：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/L76bOy.png"></p><p>找到 HbuilderX 的调试小甲虫</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ZHqaw2.png"></p><p>点击会弹出窗口</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ZYxBde.png"></p><p>待打开就可以调试应用了</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/qEHpip.png"></p><h3 id="Windows真机调试"><a href="#Windows真机调试" class="headerlink" title="Windows真机调试"></a>Windows真机调试</h3><p>和上文 Mac 调试基本相同，你可能需要安装 itunes 和 itools</p><ol><li>下载安装 itunes</li></ol><p>官网下载 <a href="https://www.apple.com/itunes/">itunes</a>，选择自己电脑系统 window:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mucvFu.png"></p><p>根据自己电脑系统32位或者64位进行下载：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mucvFu.png"></p><p>一路同意安装完成即可；</p><ol><li>下载安装 itools</li></ol><p><a href="http://www.itools.cn/">itools</a> 进行安装本地应用然后再次重复上面运行步骤：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/EJqNPm.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>主要介绍了小程序和 APP 端调试配置，到这里基础内容就学完了，后面将进入进阶实战，从项目分析，基础搭建和代码实战几方面完成一个真实的音乐项目，是不是有点期待？</p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合静态资源与模板引擎</title>
      <link href="/2022/06/25/zheng-he-jing-tai-zi-yuan-yu-mo-ban-yin-qing/"/>
      <url>/2022/06/25/zheng-he-jing-tai-zi-yuan-yu-mo-ban-yin-qing/</url>
      
        <content type="html"><![CDATA[<h1 id="整合静态资源与模板引擎"><a href="#整合静态资源与模板引擎" class="headerlink" title="整合静态资源与模板引擎"></a>整合静态资源与模板引擎</h1><h2 id="1-webjars-与静态资源"><a href="#1-webjars-与静态资源" class="headerlink" title="1. webjars 与静态资源"></a>1. webjars 与静态资源</h2><h3 id="⼀、spring-boot-静态资源"><a href="#⼀、spring-boot-静态资源" class="headerlink" title="⼀、spring boot 静态资源"></a>⼀、spring boot 静态资源</h3><h4 id="1-静态资源⽬录"><a href="#1-静态资源⽬录" class="headerlink" title="1. 静态资源⽬录"></a>1. 静态资源⽬录</h4><p>SpringBoot 默认配置下，提供了以下⼏个静态资源⽬录：</p><table><thead><tr><th>⽬录</th><th>配置信息</th></tr></thead><tbody><tr><td>/static</td><td>classpath:/static/</td></tr><tr><td>/public</td><td>classpath:/public/</td></tr><tr><td>/resources</td><td>classpath:/resources/</td></tr><tr><td>/META-INF/resources</td><td>classpath:/META-INF/resources/</td></tr></tbody></table><p>当然，可以通过 spring.resources.static-locations 配置指定静态⽂件的位置。<strong>但是要特别注意，⼀旦⾃⼰指定了静态资源⽬录，系统默认的静态资源⽬录就会失效。所以系统默认的就已经⾜够使⽤了，尽量不要⾃定义。</strong></p><p>#配置静态资源 spring: resources: #指定静态资源⽬录 static-locations: classpath:/mystatic/</p><h4 id="2-favicon-ico-图标"><a href="#2-favicon-ico-图标" class="headerlink" title="2. favicon.ico 图标"></a>2. favicon.ico 图标</h4><p>如果在配置的静态资源⽬录中有 favicon.ico ⽂件，SpringBoot 会⾃动将其设置为应⽤图标。也就是浏览器的 tab ⻚图标。</p><h4 id="3-欢迎⻚⾯"><a href="#3-欢迎⻚⾯" class="headerlink" title="3. 欢迎⻚⾯"></a>3. 欢迎⻚⾯</h4><p>SpringBoot ⽀持静态和模板欢迎⻚，它⾸先在静态资源⽬录查看 index.html ⽂件做为⾸⻚，若未找到则去查找 index 模板⽂件。</p><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4. 示例"></a>4. 示例</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HVu8eq.png"></p><h3 id="⼆、使⽤-WebJars-管理-css-amp-js"><a href="#⼆、使⽤-WebJars-管理-css-amp-js" class="headerlink" title="⼆、使⽤ WebJars 管理 css&amp;js"></a>⼆、使⽤ WebJars 管理 css&amp;js</h3><p><strong>为什么使⽤ WebJars？</strong></p><p>显⽽易⻅，因为简单。但不仅是依赖这么简单：</p><ul><li>清晰的管理 web 依赖</li><li>通过 Maven, Gradle 等项⽬管理⼯具就可以下载 web 依赖</li><li>解决 web 组件中传递依赖的问题以及版本问题</li><li>⻚⾯依赖的版本⾃动检测功能</li></ul><p>WebJars 是将这些通⽤的 Web 前端资源打包成 Java 的 Jar 包，然后借助 Maven ⼯具对其管理，保证这些 Web 资源版本唯⼀性，升级也⽐较容易。</p><p>关于 Wsebjars 资源，有⼀个专⻔的⽹站<code>https://www.webjars.org/</code>，我们可以到这个⽹站上找到⾃⼰需要的资源，在⾃⼰的⼯程中添加⼊ maven 依赖，即可直接使⽤这些资源了。</p><h4 id="1-pom-中引⼊依赖"><a href="#1-pom-中引⼊依赖" class="headerlink" title="1. pom 中引⼊依赖"></a>1. pom 中引⼊依赖</h4><p>我们可以从 WebJars 官⽅查看 maven 依赖，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/QiaTNv.png"></p><p>例如将 bootstrap 和 jquery 引⼊ pom ⽂件中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-访问引⼊的-CSS-和-JS-⽂件"><a href="#2-访问引⼊的-CSS-和-JS-⽂件" class="headerlink" title="2. 访问引⼊的 CSS 和 JS ⽂件"></a>2. 访问引⼊的 CSS 和 JS ⽂件</h4><p>在 html 内访问静态资源可以使⽤如下⽅式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/webjars/bootstrap/5.1.3/css/bootstrap.min.css"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/webjars/jquery/3.6.0/jquery.min.js "</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/webjars/bootstrap/5.1.3/js/bootstrap.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、⾃动检测依赖的版本"><a href="#三、⾃动检测依赖的版本" class="headerlink" title="三、⾃动检测依赖的版本"></a>三、⾃动检测依赖的版本</h3><p>从 Spring 4.2 开始，加⼊ webjars-locator 组件，就不需要在 html 添加依赖的时候填写版本。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>webjars-locator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引⼊ webjars-locator 值后可以省略版本号:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/webjars/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/webjars/jquery/jquery.min.js <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/webjars/bootstrap/js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>好处是：当你升级 webjar 版本的时候，就不⽤每个引⼊ webjar 的⽂件都修改⼀遍版本号。</p><h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/8VK72h.png"></p><h2 id="2-模板引擎选型与未来趋势"><a href="#2-模板引擎选型与未来趋势" class="headerlink" title="2. 模板引擎选型与未来趋势"></a>2. 模板引擎选型与未来趋势</h2><h3 id="⼀、Java-web-开发经历的⼏个阶段"><a href="#⼀、Java-web-开发经历的⼏个阶段" class="headerlink" title="⼀、Java web 开发经历的⼏个阶段"></a>⼀、Java web 开发经历的⼏个阶段</h3><h4 id="1-1-JSP-开发阶段"><a href="#1-1-JSP-开发阶段" class="headerlink" title="1.1 JSP 开发阶段"></a>1.1 JSP 开发阶段</h4><p>现在仍然有很多企业项⽬使⽤ JSP 开发。可以说 JSP 就是⻚⾯端的 Servlet，JSP ⽂件糅合了三种元素： Java 代码、动态的数据、HTML 代码结构。</p><p>从抽象层次来看，Java 代码部分不仅⽤来组织数据，还被⽤来控制 HTML ⻚⾯结构。这样在层次划分上是含糊不清的。当然企业可以通过规范的⽅式去限制，不允许在 JSP ⻚⾯写 Java 代码，但这只是规范层⾯的事，实际怎样⽆法控制。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/1IRNoK.png"></p><h4 id="1-2-使⽤-Java-模板引擎"><a href="#1-2-使⽤-Java-模板引擎" class="headerlink" title="1.2 使⽤ Java 模板引擎"></a>1.2 使⽤ Java 模板引擎</h4><p>在这个阶段就出现了 Freemarker、Velocity 这样的严格数据模型与业务代码分离的模板引擎，实现了严格的 MVC 分离。</p><p>模板引擎的另外⼀个好处就是：宏定义或者说是组件模板，⽐ JSP 标签好⽤，极⼤的减少了重复⻚⾯组件元素的开发。另外，相对于 JSP ⽽⾔，模板引擎的开发效率会更⾼。我们都知道，JSP 在第⼀次执⾏ 的时候需要转换成 Servlet 类，开发阶段进⾏功能调适时，需要频繁的修改 JSP ，每次修改都要编译和转 换，那么我们浪费在程序编译的时间有多少。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/K6jVfc.png"></p><p>但是 Java 模板引擎，仍然是使⽤的服务器端的渲染技术，也就是没有办法将 HTML ⻚⾯和后台服务层⾯全⾯解耦，这就要求前端⼯程师和后端⼯程师在同⼀个项⽬结构下⼯作，⽽且前端⼯程师及其依赖于后端的业务数据，⻚⾯⽆法脱离于后端请求数据在浏览器独⽴运⾏。</p><h4 id="1-3-前端⼯程化"><a href="#1-3-前端⼯程化" class="headerlink" title="1.3 前端⼯程化"></a>1.3 前端⼯程化</h4><p>在 Ajax 和 Nodejs 相继出现之后，可以说为前端的发展带来了⾰命性的变化，前端可以做⾃⼰的⼯程化实践。这些新的前端技术通常是“所⻅即所得”，写完的代码可以直接在浏览器上查看，将前端后端的串⾏化⼯作模式转变为并⾏⼯作的模式。前端专注于布局、美化，后端专注于业务。专业的⼈越来越专业， ⼯作效率也更⾼。</p><p>随着 Vue、Angularjs、React 的⼤⾏其道，开始实现真正的前后端分离技术。前端的⼯程师负责⻚⾯的美化与结构，后端⼯程师可以专注于业务的处理。</p><h3 id="⼆、Java-模板引擎的选型"><a href="#⼆、Java-模板引擎的选型" class="headerlink" title="⼆、Java 模板引擎的选型"></a>⼆、Java 模板引擎的选型</h3><p>常⻅的模板引擎有 Freemarker、Thymeleaf、Velocity 等。</p><p>SpringBoot ⽬前官⽅集成的框架只有 freemarker 和 Thymeleaf。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/sA4dUi.png"></p><h4 id="Thymeleaf："><a href="#Thymeleaf：" class="headerlink" title="Thymeleaf："></a>Thymeleaf：</h4><p>Thymeleaf 的最⼤优点也是它的最⼤的缺点，就是它使⽤静态 html 嵌⼊标签属性，浏览器可以直接打开模板⽂件，便于前后端联调。也就是贴近于“所⻅即所得”。但是也正是因为，thyme 使⽤标签属性去放数据，也导致它的语法违反了程序员对于 html 的理解。另外 Thymeleaf 的性能⼀直为⼈所诟病。</p><p><strong>对⼀个对象数组遍历的代码：</strong></p><p>Thymeleaf 代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item : $&#123;users&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.userId&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.email&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.mobile&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FreeMarker 代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">users</span> <span class="token attr-name">as</span> <span class="token attr-name">item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;item.userId&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;item.username&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;item.password&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;item.email&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;item.mobile&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显 FreeMarker 更符合开发⼈员对于 HTML 的使⽤规范，将展示内容放在标签内，⽽不是作为标签属性存在。ThymeLeaf2.0 的性能为⼈所诟病，Thymeleaf3.0 虽然有所改善，但是没有颠覆性的变化。 综上所述，⽬前为⽌如果使⽤ Java 模板引擎，⽐较推荐 Freemarker。当然，去学 Vue、Angularjs、 Reactjs，不要⽤纯 Java 模板引擎，这些东⻄⽤得会越来越少。只是有的公司和⽼项⽬，依然还在⽤ JSP、Java 模板引擎这些技术。</p><p>可以去百度指数看⼀下，各种技术的发展和⽕爆程度。</p><h2 id="3-Web-应⽤开发之整合-Freemarker"><a href="#3-Web-应⽤开发之整合-Freemarker" class="headerlink" title="3. Web 应⽤开发之整合 Freemarker"></a>3. Web 应⽤开发之整合 Freemarker</h2><h3 id="⼀、Freemarker-简介"><a href="#⼀、Freemarker-简介" class="headerlink" title="⼀、Freemarker 简介"></a>⼀、Freemarker 简介</h3><p>FreeMarker 是⼀个模板引擎，⼀个基于模板⽣成⽂本输出的通⽤⼯具，使⽤纯 Java 编写。⼀般对 FreeMarker 第⼀印象是⽤来替代 JSP 的，但是与 JSP 不同的是 FreeMarker 模板可以在 Servlet 容器之外使⽤。可以使⽤它们来⽣成电⼦邮件、 配置⽂件、 XML 映射等。或者可以直接⽣成 HTML ⽂件，以及其他的⽂件，⽤来做代码⾃动⽣成的⼯具。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Pv9Vq2.png"></p><p>Freemarker 作为⻚⾯模板引擎的核⼼能⼒在于，将以 HTML 为基础的模板中的相关语法占位符⽤数据进⾏填充，填充之后形成可以被浏览器渲染的 HTML ⽂件。</p><h3 id="⼆、整合"><a href="#⼆、整合" class="headerlink" title="⼆、整合"></a>⼆、整合</h3><p>⾸先通过 maven 坐标的⽅式将 freemarker 引⼊到项⽬中来，因为 freemarker 是 Spring Boot ⽗项⽬⽀持的模板引擎，所以不⽤加版本号，版本由⽗项⽬统⼀管理。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 application.yml 全局配置⽂件中进⾏如下的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">freemarker</span><span class="token punctuation">:</span>    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 缓存配置 开发阶段应该配置为false 因为经常会改</span>    <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .ftl <span class="token comment"># 模版⽂件后缀名</span>    <span class="token key atrule">charset</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># ⽂件编码</span>    <span class="token key atrule">template-loader-path</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、代码测试"><a href="#三、代码测试" class="headerlink" title="三、代码测试"></a>三、代码测试</h3><p>新建 freemarker 模板⽂件，通过 controller 将 article 数据返回过来，并将查询结果 List 返回给前端 FreeMarker 模板⻚⾯，进⾏数据填充。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/6BqfLd.png"></p><p>TemplateController.java 代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/template"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/freemarker"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">freemarkerIndex</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span>               <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"Spring"</span><span class="token punctuation">)</span>               <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"张三⻛"</span><span class="token punctuation">,</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">)</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"articles"</span><span class="token punctuation">,</span> articles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>articles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//模版名称，实际的⽬录为：resources/templates/freemarker-demo.ftl</span>        <span class="token keyword">return</span> <span class="token string">"freemarker-demo"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板⻚⾯代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initialscale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Freemarker⻚⾯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/webjars/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-success table-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>作者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">articles</span> <span class="token attr-name">as</span> <span class="token attr-name">article</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.author&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/webjars/jquery/jquery.min.js <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/webjars/bootstrap/js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/AKOfL0.png"></p><h3 id="四、推荐"><a href="#四、推荐" class="headerlink" title="四、推荐"></a>四、推荐</h3><p>如果想进⼀步学习 freemarker 语法，请参考: <a href="http://freemarker.foofun.cn/index.html">http://freemarker.foofun.cn/index.html</a></p><h2 id="4-Web-应⽤开发之整合-Thymeleaf"><a href="#4-Web-应⽤开发之整合-Thymeleaf" class="headerlink" title="4. Web 应⽤开发之整合 Thymeleaf"></a>4. Web 应⽤开发之整合 Thymeleaf</h2><h3 id="⼀、Thymeleaf-简介"><a href="#⼀、Thymeleaf-简介" class="headerlink" title="⼀、Thymeleaf 简介"></a>⼀、Thymeleaf 简介</h3><p>Thymeleaf 是⼀个服务器端 Java 模板引擎，能够处理 HTML、XML、CSS、JAVASCRIPT 等模板⽂ 件。Thymeleaf 模板可以直接当作静态原型来使⽤，它主要⽬标是为开发者的开发⼯作流程带来优雅的⾃然模板，也是 Java 服务器端 HTML5 开发的理想选择。</p><h3 id="⼆、准备⼯作-IDEA-设置"><a href="#⼆、准备⼯作-IDEA-设置" class="headerlink" title="⼆、准备⼯作-IDEA 设置"></a>⼆、准备⼯作-IDEA 设置</h3><p>在开始使⽤ ThymeLeaf 作为模板引擎进⾏⻚⾯开发之前，我们有必要对 IDEA 进⾏⼀些设置。这些设置帮助 IDEA 更好的识别 ThymeLeaf 语法，增强我们的开发体验。</p><ul><li>安装 ThymeLeaf 插件，并使其⽣效（在绝⼤多数的 IDEA 版本该插件都是默认安装并⽣效的）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/wnovHz.png"></p><ul><li>去掉变量表达式识别检查，会造成变量红⾊下划线，影响开发体验</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HceWjl.png"></p><h3 id="三、集成"><a href="#三、集成" class="headerlink" title="三、集成"></a>三、集成</h3><p>使⽤ Maven 坐标将 thymeleaf 引⼊到项⽬中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对 thymeleaf 模板进⾏配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 启⽤缓存:建议⽣产开启</span>    <span class="token key atrule">check-template-location</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检查模版是否存在</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否启⽤</span>    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># 模版编码</span>    <span class="token key atrule">excluded-view-names</span><span class="token punctuation">:</span> <span class="token comment"># 应该从解析中排除的视图名称列表（⽤逗号分隔）</span>    <span class="token key atrule">mode</span><span class="token punctuation">:</span> HTML5 <span class="token comment"># 模版模式</span>    <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/ <span class="token comment"># 模版存放路径</span>    <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html <span class="token comment"># 模版后缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、Hello-ThymeLeaf"><a href="#四、Hello-ThymeLeaf" class="headerlink" title="四、Hello ThymeLeaf"></a>四、Hello ThymeLeaf</h3><p>查询⼀个 articles ⽂章列表，并返回模板名称，由 Spring 根据名称找到模板进⾏⻚⾯渲染。</p><p>controller 代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/template"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/thymeleaf"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">thymeleafIndex</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span>               <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"Spring"</span><span class="token punctuation">)</span>               <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"张三⻛"</span><span class="token punctuation">,</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">)</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"articles"</span><span class="token punctuation">,</span> articles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"thymeleaf-demo"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>thymeleaf-demo.html 模板⻚代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/webjars/bootstrap/css/bootstrap.min.css&#125;<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-dark table-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>作者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item : $&#123;articles&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.author&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/GMCDzc.png"></p><h2 id="5-Thymeleaf-基础语法讲解"><a href="#5-Thymeleaf-基础语法讲解" class="headerlink" title="5. Thymeleaf 基础语法讲解"></a>5. Thymeleaf 基础语法讲解</h2><h3 id="⼀、基础语法"><a href="#⼀、基础语法" class="headerlink" title="⼀、基础语法"></a>⼀、基础语法</h3><h4 id="变量表达式"><a href="#变量表达式" class="headerlink" title="变量表达式 ${}"></a>变量表达式 ${}</h4><p>使⽤⽅法：直接使⽤ th:xx = “${}” 获取对象属性 。例如：articles 是⼀个集合，集合中的元素就是⼀个对 象，articles[0] 表示集合中第⼀个对象。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Thymeleaf 基础语法1： 变量表达式 $&#123;&#125;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;articles[0].id&#125;<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>author<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;articles[0].author&#125;<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input3<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;articles[0].title&#125;<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择变量表达式"><a href="#选择变量表达式" class="headerlink" title="选择变量表达式 *{}"></a>选择变量表达式 *{}</h4><p>使⽤⽅法：⾸先通过 th:object 获取对象，然后使⽤ th:xx = “*{}” 获取对象属性。显示效果和上⾯的例⼦是⼀样的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Thymeleaf 基础语法2： 选择变量表达式 *&#123;&#125;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;articles[1]&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;id&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input5<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>author<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input5<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;author&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input6<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input6<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;title&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链接表达式"><a href="#链接表达式" class="headerlink" title="链接表达式 @{}"></a>链接表达式 @{}</h4><p>使⽤⽅法：通过链接表达式@{}直接拿到应⽤路径，然后拼接静态资源路径。例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/webjars/bootstrap/css/bootstrap.min.css&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/webjars/jquery/jquery.min.js&#125; <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/webjars/bootstrap/js/bootstrap.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>html ⻚⾯实际引⼊效果如下（这种⽅式会将 webjars 的版本号暴露出来，⼀定程度上造成安全问题，所以使⽤ webjars 就别⽤链接表达式）：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Awzu8u.png"></p><h4 id="其它表达式"><a href="#其它表达式" class="headerlink" title="其它表达式"></a>其它表达式</h4><p>在基础语法中，默认⽀持字符串连接、数学运算、布尔逻辑和三⽬运算等。例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Thymeleaf 基础语法4： 字符串连接、数学运算、布尔逻辑、三⽬运算符等--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;<span class="token punctuation">'</span>我是：<span class="token punctuation">'</span> + (articles[2].author != null ? articles[2].author : <span class="token punctuation">'</span>没有内容<span class="token punctuation">'</span> )&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上 diamante 运⾏效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/u50S5Y.png"></p><h3 id="⼆、迭代循环"><a href="#⼆、迭代循环" class="headerlink" title="⼆、迭代循环"></a>⼆、迭代循环</h3><p>想要遍历 List 集合很简单，配合 th:each 即可快速完成迭代。但是我们通常有⼀些需求，在集合的迭代过程还可以获取状态变量。状态变量可⽤于获取集合的下标/序号、总数、是否为单数/偶数⾏、是否为第⼀个/最后⼀个。例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>下标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>作者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span>    <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item,stat : $&#123;articles&#125;<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;stat.even&#125; ? <span class="token punctuation">'</span>even<span class="token punctuation">'</span> : <span class="token punctuation">'</span>odd<span class="token punctuation">'</span><span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;stat.index&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;stat.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.author&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;item.title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>迭代下标变量⽤法：</strong></p><p>状态变量定义在⼀个 th:每个属性和包含以下数据:</p><ul><li><code>index:</code> 当前迭代索引,从 0 开始。这是索引属性。</li><li><code>count</code>: 当前迭代序号,从 1 开始。这是序号属性。</li><li><code>size</code>: 元素的总量迭代变量。这是⼤⼩属性。</li><li><code>current</code>: 变量为每个迭代,当前正迭代的元素。</li><li><code>even/odd</code>: 是否当前迭代是奇数还是偶数,布尔属性。</li><li><code>first</code>: 是否第⼀个当前迭代,布尔属性。</li><li><code>last</code>: 是否最后⼀个当前迭代,布尔属性。</li></ul><p>显示效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/fCdfuV.png"></p><p>其中表格隔⾏换⾊，即奇数⾏换⾊，是通过 stat.even 实现的。为奇数⾏单独设置背景颜⾊</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>    .odd</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #7d7d7d<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、条件判断"><a href="#三、条件判断" class="headerlink" title="三、条件判断"></a>三、条件判断</h3><p>条件判断通常⽤于动态⻚⾯的初始化，例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;articles&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>⽂章列表存在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>条件判断表达式可以是如下类型：</strong></p><ul><li>boolean 类型并且值是 true, 返回 true</li><li>数值类型并且值不是 0, 返回 true</li><li>字符类型(Char)并且值不是 0, 返回 true</li><li>String 类型并且值不是 “false”, “off”, “no”, 返回 true</li><li>不是 boolean, 数值, 字符, String 的其他类型, 返回 true</li><li>对象值是 null, 返回 false</li></ul><p>如果想取反则使⽤ unless 例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;users&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>⽤户列表暂⽆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-Thymeleaf-内置对象与⼯具类"><a href="#6-Thymeleaf-内置对象与⼯具类" class="headerlink" title="6. Thymeleaf 内置对象与⼯具类"></a>6. Thymeleaf 内置对象与⼯具类</h2><h3 id="⼀、内置对象"><a href="#⼀、内置对象" class="headerlink" title="⼀、内置对象"></a>⼀、内置对象</h3><blockquote><p>官⽅⽂档：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-a-expression-basic-objects">Thymeleaf 3.0 基础对象</a></p></blockquote><h4 id="七⼤基础对象："><a href="#七⼤基础对象：" class="headerlink" title="七⼤基础对象："></a>七⼤基础对象：</h4><ul><li><code>$&#123;#ctx&#125;</code>: 上下⽂对象，可⽤于获取其它内置对象。</li><li><code>$&#123;#param&#125;</code>: 上下⽂参数变量。</li><li><code>$&#123;#locale&#125;</code>: 上下⽂区域语⾔设置对象。</li><li><code>$&#123;#request&#125;</code>: HttpServletRequest 对象。</li><li><code>$&#123;#response&#125;</code>: HttpServletResponse 对象。</li><li><code>$&#123;#session&#125;</code>: HttpSession 对象。</li><li><code>$&#123;#servletContext&#125;</code>: ServletContext 对象。</li></ul><h4 id="⽤法示例"><a href="#⽤法示例" class="headerlink" title="⽤法示例"></a>⽤法示例</h4><p>为了演示数据，我们在后端向 thymeleaf 模板传参的时候，使⽤不同的对象容器。并注意下图中的参数 名称：name1、name2、name3、name4。</p><p>controller 代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/thymeleaf1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name1<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span>           <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"Spring"</span><span class="token punctuation">)</span>           <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"张三⻛"</span><span class="token punctuation">,</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name3"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name4"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"articles"</span><span class="token punctuation">,</span> articles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"thymeleaf-demo1"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⻚⾯代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Thymeleaf⻚⾯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--   &lt;link rel="stylesheet" href="/webjars/bootstrap/css/bootstrap.min.css">--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/webjars/bootstrap/css/bootstrap.min.css&#125;<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">.odd</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #7d7d7d<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container overflow-hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ThymeLeaf内置对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>语⾔国家：      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>        <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#locale.getLanguage() + <span class="token punctuation">'</span>_<span class="token punctuation">'</span> + #locale.getCountry()&#125;<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>param： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;param.name1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>request：      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;name2&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>session：      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.name3&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>application：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>        <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;application.name4&#125;<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>session包含name3属性么（如不包含显示zoo）：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>        <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.name3&#125;?:(<span class="token punctuation">'</span>zoo<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>session包含属性数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.size()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>session是空的么：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.isEmpty()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/webjars/jquery/jquery.min.js&#125; <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/webjars/bootstrap/js/bootstrap.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<code>http://localhost:8080/template/thymeleaf1?name1=hello</code></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/hKrgYF.png"></p><h3 id="⼆、-常⽤的⼯具类："><a href="#⼆、-常⽤的⼯具类：" class="headerlink" title="⼆、 常⽤的⼯具类："></a>⼆、 常⽤的⼯具类：</h3><blockquote><p>官⽅⽂档： <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-b-expression-utility-objects">Thymeleaf 3.0 ⼯具类</a></p></blockquote><ul><li><code>#strings</code>：字符串⼯具类</li><li><code>#lists</code>：List ⼯具类</li><li><code>#arrays</code>：数组⼯具类</li><li><code>#sets</code>：Set ⼯具类</li><li><code>#maps</code>：常⽤ Map ⽅法</li><li><code>#objects</code>：⼀般对象类，通常⽤来判断⾮空</li><li><code>#bools</code>：常⽤的布尔⽅法</li><li><code>#execInfo</code>：获取⻚⾯模板的处理信息</li><li><code>#messages</code>：在变量表达式中获取外部消息的⽅法，与使⽤＃{…}语法获取的⽅法相同</li><li><code>#uris</code>：转义部分 URL / URI 的⽅法</li><li><code>#conversions</code>：⽤于执⾏已配置的转换服务的⽅法</li><li><code>#dates</code>：时间操作和时间格式化等</li><li><code>#calendars</code>：⽤于更复杂时间的格式化</li><li><code>#numbers</code>：格式化数字对象的⽅法</li><li><code>#aggregates</code>：在数组或集合上创建聚合的⽅法</li><li><code>#ids</code>：处理可能重复的 id 属性的⽅法</li></ul><h4 id="⽤法举例："><a href="#⽤法举例：" class="headerlink" title="⽤法举例："></a>⽤法举例：</h4><p><strong>date ⼯具类之⽇期格式化</strong></p><p>使⽤默认的⽇期格式 (toString ⽅法) 并不是我们预期的格式：Mon Dec 03 23:16:50 CST 2021</p><p>此时可以通过时间⼯具类 #dates 来对⽇期进⾏格式化：2021-12-03 23:16:50</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(item.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⾸字⺟⼤写</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">$&#123;#strings.capitalizeWords(str)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>list ⽅法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/* * 计算list集合中元素数量 */ $&#123;#lists.size(list)&#125; /* * 检查集合是否是空的 */$&#123;#lists.isEmpty(list)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-公共⽚段-标签-与内联-JS"><a href="#7-公共⽚段-标签-与内联-JS" class="headerlink" title="7. 公共⽚段(标签)与内联 JS"></a>7. 公共⽚段(标签)与内联 JS</h2><h3 id="⼀、⽚段表达式-标签"><a href="#⼀、⽚段表达式-标签" class="headerlink" title="⼀、⽚段表达式(标签) ~{}"></a>⼀、⽚段表达式(标签) ~{}</h3><p>⽚段表达式的使⽤过程，有点像我们平时代码开发过程中的：共⽤函数抽取。</p><h4 id="确定哪些代码可重⽤"><a href="#确定哪些代码可重⽤" class="headerlink" title="确定哪些代码可重⽤"></a>确定哪些代码可重⽤</h4><p>下⾯的 head 标签⽚段在很多的⻚⾯都存在，并且⼤部分的内容是⼀致的，加⼊我们希望 head 标签⾥⾯的内容能在各个⻚⾯内重⽤，该怎么办？我们本节就带着⼤家来解决组件代码重⽤的问题。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/webjars/bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.odd</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #7d7d7d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定制可重⽤代码⽚段"><a href="#定制可重⽤代码⽚段" class="headerlink" title="定制可重⽤代码⽚段"></a>定制可重⽤代码⽚段</h4><p>⾸先通过 th:fragment 定制代码⽚段 ，通常将项⽬⾥⾯经常重⽤的代码抽取为代码⽚段(标签)，代码⽚段可以设置参数：title、version</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- /templates/common/head.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static(version,title)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>/webjars/bootstrap/<span class="token punctuation">'</span>+ $&#123;version&#125; + <span class="token punctuation">'</span>/css/bootstrap.min.css<span class="token punctuation">'</span><span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">.odd</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #7d7d7d<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引⽤可重⽤代码⽚段"><a href="#引⽤可重⽤代码⽚段" class="headerlink" title="引⽤可重⽤代码⽚段"></a>引⽤可重⽤代码⽚段</h4><p>然后在不同的⻚⾯引⽤该⽚段，达到代码重⽤的⽬的，可以传递参数 version、title</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~&#123;common/head::static(<span class="token punctuation">'</span>4.5.0<span class="token punctuation">'</span>,<span class="token punctuation">'</span>⻚⾯标题<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/fh1RCe.png"></p><p>最终重⽤代码组合效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/t9FmdV.png"></p><p>⽚段表达式是 Thymeleaf 的特⾊之⼀，细粒度可以达到标签级别，这是 JSP ⽆法做到的。</p><p>⽚段表达式拥有三种语法：</p><ul><li><code>~&#123; viewName &#125;</code>表示引⼊完整⻚⾯</li><li><code>~&#123; viewName ::selector&#125;</code> 表示在指定⻚⾯寻找⽚段 其中 selector 可为⽚段名、jquery 选择器等, 即可以在⼀个 html ⻚⾯内定义多个⽚段</li><li><code>~&#123; ::selector&#125;</code>表示在当前 html ⻚查找代码⽚段</li></ul><h3 id="⼆、多种⽚段组合⽅式"><a href="#⼆、多种⽚段组合⽅式" class="headerlink" title="⼆、多种⽚段组合⽅式"></a>⼆、多种⽚段组合⽅式</h3><p>在实际使⽤中，我们往往使⽤更简洁的表达，去掉表达式外壳直接填写⽚段名。例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common/head::static<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common/head::static<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common/head::static<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>关于 thymeleaf th:replace th:include th:insert 的区别</strong></p><ul><li><code>th:replace</code> ：不要⾃⼰的主标签，保留 <code>th:fragment</code> 的主标签</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Kvr4ZN.png"></p><ul><li><code>th:insert</code> ：保留⾃⼰的主标签，保留<code> th:fragment</code> 的主标签。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/4WDKsg.png"></p><ul><li><code>th:include </code>：保留⾃⼰的主标签，不要 <code>th:fragment</code> 的主标签。（官⽅ 3.0 后不推荐）</li></ul><blockquote><p>值得注意的是，使⽤替换路径 th:replace 开头请勿添加斜杠/，避免部署运⾏的时候出现路径报错。 （因为默认拼接的路径为 spring.thymeleaf.prefix = classpath:/templates/）</p></blockquote><h3 id="⼆、内联语法"><a href="#⼆、内联语法" class="headerlink" title="⼆、内联语法"></a>⼆、内联语法</h3><p>我们之前所讲的内容都是在 html 标签上使⽤的 thymeleaf 的语法，那么如果我们需要在 javascript ⾥⾯获取变量的值（使⽤之前所讲的表达式），该怎么做？</p><p>答：标准格式为：<code>[[$&#123;expression&#125;]]</code> ，可以读取服务端变量，也可以调⽤内置对象的⽅法。例如获取⽤户变量和应⽤路径：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>articles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token constant">APP_PATH</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token constant">LANG_COUNTRY</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#locale<span class="token punctuation">.</span><span class="token function">getLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>#locale<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTML ⻚⾯使⽤内联语法结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/JjaCR7.png"></p><blockquote><p>标签（代码⽚段）内引⼊的 JS ⾥⾯能使⽤内联表达式吗？答：不能！内联表达式仅在⻚⾯⽣效，因为 Thymeleaf 只负责解析⼀级视图，不能识别外部标签 JS ⾥⾯的表达式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式容器的配置与应用</title>
      <link href="/2022/06/24/qian-ru-shi-rong-qi-de-pei-zhi-yu-ying-yong/"/>
      <url>/2022/06/24/qian-ru-shi-rong-qi-de-pei-zhi-yu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌⼊式容器的配置与应⽤"><a href="#嵌⼊式容器的配置与应⽤" class="headerlink" title="嵌⼊式容器的配置与应⽤"></a>嵌⼊式容器的配置与应⽤</h1><h2 id="1-嵌⼊式容器的运⾏参数配置"><a href="#1-嵌⼊式容器的运⾏参数配置" class="headerlink" title="1.嵌⼊式容器的运⾏参数配置"></a>1.嵌⼊式容器的运⾏参数配置</h2><p>在 Spring Boot 项⽬中，可以⽀持 Tomcat、Jetty、Undertow 的 Web 应⽤服务容器。 当我们添加了 spring-boot-starter-web 依赖后，默认会使⽤ Tomcat 作为嵌⼊式 Web 容器，不需要我们 单独部署，将 Web 应⽤打成 jar 包即可运⾏。</p><p><strong>调整 SpringBoot 应⽤容器的参数两种配置⽅法</strong></p><ul><li>修改配置⽂件（简单）</li><li>⾃定义配置类 （专业调优）</li></ul><h3 id="⼀、配置⽂件⽅式"><a href="#⼀、配置⽂件⽅式" class="headerlink" title="⼀、配置⽂件⽅式"></a>⼀、配置⽂件⽅式</h3><p>在 application.properties / application.yml 可以配置 Web 容器运⾏所需要的属性，可以通过该链接在官 ⽅⽹站查看关于 server 的所有配置项：[server-properties](<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server">Common Application Properties (spring.io)</a>)</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/aO9FYW.png"></p><ul><li>server.xx 开头的是所有 servlet 容器通⽤的配置</li><li>server.tomcat.xx 开头的是 tomcat 容器特有的配置参数参数</li><li>server.jetty.xx 开头的是 Jetty 容器特有的配置参数参数</li><li>server.undertow.xx 开头的是 undertow 容器特有的配置参数参数</li></ul><h4 id="1-1-常⽤配置参数"><a href="#1-1-常⽤配置参数" class="headerlink" title="1.1 常⽤配置参数"></a>1.1 常⽤配置参数</h4><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>server.port</td><td>8080</td><td>配置 Web 容器的端⼝号</td></tr><tr><td>server.servlet.session.time out</td><td>30m(30 分钟)</td><td>session 失效时间。如果不写单位则默认单位是秒。 （注意：由于 Tomcat 中配置 session 过期时间是以 分钟为单位，如果这⾥设置是秒的话，那么会⾃动 转换为⼀个不超过所配置秒数的最⼤分钟数。⽐如 配置了 119 秒(1 分 59 秒)，那么实际 session 过期时间 是 1 分钟）</td></tr><tr><td>server.servlet.contextpath</td><td>/</td><td>URL 访问路径的基础路径</td></tr><tr><td>server.tomcat.uriencoding</td><td>UTF-8</td><td>配置 Tomcat 请求编码</td></tr><tr><td>server.tomcat.basedir</td><td></td><td>配置 Tomcat 运⾏⽇志和临时⽂件的⽬录。若不配 置，则默认使⽤系统的临时⽬录</td></tr></tbody></table><h4 id="1-2-tomcat-性能优化核⼼参数"><a href="#1-2-tomcat-性能优化核⼼参数" class="headerlink" title="1.2 tomcat 性能优化核⼼参数"></a>1.2 tomcat 性能优化核⼼参数</h4><p>tomcat 连接器⼯作原理图：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/dJ2lBp.png"></p><ul><li>在 Acceptor 之前维护⼀个请求接收队列，该队列的最⼤⻓度即：tomcat 可以接受的最⼤请求连接 数：server.tomcat.max-connections</li><li>Acceptor 监听连接请求，并⽣成⼀个 SocketProcessor 任务提交到线程池去处理</li><li>当线程池⾥⾯的所有线程都被占⽤，新建的 SocketProcessor 任务被放⼊等待队列，即： server.tomcat.accept-count</li><li>线程池的 server.tomcat.threads.max 决定了 tomcat 的极限 SocketProcessor 任务处理能⼒。不是越⼤越好，线程越多耗费的资源也越多</li><li>线程池的 server.tomcat.threads.min-spare 在应⽤空闲时，保留⼀定的线程数在线程池内。避免请 求到来后，临时创建线程浪费时间</li></ul><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>server.tomcat.maxconnections</td><td>8192</td><td>接受的最⼤请求连接数</td></tr><tr><td>server.tomcat.accept-count</td><td>100</td><td>当所有的线程都被占⽤，被放⼊请求队列等 待的最⼤的请求连接数量</td></tr><tr><td>server.tomcat.threads.max</td><td>200</td><td>最⼤的⼯作线程池数量</td></tr><tr><td>server.tomcat.threads.minspare</td><td>10</td><td>最⼩的⼯作线程池数量</td></tr></tbody></table><h3 id="⼆、⾃定义配置类⽅式"><a href="#⼆、⾃定义配置类⽅式" class="headerlink" title="⼆、⾃定义配置类⽅式"></a>⼆、⾃定义配置类⽅式</h3><p>步骤：</p><ol><li><p>建⽴⼀个配置类，加上@Configuration 注解</p></li><li><p>添加定制器 ConfigurableServletWebServerFactory</p></li><li><p>将定制器返回</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatCustomizer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurableServletWebServerFactory</span> <span class="token function">configurableServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TomcatServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addConnectorCustomizers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTomcatConnectionCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTomcatConnectionCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">TomcatConnectorCustomizer</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">MyTomcatConnectionCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">Connector</span> connector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"8888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"maxConnections"</span><span class="token punctuation">,</span> <span class="token string">"8192"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"acceptorThreadCount"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"minSpareThreads"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"maxThreads"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种⽅法可定制的内容更多，也更灵活。但需要深⼊理解 server 容器的底层实现原理及设计机制，也需要具备⼀定的 TomcatServletWebServerFactory 的 API 熟练度。</p><h2 id="2-为-Web-容器配置-HTTPS"><a href="#2-为-Web-容器配置-HTTPS" class="headerlink" title="2.为 Web 容器配置 HTTPS"></a>2.为 Web 容器配置 HTTPS</h2><p>HTTPS 是 HTTP 协议的安全版本，旨在提供数据传输层安全性（TLS）。当你的应⽤不使⽤ HTTPS 的时候，浏览器地址栏就会出现⼀个不安全的提示。HTTPS 加密每个数据包以安全⽅式进⾏传输，并保护敏感数据免受窃听者或⿊客的攻击。</p><p>可以通过在 Web 应⽤程序上安装 SSL 证书来实现 HTTPS，互联⽹上受信任的证书通常是需要（CA）认证机构颁发的证书（通常是收费的）。⼀个标准的 SSL 证书，还是有点⼩贵的。国内的⼀些⼚商虽然可以提供免费的证书，但是都有⼀定的免费时效性限制。 如果是以学习为⽬的，我们也可以使⽤⾃签名证书，即：使⽤ Java Keytool ⽣成⾃签名证书。完全不需要购买 CA 机构认证的 SSL 证书。</p><h3 id="⼀、如何⽣成⾃签名证书"><a href="#⼀、如何⽣成⾃签名证书" class="headerlink" title="⼀、如何⽣成⾃签名证书"></a>⼀、如何⽣成⾃签名证书</h3><p>管理员身份启动命令⾏，使⽤如下的 keytool 命令⽣成⾃签名证书：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">keytool -genkeypair -alias selfsigned_localhost_sslserver -keyalg RSA -keysize <span class="token number">2048</span> -storetypePKCS12 -keystore zimug-ssl-key.p12 -validity <span class="token number">3650</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>⾃签名证书受密码保护。命令回⻋之后，会提示输⼊密码（这个密码要记住，后⾯会⽤到）和其他详细信息。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/NMe2QH.png"></p><p>完成上述步骤后，便会创建 PKS 密钥并将其存储在当前⽬录下。</p><blockquote><p>命令参数说明：</p><ul><li>-genkey：表示要创建⼀个新的密钥</li><li>-alias：表示 keystore 的别名</li><li>-keyalg：表示使⽤的加密算法是 RSA（⼀种⾮对称加密算法）</li><li>-keysize：表示密钥的⻓度</li><li>-keystore：表示⽣成的密钥存放位置</li><li>-validity：表示密钥的有效时间（单位为天）</li></ul></blockquote><h3 id="二、将-SSL-应⽤于-Spring-Boot-应⽤程序"><a href="#二、将-SSL-应⽤于-Spring-Boot-应⽤程序" class="headerlink" title="二、将 SSL 应⽤于 Spring Boot 应⽤程序"></a>二、将 SSL 应⽤于 Spring Boot 应⽤程序</h3><ol><li>复制 syhan-ssl-key，将其放在应⽤根⽬录下。</li><li>将 SSL 密钥信息添加到 application.yml 中。</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token key atrule">ssl</span><span class="token punctuation">:</span>    <span class="token key atrule">key-store</span><span class="token punctuation">:</span> syhan<span class="token punctuation">-</span>ssl<span class="token punctuation">-</span>key.p12    <span class="token key atrule">key-store-password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">key-store-type</span><span class="token punctuation">:</span> PKCS12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>此时如果我们继续使⽤ http 协议去访问应⽤资源，会得到如下的响应信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Bad RequestThis combination of <span class="token function">host</span> and port requires TLS.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使⽤ HTTPS 协议去访问应⽤资源，<code>https://localhost:8888/hello</code>。才会得到正确的结果。</p><h3 id="四、将-HTTP-请求重定向为-HTTPS"><a href="#四、将-HTTP-请求重定向为-HTTPS" class="headerlink" title="四、将 HTTP 请求重定向为 HTTPS"></a>四、将 HTTP 请求重定向为 HTTPS</h3><p>⾸先配置两个服务端⼝，server.port 是我们真正的服务端⼝，即 HTTPS 服务端⼝。另外再定义⼀个 server.httpPort,当客户端访问该 HTTP 协议端⼝的时候，⾃动跳转到 HTTPS 服务端⼝。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token key atrule">httpPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要使⽤到上⼀节使⽤编码⽅式进⾏配置的⽅法。下⾯的配置类不⽤改。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatCustomizer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.httpPort&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> httpPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> httpsPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurableServletWebServerFactory</span> <span class="token function">configurableServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TomcatServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SecurityConstraint</span> constraint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                constraint<span class="token punctuation">.</span><span class="token function">setUserConstraint</span><span class="token punctuation">(</span><span class="token string">"CONFIDENTIAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SecurityCollection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                constraint<span class="token punctuation">.</span><span class="token function">addCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">addConstraint</span><span class="token punctuation">(</span>constraint<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addAdditionalTomcatConnectors</span><span class="token punctuation">(</span><span class="token function">connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这⾥填充配置</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Connector</span> <span class="token function">connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connector</span> connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.http11.Http11NioProtocol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setScheme</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Connector监听的http的端⼝号</span>        connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>httpPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setSecure</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//监听到http的端⼝号后转向到的https的端⼝号</span>        connector<span class="token punctuation">.</span><span class="token function">setRedirectPort</span><span class="token punctuation">(</span>httpsPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connector<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样当我们通过 HTTP 协议：<code>http://localhost:80/hello</code>的时候，浏览器访问地址就会⾃动的跳转到 HTTPS 连接器服务端⼝<code> https://localhost:8888/hello</code></p><h2 id="3-切换到-jetty-amp-undertow-容器"><a href="#3-切换到-jetty-amp-undertow-容器" class="headerlink" title="3.切换到 jetty&amp;undertow 容器"></a>3.切换到 jetty&amp;undertow 容器</h2><p>本节介绍将 SpringBoot 默认的 Tomcat 容器切换为 jetty 或者 undertow。虽然可以使⽤ jetty 或者 undertow 替换掉 tomcat，但是不建议这么做，但是 jetty 与 undertow 的 NIO 模型还是有必要学⼀下的， 这也是绝⼤部分 Web 应⽤中间件提供⽹络服务的 IO 模型。 可能在某些场景下，jetty 或者 undertow 的测试结果的某些指标会好于 tomcat。但是 tomcat 综合各⽅⾯ 条件来说，⽆论从性能、稳定性、资源利⽤率来说都是⽐较优秀的。</p><h3 id="⼀、替换掉-tomcat"><a href="#⼀、替换掉-tomcat" class="headerlink" title="⼀、替换掉 tomcat"></a>⼀、替换掉 tomcat</h3><p>SpringBoot 默认是使⽤ tomcat 作为默认的应⽤容器。如果需要把 tomcat 替换为 jetty 或者 undertow，需 要先把 tomcat 相关的 jar 包排除出去。如下代码所示</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使⽤ Jetty 容器，那么添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果使⽤ Undertow 容器，那么添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不做特殊的调优配置，全部使⽤默认值的话，我们的替换⼯作就已经完成了。</p><h3 id="⼆、Reactor-NIO-多线程模型"><a href="#⼆、Reactor-NIO-多线程模型" class="headerlink" title="⼆、Reactor NIO 多线程模型"></a>⼆、Reactor NIO 多线程模型</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ECDrsB.png"></p><ol><li>mainReactor 负责监听 server socket，⽤来处理新连接的建⽴，将建⽴的 socketChannel 指定注册给 subReactor。</li><li>subReactor 维护⾃⼰的 selector, 基于 mainReactor 注册的 socketChannel 多路分离 IO 读写事件，读写⽹络数据，对业务处理的功能，将其扔给 worker 线程池来完成实际的请求任务处理。</li></ol><h3 id="三、切换为-Jetty-Server"><a href="#三、切换为-Jetty-Server" class="headerlink" title="三、切换为 Jetty Server"></a>三、切换为 Jetty Server</h3><p>常⽤ jetty 调优配置参数</p><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>server.jetty.threads.acceptors</td><td>-1.0</td><td>acceptor 线程的数量，acceptor 是⽤于连接接收 的连接器。当设置成-1 的时候，会根据 CPU 的逻 辑核数/8 来决定，最⼤不能超过 4 个</td></tr><tr><td>server.jetty.threads.selectors</td><td>-1.0</td><td>selector 线程的数量. 当设置成-1 的时候，根据 CPU 的逻辑核数/2，最少 1 个</td></tr><tr><td>server.jetty.threads.min</td><td>8</td><td>worker ⼯作线程池最⼩线程数量</td></tr><tr><td>server.jetty.threads.max</td><td>200</td><td>worker ⼯作线程池最⼤线程数量</td></tr></tbody></table><h3 id="四、切换到-undertow"><a href="#四、切换到-undertow" class="headerlink" title="四、切换到 undertow"></a>四、切换到 undertow</h3><p>下⽂配置中的 io-threads 可以认为是 acceptor 线程数，⽤来处理连接的建⽴。</p><p>worker-threads 就是⼯作线程池的线程数量，⽤来处理实际请求任务。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token comment"># 下⾯是配置undertow作为服务器的参数</span> <span class="token key atrule">undertow</span><span class="token punctuation">:</span>    <span class="token comment"># 设置IO线程数, 它主要执⾏⾮阻塞的任务,它们会负责多个连接, 默认设置每个CPU核⼼⼀</span>个线程   <span class="token key atrule">io-threads</span><span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token comment"># ⼯作任务线程池，默认为io-threads的8倍</span>   <span class="token key atrule">worker-threads</span><span class="token punctuation">:</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-打-war-包部署到外置-tomcat-容器"><a href="#4-打-war-包部署到外置-tomcat-容器" class="headerlink" title="4.打 war 包部署到外置 tomcat 容器"></a>4.打 war 包部署到外置 tomcat 容器</h2><h3 id="⼀、修改打包⽅式"><a href="#⼀、修改打包⽅式" class="headerlink" title="⼀、修改打包⽅式"></a>⼀、修改打包⽅式</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="⼆、-排除内置-tomcat-的依赖"><a href="#⼆、-排除内置-tomcat-的依赖" class="headerlink" title="⼆、 排除内置 tomcat 的依赖"></a>⼆、 排除内置 tomcat 的依赖</h3><p>使⽤外置的 tomcat，要将内置的嵌⼊式 tomcat 的相关 jar 排除。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、新增加⼀个类继承-SpringBootServletInitializer-实现"><a href="#三、新增加⼀个类继承-SpringBootServletInitializer-实现" class="headerlink" title="三、新增加⼀个类继承 SpringBootServletInitializer 实现"></a>三、新增加⼀个类继承 SpringBootServletInitializer 实现</h3><p>configure：</p><p>SpringBootServletInitializer 源码注释：</p><blockquote><p>Note that a WebApplicationInitializer is only needed if you are building a war file and deploying it. If you prefer to run an embedded web server then you won’t need this at all.</p></blockquote><p>如果你正在构建 WAR ⽂件并部署，则需要 WebApplicationInitializer。如果你喜欢运⾏⼀个嵌⼊式 Web 服务器，那么不需要这个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">SpringApplicationBuilder</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//此处的Application.class为带有@SpringBootApplication注解的启动类</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">BootLaunchApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><p>使⽤外部 Tomcat 部署访问的时候，application.properties(或者 application.yml)中的如下配置将失效， 请使⽤外置的 tomcat 的端⼝，tomcat 的 webapps 下项⽬名进⾏访问。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server.port= server.servlet.context<span class="token punctuation">-</span>path=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、build-要有-finalName-标签"><a href="#四、build-要有-finalName-标签" class="headerlink" title="四、build 要有 finalName 标签"></a>四、build 要有 finalName 标签</h3><p>pom.xml 中的构建 build 代码段，要有应⽤最终构建打包的名称。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>boot-launch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、打包与运⾏"><a href="#五、打包与运⾏" class="headerlink" title="五、打包与运⾏"></a>五、打包与运⾏</h3><p>war ⽅式打包，打包结果将存储在项⽬的 target ⽬录下⾯。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean package -Dmaven.test.skip<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后将 war 包 copy 到外置 Tomcat webapps ⽬录⾥。 在外置 tomcat 中运⾏：${Tomcat_home}/bin/⽬录下执⾏ startup.bat(windows)或者 startup.sh(linux)，然后通过浏览器访问应⽤，测试效果。</p><p><strong>需要注意的是</strong></p><ul><li>在 boot-launch.war 在 tomcat webapps ⽬录⾥⾯解压到 boot-launch ⽂件夹。所以访问应⽤的时 候，必须使⽤<code>http://localhost:8888/boot-launch/template/thymeleaf</code> 不能是：<code>http://localhost:8888/template/thymeleaf</code>，会报 404 错误。</li><li>静态资源引⽤也必须是：/boot-launch/image/xxxx.png，不能是/image/xxxx.png</li><li>JSP 的 war 包中，webjars 的资源使⽤⽅式不再被⽀持</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>⽣命周期内的拦截过滤与监听</title>
      <link href="/2022/06/24/ming-zhou-qi-nei-de-lan-jie-guo-lu-yu-jian-ting/"/>
      <url>/2022/06/24/ming-zhou-qi-nei-de-lan-jie-guo-lu-yu-jian-ting/</url>
      
        <content type="html"><![CDATA[<h1 id="⽣命周期内的拦截过滤与监听"><a href="#⽣命周期内的拦截过滤与监听" class="headerlink" title="⽣命周期内的拦截过滤与监听"></a>⽣命周期内的拦截过滤与监听</h1><h2 id="1-Servlet-域对象与属性变化监听"><a href="#1-Servlet-域对象与属性变化监听" class="headerlink" title="1.Servlet 域对象与属性变化监听"></a>1.Servlet 域对象与属性变化监听</h2><h3 id="⼀、监听器定义与实现"><a href="#⼀、监听器定义与实现" class="headerlink" title="⼀、监听器定义与实现"></a>⼀、监听器定义与实现</h3><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>Servlet 监听器是 Servlet 规范中定义的⼀种特殊类，⽤于监听 ServletContext、HttpSession 和 ServletRequest 等作⽤域对象的创建与销毁事件，以及监听这些作⽤域对象中属性发⽣修改的事件。监听器使⽤了设计模式中的观察者模式，它关注特定事物的创建、销毁以及变化并做出回调动作，因此监听器具有<strong>异步</strong>的特性。</p><p>Servlet Listener 监听三⼤域对象的创建和销毁事件，三⼤对象分别是：</p><ol><li>ServletContext Listener：application 级别，整个应⽤只存在⼀个，所有⽤户使⽤⼀个 ServletContext</li><li>HttpSession Listener：session 级别，同⼀个⽤户的浏览器开启与关闭⽣命周期内使⽤的是同⼀个 session</li><li>ServletRequest Listener：request 级别，每⼀个 HTTP 请求为⼀个 request</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/iZywFV.png"></p><p>除了监听域对象的创建和销毁，还可以监听域对象中属性发⽣修改的事件。</p><ul><li>HttpSessionAttributeListener</li><li>ServletContextAttributeListener</li><li>ServletRequestAttributeListener</li></ul><h4 id="1-2-使⽤场景"><a href="#1-2-使⽤场景" class="headerlink" title="1.2 使⽤场景"></a>1.2 使⽤场景</h4><p>Servlet 规范设计监听器的作⽤是在事件发⽣前、发⽣后进⾏⼀些处理，⼀般可以⽤来统计在线⼈数和在线⽤户、统计⽹站访问量、系统启动时初始化信息等。</p><h4 id="1-3-监听器的实现"><a href="#1-3-监听器的实现" class="headerlink" title="1.3 监听器的实现"></a>1.3 监听器的实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomListener</span> <span class="token keyword">implements</span>  <span class="token class-name">ServletContextListener</span><span class="token punctuation">,</span> <span class="token class-name">ServletRequestListener</span><span class="token punctuation">,</span> <span class="token class-name">HttpSessionListener</span><span class="token punctuation">,</span><span class="token class-name">ServletRequestAttributeListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============context创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============context销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" ++++++++++++++++++request监听器：销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" ++++++++++++++++++request监听器：创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------session创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------session销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> srae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------attributeAdded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> srae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------attributeRemoved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> srae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----------------attributeReplaced"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现<strong>ServletRequestListener 接⼝</strong>，并重写 requestDestroyed 销毁和 requestInitialized ⽅法。⼀次 ServletRequest 的 requestInitialized ⽅法和 requestDestroyed 销毁⽅法的执⾏代表 1 次请求的接收与处理完毕。所以⽐较适合⽹站资源被访问次数的统计。</li><li>实现<strong>HttpSessionListener 接⼝</strong>，并重写 sessionInitialized 初始化和 sessionDestroyed 销毁⽅法， 可以监听 session 会话的开启与销毁（⽤户的上线与下线）。⽐如：可以⽤来实现在线⽤户数量的统计。</li><li>实现<strong>ServletContextListener 接⼝</strong>，并重写 contextInitialized 初始化和 contextDestroyed 销毁⽅法，可以监听全局应⽤的初始化和销毁。⽐如：在系统启动的时候，初始化⼀些数据到内存中供后续使⽤。</li><li>实现<strong>ServletRequestAttributeListener 接⼝</strong>（或 HttpSessionAttributeListener 或 ServletContextAttributeListener）。可以监听到对应的作⽤域内数据属性的 attributeAdded 新增、attributeRemoved 删除、attributeReplaced 替换等动作。</li></ul><h4 id="1-4-全局-Servlet-组件扫描注解"><a href="#1-4-全局-Servlet-组件扫描注解" class="headerlink" title="1.4 全局 Servlet 组件扫描注解"></a>1.4 全局 Servlet 组件扫描注解</h4><p>在启动类中加⼊**@ServletComponentScan**进⾏⾃动注册即可。</p><h3 id="⼆、监听器测试"><a href="#⼆、监听器测试" class="headerlink" title="⼆、监听器测试"></a>⼆、监听器测试</h3><p>定义如下的 Controller 进⾏访问测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//操作 request 的 attribute</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//操作 session 的 attribute</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello world---"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当应⽤启动的时候。“==============context 创建”被打印出来，说明触发 contextInitialized 监听函数</li><li>访问<code>http://localhost:8888/hello</code>，“ ++++++++++++++++++request 监听器：创建”被打印出来，说明 requestInitialized 回调函数被触发</li><li>紧接着“—————-session 创建”被打印出来，说明 sessionCreated 监听函数被触发</li><li>继续执⾏ request.setAttribute(“a”, “a”);，“—————-attributeAdded”被打印出来，说明 attributeAdded 监听函数被触发</li><li>继续执⾏ request.setAttribute(“a”, “b”);“—————-attributeReplaced”被打印出来，说明 attributeReplaced 监听函数被触发</li><li>继续执⾏完成 request.removeAttribute(“a”);“—————-attributeRemoved”被打印出来，说明 attributeRemoved 监听函数被触发</li><li>继续执⾏ session.invalidate();，“—————-session 销毁”被打印出来，说明 sessionDestroyed 监听函数被触发</li><li>将 controller ⽅法执⾏完成，”++++++++++++++++++request 监听器：销毁”被打印出来，说明 requestDestroyed 监听函数被触发</li><li>当停掉应⽤的时候，”==============context 销毁”被打印出来，说明 contextDestroyed 监听函数被触发</li></ul><p>从上⾯的打印结果看：作⽤域范围是 context ⼤于 request ⼤于 sesion，实际上并不是。因为我们⼿动调⽤了 session.invalidate();，session 才会被销毁。正常情况下 session 的销毁是由 servlet 容器根据 session 超时时间等因素来控制的。</p><p><strong>所以正常的作⽤域⽣命周期 ServletContext &gt; HttpSession &gt; request</strong></p><blockquote><p>在以上的监听测试中，会有⼀些多余的监听⽇志被打印，是 SpringBoot 系统默认帮我们做⼀些属性的添加与删除设置，从⽽触发监听，可以忽略掉。</p></blockquote><h2 id="2-Servlet-过滤器的实现"><a href="#2-Servlet-过滤器的实现" class="headerlink" title="2.Servlet 过滤器的实现"></a>2.Servlet 过滤器的实现</h2><h3 id="⼀、过滤器"><a href="#⼀、过滤器" class="headerlink" title="⼀、过滤器"></a>⼀、过滤器</h3><h4 id="1-1-定义-1"><a href="#1-1-定义-1" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>Servlet 过滤器是可⽤于 Servlet 编程的 Java 类，⽬的：</p><ul><li>在客户端的请求访问后端资源之前，拦截这些请求。</li><li>在服务器的响应发送回客户端之前，处理这些响应。</li></ul><h4 id="1-2-使⽤场景-1"><a href="#1-2-使⽤场景-1" class="headerlink" title="1.2 使⽤场景"></a>1.2 使⽤场景</h4><p>在实际的应⽤开发中，我们经常使⽤过滤器做以下⼀些事情：</p><ul><li>基于⼀定的授权逻辑，对 HTTP 请求进⾏过滤，从⽽保证数据访问的安全。⽐如：判断请求的来源 IP 是否在系统⿊名单中</li><li>对于⼀些经过加密的 HTTP 请求数据，进⾏统⼀解密，⽅便后端资源进⾏业务处理</li><li>或者我们社交应⽤经常需要的敏感词过滤，也可以使⽤过滤器，将触发敏感词的⾮法请求过滤掉</li></ul><p>过滤器主要的特点在于：<strong>⼀是可以过滤所有请求，⼆是它能够改变请求的数据内容</strong>。</p><h4 id="1-3-过滤器的实现"><a href="#1-3-过滤器的实现" class="headerlink" title="1.3 过滤器的实现"></a>1.3 过滤器的实现</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/5uyMA7.png"></p><h5 id="注册⽅式⼀-利⽤-WebFilter-注解配置"><a href="#注册⽅式⼀-利⽤-WebFilter-注解配置" class="headerlink" title="注册⽅式⼀:利⽤ WebFilter 注解配置"></a>注册⽅式⼀:利⽤ WebFilter 注解配置</h5><p><strong>@WebFilter</strong> 是 Servlet3.0 新增的注解，原先实现过滤器，需要在 web.xml 中进⾏配置，⽽现在通过此注解，启动启动时会⾃动扫描⾃动注册。</p><p>编写 Filter 类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注册器名称为customFilter,拦截的url为所有</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName<span class="token operator">=</span><span class="token string">"customFilter"</span><span class="token punctuation">,</span>urlPatterns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"/*"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"filter 初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span>response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"customFilter 请求处理之前----doFilter⽅法之前过滤请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对request、response进⾏⼀些预处理</span>        <span class="token comment">//链路 直接传给下⼀个过滤器</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"customFilter 请求处理之后----doFilter⽅法之后处理响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"filter 销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在启动类加⼊**@ServletComponentScan**注解即可。</p><p>使⽤这种⽅法当注册多个过滤器时，⽆法指定过滤器的先后执⾏顺序。原本使⽤ web.xml 配置过滤器时，是可指定执⾏顺序的，但使⽤ @WebFilter 时，没有这个配置属性的(需要配合@Order 进⾏)，所以接下来介绍下通过 FilterRegistrationBean 进⾏过滤器的注册。</p><blockquote><p><strong>–⼩技巧–</strong></p><p><strong>通过对过滤器名称的指定，进⾏顺序的约定，⽐如 LogFilter 和 AuthFilter，此时 AuthFilter 就会⽐ LogFilter 先执⾏，因为⾸字⺟ A ⽐ L 排序靠前。</strong></p></blockquote><h5 id="注册⽅式⼆：FilterRegistrationBean-⽅式"><a href="#注册⽅式⼆：FilterRegistrationBean-⽅式" class="headerlink" title="注册⽅式⼆：FilterRegistrationBean ⽅式"></a>注册⽅式⼆：FilterRegistrationBean ⽅式</h5><p><strong>FilterRegistrationBean</strong>是 SpringBoot 提供的，此类提供 setOrder ⽅法，可以为 filter 设置排序值，让 Spring 在注册 WebFilter 之前排序后再依次注册。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterRegistration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Filter可以new，也可以使⽤依赖注⼊Bean</span>        registration<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//过滤器名称</span>        registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"customFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//拦截路径</span>        registration<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置顺序</span>        registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registration<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要注册多个过滤器，就注册多个 FilterRegistrationBean 即可。启动后效果和第⼀种是⼀样的。可以访问 应⽤内的任意资源进⾏过滤器测试。</p><h3 id="⼆、servlet"><a href="#⼆、servlet" class="headerlink" title="⼆、servlet"></a>⼆、servlet</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>Java 程序员⼗⼏年前做 Web 开发的时候，所有的请求都是由 Servlet 来接受并响应的。每来⼀个请求，就要写⼀个 Servlet。 这种⽅式很麻烦，⼤家就在想能不能根据请求的路径以及参数不同，映射到不同的⽅法上去执⾏，这样 就可以在⼀个 Servlet 类⾥⾯处理多个请求，每个请求就是⼀个⽅法。这个思想后来就逐渐发展为 struts、SpringMVC 等框架。</p><h4 id="2-2-使⽤场景"><a href="#2-2-使⽤场景" class="headerlink" title="2.2 使⽤场景"></a>2.2 使⽤场景</h4><p>⽬前来看，Servlet 使⽤的场景已经被 SpringMVC 封装架构全⾯覆盖，⼏乎没有什么需要使⽤原始 Servlet 进⾏开发的场景。但是不排除，⽼项⽬向 SpringBoot 项⽬迁移融合，需要⽀持 Servlet 的情况， 作为基础也是有必要的。</p><h4 id="2-3-实现"><a href="#2-3-实现" class="headerlink" title="2.3 实现"></a>2.3 实现</h4><p>我们来看⼀下在 SpringBoot ⾥⾯如何实现 Servlet 的编写和使⽤。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstServlet"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">"/firstServlet"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"firstServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"firstServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在启动类加⼊@ServletComponentScan 注解即可。</p><h2 id="3-Spring-拦截器及请求链路说明"><a href="#3-Spring-拦截器及请求链路说明" class="headerlink" title="3. Spring 拦截器及请求链路说明"></a>3. Spring 拦截器及请求链路说明</h2><h3 id="⼀、拦截器-Interceptor"><a href="#⼀、拦截器-Interceptor" class="headerlink" title="⼀、拦截器 Interceptor"></a>⼀、拦截器 Interceptor</h3><p>在 Servlet 规范中并没有拦截器的概念，它是在 Spring 框架内衍⽣出来的。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/msYIEY.png"></p><p>Spring 中拦截器有三个⽅法：</p><ul><li>preHandle 表示被拦截的 URL 对应的控制层⽅法，执⾏前的⾃定义处理逻辑</li><li>postHandle 表示被拦截的 URL 对应的控制层⽅法，执⾏后的⾃定义处理逻辑，此时还未将 modelAndView 进⾏⻚⾯渲染</li><li>afterCompletion 表示此时 modelAndView 已做⻚⾯渲染，执⾏拦截器的⾃定义处理</li></ul><h3 id="⼆、拦截器与过滤器的核⼼区别"><a href="#⼆、拦截器与过滤器的核⼼区别" class="headerlink" title="⼆、拦截器与过滤器的核⼼区别"></a>⼆、拦截器与过滤器的核⼼区别</h3><p>从请求处理的⽣命周期上看，拦截器 Interceptor 和过滤器 filter 的作⽤是类似的。过滤器能做的事情，拦截器⼏乎也都能做。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/TVCLP4.png"></p><p>但是⼆者使⽤场景还是有⼀些区别的：</p><ul><li>规范不同：Filter 是在 Servlet 规范中定义的组件，在 servlet 容器内⽣效。⽽拦截器是 Spring 框架⽀持的，在 Spring 上下⽂中⽣效。</li><li>拦截器可以获取并使⽤ Spring IOC 容器中的 bean，但过滤器就不⾏。因为过滤器是 Servlet 的组件， ⽽ IOC 容器的 bean 是 Spring 框架内使⽤，拦截器恰恰是 Spring 框架内衍⽣出来的。</li><li>拦截器可以访问 Spring 上下⽂值对象，如 ModelAndView，过滤器不⾏。基于与上⼀点同样的原 因。</li><li>过滤器在进⼊ servlet 容器之前处理请求，拦截器在 servlet 容器之内处理请求。过滤器⽐拦截器的粒度更⼤，⽐较适合系统级别的所有 API 的处理动作。⽐如：权限认证，Spring Security 就⼤量的使⽤了过滤器。</li><li>拦截器相⽐于过滤器粒度更⼩，更适合分模块、分范围的统⼀业务逻辑处理。⽐如：分模块的、分业务的记录审计⽇志。</li></ul><p>⽐如：我们在 Filter 中使⽤注解，注⼊⼀个测试 service，结果为 null。因为过滤器⽆法使⽤ Spring IOC 容器 bean。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/U7z1y4.png"></p><h3 id="三、拦截器的实现"><a href="#三、拦截器的实现" class="headerlink" title="三、拦截器的实现"></a>三、拦截器的实现</h3><p>编写⾃定义拦截器类，此处⽤⼀个简单的例⼦让⼤家了解拦截器的⽣命周期。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">TestService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: ⾃定义拦截器类，了解拦截器的⽣命周期* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">TestService</span> testService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"preHandle:请求前调⽤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>testService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回 false 则请求中断</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"postHandle:请求后调⽤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterCompletion:请求调⽤完成后回调⽅法，即在视图渲染完成后回调"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现 WebMvcConfigurer 接⼝完成拦截器的注册。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 注册拦截器,废弃：public class MyWebMvcConfigurer extendsWebMvcConfigurerAdapter* @author: syhans* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> excludePath <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/static"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">CustomHandlerInterceptor</span> customHandlerInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//注册拦截器 拦截规则</span>        <span class="token comment">//多个拦截器时 以此添加 执⾏顺序按添加顺序</span>      registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>customHandlerInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们在 CustomHandlerInterceptor ，注⼊⼀个测试 service，结果是可以正确依赖注⼊并使⽤该 Service 的。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/YlDm2d.png"></p><h3 id="四、请求链路说明"><a href="#四、请求链路说明" class="headerlink" title="四、请求链路说明"></a>四、请求链路说明</h3><p>随便请求⼀个系统内的 API（因为我们配置的过滤器拦截器拦截所有请求），通过输出结果分析⼀下拦 截器、过滤器中各接⼝函数的执⾏顺序。</p><pre class="line-numbers language-Plain" data-language="Plain"><div class="caption"><span>Text</span></div><code class="language-Plain">CustomFilter : customFilter 请求处理之前----doFilter⽅法之前过滤请求CustomHandlerInterceptor : preHandle:请求前调⽤CustomHandlerInterceptor : postHandle:请求后调⽤CustomHandlerInterceptor : afterCompletion:请求调⽤完成后回调⽅法，即在视图渲染完成后回调CustomFilter : customFilter 请求处理之后----doFilter⽅法之后处理响应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求链路调⽤顺序图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/tlzhE7.png"></p><h2 id="4-⾃定义事件的发布与监听"><a href="#4-⾃定义事件的发布与监听" class="headerlink" title="4.⾃定义事件的发布与监听"></a>4.⾃定义事件的发布与监听</h2><h3 id="⼀、事件监听介绍"><a href="#⼀、事件监听介绍" class="headerlink" title="⼀、事件监听介绍:"></a>⼀、事件监听介绍:</h3><h4 id="1-1-事件监听的⻆⾊"><a href="#1-1-事件监听的⻆⾊" class="headerlink" title="1.1 事件监听的⻆⾊"></a>1.1 事件监听的⻆⾊</h4><p>⾸先我们要理解事件监听中需要的⼏个⻆⾊</p><ul><li>事件发布者 （即事件源）</li><li>事件监听者</li><li>事件本身</li></ul><h4 id="1-2-事件监听的使⽤场景"><a href="#1-2-事件监听的使⽤场景" class="headerlink" title="1.2 事件监听的使⽤场景"></a>1.2 事件监听的使⽤场景</h4><p>举⼀个简单的例⼦：⽐如居委会发布停⽔通知。居委会就是事件源、停⽔就是事件本身、该居委会的辖区居⺠就是事件监听者。这个例⼦，有这样⼏个特点：</p><ul><li>异步处理：居委会⼯作⼈员发布通知之后，就可以去忙别的⼯作了，不会原地等待所有居⺠的反馈。</li><li>解耦：居委会和居⺠之间是解耦的，互相不⼲扰对⽅的⼯作状态与⽣活状态。</li><li>不规律性：停⽔事件发⽣频率是不规律的，触发规则相对随机。</li></ul><p>当你在⼀个系统的业务需求中，满⾜上⾯的⼏个特点中的 2 点，就应该考虑使⽤事件监听机制实现业务需求。</p><p>实现事件监听机制有很多⽅法，⽐如：</p><ul><li>使⽤消息队列中间件的发布订阅模式</li><li>JDK ⾃带的 java.util.EventListener</li><li>Spring 环境下的实现事件发布监听的⽅法</li></ul><h3 id="⼆、代码具体实现"><a href="#⼆、代码具体实现" class="headerlink" title="⼆、代码具体实现"></a>⼆、代码具体实现</h3><h4 id="2-1-⾃定义事件"><a href="#2-1-⾃定义事件" class="headerlink" title="2.1 ⾃定义事件"></a>2.1 ⾃定义事件</h4><p>继承⾃ ApplicationEvent 抽象类，然后定义⾃⼰的构造器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件:继承ApplicationEvent抽象类，并定义⾃⼰的构造器* @author: syhan* @date: 2022-04-04**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-⾃定义事件监听器"><a href="#2-2-⾃定义事件监听器" class="headerlink" title="2.2 ⾃定义事件监听器"></a>2.2 ⾃定义事件监听器</h4><p><strong>springboot 进⾏事件监听有四种⽅式</strong></p><ol><li><p>写代码向 ApplicationContext 中添加监听器</p></li><li><p>使⽤ Component 注解将监听器装载⼊ spring 容器</p></li><li><p>在 application.properties 中配置监听器</p></li><li><p>通过@EventListener 注解实现事件监听</p></li></ol><h5 id="⽅式-1"><a href="#⽅式-1" class="headerlink" title="⽅式 1"></a>⽅式 1</h5><p>⾸先创建 MyListener1 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件监听器⽅式1：实现ApplicationListener接⼝* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener1</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 SpringBoot 应⽤启动类中获取 ConfigurableApplicationContext 上下⽂，装载监听</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ConfigurableApplicationContext上下⽂</span>        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//装载监听</span>        context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="⽅式-2（推荐）"><a href="#⽅式-2（推荐）" class="headerlink" title="⽅式 2（推荐）"></a>⽅式 2（推荐）</h5><p>创建 MyListener2 类，并使⽤@Component 注解将该类装载⼊ spring 容器中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件监听器⽅式2：使⽤@Component注解将该类装载⼊spring容器中* @author: mqxu* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener2</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="⽅式-3"><a href="#⽅式-3" class="headerlink" title="⽅式 3"></a>⽅式 3</h5><p>⾸先创建 MyListener3 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @description: ⾃定义事件监听器⽅式3：在application.properties中配置监听* @author: mqxu* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener3</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 application.yml 中配置监听</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token operator">:</span>listener<span class="token operator">:</span>   classes<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span>MyListener3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="⽅式-4（推荐）"><a href="#⽅式-4（推荐）" class="headerlink" title="⽅式 4（推荐）"></a>⽅式 4（推荐）</h5><p>创建 MyListener4 类，该类⽆需实现 ApplicationListener 接⼝，使⽤@EventListener 装饰具体⽅法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description: ⾃定义事件监听器⽅式4：使⽤@EventListener装饰具体⽅法 * @author: syhan * @date: 2022-04-04 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener4</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@EventListener</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">MyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s 监听到事件源：%s."</span><span class="token punctuation">,</span> <span class="token class-name">MyListener4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试监听事件的发布"><a href="#三、测试监听事件的发布" class="headerlink" title="三、测试监听事件的发布"></a>三、测试监听事件的发布</h3><p>有了 applicationContext，想在哪发布事件就在哪发布事件，我们在启动主类发布事件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ConfigurableApplicationContext上下⽂</span>        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//装载监听</span>        context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发布事件</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span><span class="token string">"测试事件"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动后，⽇志打印如下。（下⾯截图是在启动类发布事件后的截图，在单元测试⾥⾯监听器 1 监听不到，执⾏顺序问题）：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/EkW0TY.png"></p><p>由⽇志打印可以看出，SpringBoot 四种事件的实现⽅式监听是有序的。⽆论执⾏多少次都是这个顺序。</p><h2 id="5-应⽤启动的监听"><a href="#5-应⽤启动的监听" class="headerlink" title="5.应⽤启动的监听"></a>5.应⽤启动的监听</h2><h3 id="⼀、简介"><a href="#⼀、简介" class="headerlink" title="⼀、简介"></a>⼀、简介</h3><p>SpringBoot 提供了两个接⼝：CommandLineRunner、ApplicationRunner，⽤于启动应⽤时做特殊处理，这些代码会在 SpringApplication 的 run()⽅法运⾏完成之前被执⾏。 相对于之前介绍的 Spring 的 ApplicationListener 接⼝⾃定义监听器、Servlet 的 ServletContextListener 监听器。</p><p><strong>使⽤⼆者的好处在于，可以⽅便地使⽤应⽤启动参数，根据参数不同做不同的初始化操作。</strong></p><h3 id="⼆、常⽤场景介绍"><a href="#⼆、常⽤场景介绍" class="headerlink" title="⼆、常⽤场景介绍"></a>⼆、常⽤场景介绍</h3><p>实现 CommandLineRunner、ApplicationRunner 接⼝，通常⽤于应⽤启动前的特殊代码执⾏，⽐如：</p><ul><li>将系统常⽤的数据加载到内存</li><li>应⽤上⼀次运⾏的垃圾数据清理</li><li>系统启动成功后的通知的发送</li></ul><h3 id="三、⼩实验"><a href="#三、⼩实验" class="headerlink" title="三、⼩实验"></a>三、⼩实验</h3><h4 id="通过-Component-定义⽅式实现"><a href="#通过-Component-定义⽅式实现" class="headerlink" title="通过@Component 定义⽅式实现"></a>通过@Component 定义⽅式实现</h4><p>CommandLineRunner：参数是字符串数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandLineStartupRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CommandLineStartupRunner传⼊参数：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ApplicationRunner：参数被放⼊ ApplicationArguments，通过 getOptionNames()、 getOptionValues()、getSourceArgs()获取参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppStartupRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ApplicationRunner参数名称: &#123;&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">getOptionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ApplicationRunner参数值: &#123;&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ApplicationRunner参数: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过-Bean-定义⽅式实现"><a href="#通过-Bean-定义⽅式实现" class="headerlink" title="通过@Bean 定义⽅式实现"></a>通过@Bean 定义⽅式实现</h4><p>这种⽅式可以指定执⾏顺序，注意前两个 Bean 是 CommandLineRunner，最后⼀个 Bean 是 ApplicationRunner 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>runner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description:* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">runner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommandLineRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BeanCommandLineRunner run1()"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">runner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommandLineRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BeanCommandLineRunner run2()"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">runner3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BeanApplicationRunner run3()"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、执⾏测试"><a href="#四、执⾏测试" class="headerlink" title="四、执⾏测试"></a>四、执⾏测试</h3><p>在启动配置中加⼊如下参数，保存后启动应⽤</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/LKrNlw.png"></p><p>测试输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Bf5dJ7.png"></p><p>从测试结果上看</p><ul><li>ApplicationRunner 执⾏优先级⾼于 CommandLineRunner</li><li>以 Bean 的形式运⾏的 Runner 优先级要低于 Component 注解加 implements Runner 接⼝的⽅式</li><li>Order 注解只能保证同类的 CommandLineRunner 或 ApplicationRunner 的执⾏顺序，不能跨类保证顺序</li></ul><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>CommandLineRunner、ApplicationRunner 的核⼼⽤法是⼀致的，就是⽤于应⽤启动前的特殊代码执⾏。ApplicationRunner 的执⾏顺序先于 CommandLineRunner；ApplicationRunner 将参数封装成了对 象，提供了获取参数名、参数值等⽅法，操作上会⽅便⼀些。</p><h2 id="6-类初始化监听"><a href="#6-类初始化监听" class="headerlink" title="6.类初始化监听"></a>6.类初始化监听</h2><p>有些初始化动作，并不⼀定在应⽤初始化的时候进⾏，因为这个时候初始化，经常有些 Bean 还未形成对象，有些 properties 属性值还没完成注⼊，导致我们的初始化动作需要的⼀些必要条件没有准备好，所 谓的初始化也就⽆法正确进⾏。</p><p>我们经常使⽤的⼀些初始化动作，可以在 bean 进⾏初始化的时候进⾏，如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 类初始化监听* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanInitListener</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">BeanInitListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化构造⽅法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化 afterPropertiesSet ⽅法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类初始化 postConstruct 注解⽅法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上⾯代码经常被我们使⽤到的是：</p><ul><li>postConstruct 注解⽅法，该注解所注释的⽅法会在 Bean 对象构建完成之后去执⾏。</li><li>实现 InitializingBean 接⼝的 afterPropertiesSet ⽅法，通过这个⽅法名也可以知道该⽅法是在属性被设置之后执⾏。</li></ul><p>将上⾯的代码类放⼊⼀个 SpringBoot 应⽤，并启动应⽤，执⾏顺序（⽇志输出顺序）如下:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HbFWWo.png"></p><p><strong>结论:</strong></p><ul><li>静态代码块会在类加载器加载这个类时执⾏⼀次。</li><li>⾮静态代码块会在这个类的构造⽅法被执⾏的时候执⾏,构造⽅法每被执⾏⼀次, ⾮静态代码块都会被执⾏⼀次(可以理解为⾮静态代码块的内容会被 copy 到构造⽅法内容的最前⾯)。</li><li>afterPropertiesSet ⽅法和被@PostConstruct ⽅法会在 BeanInitTester 实例被创建并且 BeanInitTester 类中的所有实例属性都被初始化之后执⾏. ⽽ afterPropertiesSet ⽅法会在被 @PostConstruct ⽅法标注的⽅法之后执⾏。</li><li>顺序: 静态代码块-&gt;⾮静态代码块-&gt;构造⽅法-&gt;@PostConstruct ⽅法-&gt;afterPropertiesSet ⽅法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter起步</title>
      <link href="/2022/06/23/flutter-qi-bu/"/>
      <url>/2022/06/23/flutter-qi-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter-介绍"><a href="#Flutter-介绍" class="headerlink" title="Flutter 介绍"></a>Flutter 介绍</h2><h3 id="1-1、跨平台开发对比"><a href="#1-1、跨平台开发对比" class="headerlink" title="1.1、跨平台开发对比"></a>1.1、跨平台开发对比</h3><ul><li><strong>Web 容器 ：Cordova Ionic</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/Cordova%20%20ionic.png" alt="Cordova  ionic"></p><ul><li><strong>泛 Web 容器: React Native</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/ReactNative.png" alt="React Native"></p><ul><li><strong>自绘引擎：Flutter</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/JIT.png" alt="JIT"></p><blockquote><p><strong>自己去了解一下：AOT 和 JIT</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94.png" alt="方案对比"></p><p><strong>方案对比</strong></p><h3 id="1-2、Flutter-介绍"><a href="#1-2、Flutter-介绍" class="headerlink" title="1.2、Flutter 介绍"></a>1.2、Flutter 介绍</h3><blockquote><p>Flutter 是 Google 推出并开源的移动应用开发 UI 框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码同时运行在多个平台。 Flutter 提供了丰富的组件、接口，开发者可以很快地为 Flutter 添加 Native 扩展。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/Flutter%E4%BB%8B%E7%BB%8D.png" alt="Flutter介绍"></p><p><strong>Flutter 架构分层</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/Flutter%E6%9E%B6%E6%9E%84%E5%88%86%E5%B1%82.png" alt="Flutter架构分层"></p><h2 id="Flutter-环境"><a href="#Flutter-环境" class="headerlink" title="Flutter 环境"></a>Flutter 环境</h2><h3 id="2-1、环境搭建"><a href="#2-1、环境搭建" class="headerlink" title="2.1、环境搭建"></a>2.1、环境搭建</h3><p>参考：</p><ul><li><a href="https://book.flutterchina.club/chapter1/install_flutter.html#_1-3-1-%E5%AE%89%E8%A3%85flutter">https://book.flutterchina.club/chapter1/install_flutter.html#_1-3-1-%E5%AE%89%E8%A3%85flutter</a></li><li><a href="https://doc.flutterchina.club/get-started/install/">https://doc.flutterchina.club/get-started/install/</a></li></ul><h3 id="2-2、常用命令"><a href="#2-2、常用命令" class="headerlink" title="2.2、常用命令"></a>2.2、常用命令</h3><ul><li>查询环境配置：flutter doctor</li><li>获取模拟器：flutter emulators</li><li>启动模拟器：flutter emulators –launch 模拟器名</li><li>获取所有真机设备列表：flutter devices</li><li>运行在所有设备：flutter run -d all</li><li>运行在指定设备：flutter run -d <device Id></li><li>打包 apk：flutter build apk</li><li>打包 ipa：flutter build ios</li><li>打包 exe：flutter build windows</li><li>打包 pkg：flutter build mac</li><li>拉取 flutter 项目中的第三方包，不包括 flutter 的 sdk：flutter packages get</li><li>更新 flutter 项目所有依赖包，不包括 flutter sdk：flutter packages upgrade</li><li>配置打包信息：flutter config -x</li><li>查看 flutter sdk 的所有分支：flutter channel</li><li>切换 sdk 分支：flutter channel stable</li><li>分析代码：flutter analyze</li><li>获取 flutter 所有命令: flutter</li><li>查看命令的帮助信息: flutter help</li><li>查看 Flutter 版本: flutter –version</li></ul><table><thead><tr><th align="center">常用命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">–version</td><td align="center">查看 Flutter 版本</td></tr><tr><td align="center">-h 或者–help</td><td align="center">打印所有命令行用法信息</td></tr><tr><td align="center">analyze</td><td align="center">分析项目的 Dart 代码</td></tr><tr><td align="center">build</td><td align="center">Flutter 构建命令</td></tr><tr><td align="center">channel</td><td align="center">列表或开关 Flutter 通道</td></tr><tr><td align="center">clean</td><td align="center">删除构建/目录</td></tr><tr><td align="center">config</td><td align="center">配置 Flutter</td></tr><tr><td align="center">create</td><td align="center">创建一个新的 Flutter 项目</td></tr><tr><td align="center">devices</td><td align="center">列出所有连接的设备</td></tr><tr><td align="center">doctor</td><td align="center">展示有关安装工具的信息</td></tr><tr><td align="center">drive</td><td align="center">为当前项目运行 Flutter 驱动程序测试</td></tr><tr><td align="center">format</td><td align="center">格式一个或多个 Dart 文件</td></tr><tr><td align="center">fuchsia_reload</td><td align="center">在 Fuchsia 上进行热重载</td></tr><tr><td align="center">help</td><td align="center">显示 Flutter 帮助信息</td></tr><tr><td align="center">install</td><td align="center">在附加设备上安装 Flutter 应用程序</td></tr><tr><td align="center">logs</td><td align="center">显示用于运行 Flutter 应用程序的日志输出</td></tr><tr><td align="center">packages</td><td align="center">用于管理 Flutter 包</td></tr><tr><td align="center">precache</td><td align="center">填充 Flutter 工具的二进制工件缓存</td></tr><tr><td align="center">run</td><td align="center">在附加设备上运行 Flutter 应用程序</td></tr><tr><td align="center">screenshot</td><td align="center">从一个连接的设备截图</td></tr><tr><td align="center">stop</td><td align="center">停止在附加设备上的 Flutter 应用</td></tr><tr><td align="center">test</td><td align="center">对当前项目的 Flutter 单元测试</td></tr><tr><td align="center">trace</td><td align="center">开始并停止跟踪运行的 Flutter 应用程序</td></tr><tr><td align="center">upgrade</td><td align="center">升级 Flutter 副本</td></tr></tbody></table><h2 id="Android-Studio-开发-Flutter-实用技巧"><a href="#Android-Studio-开发-Flutter-实用技巧" class="headerlink" title="Android Studio 开发 Flutter 实用技巧"></a>Android Studio 开发 Flutter 实用技巧</h2><blockquote><p>初次使用 AS 的小伙伴可以看下 Flutter 官方的这篇<a href="https://flutter.cn/docs/development/tools/android-studio">在 Android Studio 或 IntelliJ 里开发 Flutter 应用</a></p></blockquote><h3 id="3-1-快捷键"><a href="#3-1-快捷键" class="headerlink" title="3.1 快捷键"></a>3.1 快捷键</h3><p><strong>以 Android Studio + Mac 为例：</strong></p><pre class="line-numbers language-none"><code class="language-none">- 快速创建Widget：在dart文件中输入stf或stl出现提示后按回车即可- 快速修复：command + .- 自动生成构造函数：选中 final 参数，快捷键：option + 回车- 添加父组件、变为子组件、删除子组件：option+回车- 万能的搜索：双击shift- 查看最近打开的文件：command + E- 重命名：fn+shift+f6- 查看当前类结构：command + fn + f12- 查看源码：将光标放到要查看源码的类名或方法名上，长按command 然后的点击- 查看类的子类：选中要查看的类，然后：command + B 或 option + command + B- 将代码更新到模拟器上：选中模拟器然后 command + R- 导入类的快捷键：将光标放在要导入类的上面，然后按 option + enter- 前进后退：当跟踪代码的时候，经常跳转到其他类，后退快捷键：option+command+方向左键，前进快捷键：option+command+方向右键- 全局搜索：command + shift + F- 全局替换：command + shift + R- 查找引用： option + shift + F7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上快捷键是 Android Studio 的 macOS 的 keymap，如果是 Windows 系统，将 command 换成 Ctrl，option 换成 Alt 即可。</p></blockquote><p>更多快捷键可参考：<a href="https://developer.android.com/studio/intro/keyboard-shortcuts?hl=zh-CN">keyboard-shortcuts</a></p><h3 id="3-2-自动补全"><a href="#3-2-自动补全" class="headerlink" title="3.2 自动补全"></a>3.2 自动补全</h3><blockquote><p>通过自动补全功能能够让开发效率提升不少，那么如何使用自动补全功能呢？</p></blockquote><p>可以在 Android Studio 的 Plugin 中搜索<code>Flutter Snippets</code>这个插件然后进行安装：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/image-20220622132735043.png"></p><p>有了这个插件后，Android Studio 可以帮你自动补全主流 widget 的代码。以下是触发自动补全各种 widget 的缩写：</p><ul><li>stful: 创建一个有状态的 Widget</li><li>stless：创建一个无状态的 Widget</li><li>column：创建一个 Column Widget</li><li>container：创建一个 Container Widget</li><li>row：创建一个 Row Widget</li><li>showDialog：创建一个 AlertDialog</li></ul><p>更多自动补全快捷键可查阅：<a href="https://github.com/georgeherby/flutter-snippets/blob/master/README.md">flutter-snippets</a>。</p><h3 id="3-3-代码自动格式化"><a href="#3-3-代码自动格式化" class="headerlink" title="3.3 代码自动格式化"></a>3.3 代码自动格式化</h3><p>虽然我们可以通过快捷键<code>option(alt)+command(ctrl)+L</code>来在提交代码是格式化，但是这种手动的方式显然不够效率。</p><p>可以借助 AS 的保存时代码自动格式化功能来释放我们的双手：</p><p>在 Settings &gt; Language &amp; Frameworks &gt; Flutter 中勾选 “Format Code on Save”这个选项：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/image-20220622131711130.png"></p><p>另外建议勾选<code>Organize imports on save</code>这个选项，它会帮你移除没有使用的导入。</p><h3 id="3-4-提取-Flutter-代码"><a href="#3-4-提取-Flutter-代码" class="headerlink" title="3.4 提取 Flutter 代码"></a>3.4 提取 Flutter 代码</h3><p>Flutter 最让人头疼的一点是的布局的嵌套，对于复杂的布局如果不进行任何重构的情况下会嵌套的非常深，从而降低代码的可读性不利于后期的维护。</p><p>推荐的做法是将复杂的布局提取成一个函数或者一个组件，这里分享一个提取 Flutter 代码的技巧：</p><p>选中一个比较复杂的 widget，鼠标右键单击，选择 Refactor &gt; Extract Method ，然后给这个方法取一个名字，AS 可以自动把这块代码抽离出一个<code>Method</code>，并为它添加对于对应的参数：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/image-20220622131925784.png"></p><blockquote><p>除此之外，我们还可以借助 AS 来将符合条件的代码块提取成一个 Widget，只需要在 Refactor 中选择 <strong>Extract Flutter Widget</strong>即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志框架与全局日志管理</title>
      <link href="/2022/06/20/ri-zhi-kuang-jia-yu-quan-ju-ri-zhi-guan-li/"/>
      <url>/2022/06/20/ri-zhi-kuang-jia-yu-quan-ju-ri-zhi-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="日志框架与全局日志管理"><a href="#日志框架与全局日志管理" class="headerlink" title="日志框架与全局日志管理"></a>日志框架与全局日志管理</h1><h2 id="1-⽇志框架的体系结构"><a href="#1-⽇志框架的体系结构" class="headerlink" title="1.⽇志框架的体系结构"></a>1.⽇志框架的体系结构</h2><p>刚刚接触到⽇志的同学可能会被各种⽇志框架吓到，包括各种⽇志框架之间的 jar 总是发⽣冲突，另很多 ⼩伙伴头疼不已。本章将学习各种 Java ⽇志框架发展过程，以及他们之间的关系，以及如何选型。</p><h3 id="⼀、五花⼋⻔的⽇志⼯具包"><a href="#⼀、五花⼋⻔的⽇志⼯具包" class="headerlink" title="⼀、五花⼋⻔的⽇志⼯具包"></a>⼀、五花⼋⻔的⽇志⼯具包</h3><h4 id="1-1-⽇志框架"><a href="#1-1-⽇志框架" class="headerlink" title="1.1 ⽇志框架"></a>1.1 ⽇志框架</h4><ul><li>JDK java.util.logging 包:java.util.logging 是 jdk1.4 发布的 java ⽇志包, 可以说是应⽤⽐较久远的⽇志⼯具包</li><li>log4j： apache 的⼀个开源项⽬，提供了强有⼒的 java ⽇志⽀持，甚⾄他也提供了其他语⾔包括 C、C++、.Net、PL/SQL 的接⼝，从⽽实现多语⾔并存的分布式环境⽇志打印。⽬前已经停⽌更 新，所以不推荐使⽤。</li><li>Logback：由 log4j 创始⼈设计的另⼀个开源⽇志组件，作为 Spring Boot 默认的⽇志框架，应⽤⽐较 ⼴泛。</li><li>log4j2 ：Apache Log4j2 是对 Log4j 的升级，它⽐其前身 Log4j1.x 提供了重⼤改进，并提供了 Logback 中可⽤的许多改进，同时修复了 Logback 架构中的⼀些问题。它基于 LMAX 公司开发 Disruptor（⼀个开源的⽆锁并发框架），改善了 Log4j 和 Logback 在架构设计⽅⾯的缺陷，具有超⾼ 的吞吐量和低延迟，性能⽐ Log4j1.x 和 Logback 更好。</li></ul><h4 id="1-2-⽇志⻔⾯"><a href="#1-2-⽇志⻔⾯" class="headerlink" title="1.2 ⽇志⻔⾯"></a>1.2 ⽇志⻔⾯</h4><ul><li>commons-logging： Apache commons 类库中的⼀员，他作为⼀个⽇志⻔⾯，能够⾃动选择使⽤ log4j 还是 JDK logging，但是他不依赖 Log4j，JDK Logging 的 API。如果项⽬的 classpath 中包含了 log4j 的类库，就会使⽤ log4j，否则就使⽤ JDK Logging。</li><li>SLF4J： 可以说是⽬前应⽤最为⼴泛的⽇志⻔⾯了，它提供了⼀个⽇志抽象层，允许你在后台使⽤ 任意⼀个⽇志类库。如：log4j、log4j2、logback。</li></ul><h4 id="1-3-⽇志⻔⾯存在的意义"><a href="#1-3-⽇志⻔⾯存在的意义" class="headerlink" title="1.3 ⽇志⻔⾯存在的意义"></a>1.3 ⽇志⻔⾯存在的意义</h4><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/bg9dbV.png"></p><p><strong>为什么不直接使⽤⽇志框架，⽽是搞出⼀个⽇志⻔⾯？</strong></p><p>⽇志⻔⾯（SLF4J）主要是为了给 Java ⽇志访问提供⼀套标准、规范的 API 框架，其主要意义在于提供接 ⼝，具体的实现可以交由其他⽇志框架来实现，例如 log4j 和 logback 等。 对于⼀般的 Java 项⽬⽽⾔，⽇ 志框架会选择 slf4j-api 作为⻔⾯，配上具体的实现框架（log4j、log4j2、logback 等），中间使⽤桥接器 完成桥接。前⾯介绍的⼏种⽇志框架，每⼀种⽇志框架都有⾃⼰单独的 API，要使⽤对应的框架就要使⽤其对应的 API，这就⼤⼤的增加应⽤程序代码对于⽇志框架的耦合性要求。有了 SLF4J 这个⻔⾯之后，程序员永远 都是⾯向 SLF4J 编程，可以实现简单快速地替换底层的⽇志框架⽽不会导致业务代码需要做相应的修改。</p><p>在使⽤ SLF4J 进⾏⽇志记录时，通常都需要在每个需要记录⽇志的类中定义 Logger 变量，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTestController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogTestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Trace ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Debug ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Info ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Warn ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这显然属于重复性劳动，降低了开发效率，如果你在项⽬中引⼊了 Lombok，那么可以使⽤它提供的 @Slf4j 注解来⾃动⽣成上⾯那个变量，默认的变量名是 log，如果我们想采⽤惯⽤的 LOGGER 变量名， 那么可以在⼯程的 main/java ⽬录中增加 lombok.config ⽂件，并在⽂件中增加 lombok.log.fieldName=LOGGER 的配置项即可。</p><h3 id="⼆、⽇志框架选型"><a href="#⼆、⽇志框架选型" class="headerlink" title="⼆、⽇志框架选型"></a>⼆、⽇志框架选型</h3><ul><li>Spring Boot 默认的⽇志记录框架使⽤的是 Logback</li><li>其中 Log4j 可以认为是⼀个过时的函数库，已经停⽌更新，不推荐使⽤，相⽐之下，性能和功能也是最差的。</li><li>logback 虽然是 Spring Boot 默认的，但性能上还是不及 Log4j2，因此，在现阶段，⽇志记录⾸选 Log4j2。</li></ul><p>SLF4J + Log4j2 是我们推荐的⽇志记录选型。</p><p>性能测试结果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/EyWSI9.png"></p><p>参考:[log4j2 官网](<a href="https://logging.apache.org/log4j/2.x/manual/async.html">Log4j – Log4j 2 Lock-free Asynchronous Loggers for Low-Latency Logging (apache.org)</a>)</p><h3 id="三、⽇志级别"><a href="#三、⽇志级别" class="headerlink" title="三、⽇志级别"></a>三、⽇志级别</h3><p>细说各⽇志框架整合配置前，我们先来⼤致了解下，最常⻅的⽇志的⼏个级别：ERROR, WARN, INFO, DEBUG 和 TRACE。像其他的，⽐如 ALL、OFF 和 FATAL 之类的开发过程中应该基本上是不会涉及的。所 以以下从低到⾼⼀次介绍下常⻅的⽇志级别。</p><ol><li>TRACE：追踪。⼀般上对核⼼系统进⾏性能调试或者跟踪问题时有⽤，此级别很低，⼀般上是不开 启的，开启后⽇志会很快就打满磁盘的。</li><li>DEBUG:调试。这个⼤家应该不陌⽣了。开发过程中主要是打印记录⼀些运⾏信息之类的。</li><li>INFO:信息。这个是最常⻅的了，⼤部分默认就是这个级别的⽇志。⼀般上记录了⼀些交互信息，⼀ 些请求参数等等。可⽅便定位问题，或者还原现场环境的时候使⽤。此⽇志相对来说是⽐较重要的。</li><li>WARN:警告。这个⼀般上是记录潜在的可能会引发错误的信息。⽐如启动时，某某配置⽂件不存在 或者某个参数未设置之类的。</li><li>ERROR:错误。这个也是⽐较常⻅的，⼀般上是在捕获异常时输出，虽然发⽣了错误，但不影响系统 的正常运⾏。但可能会导致系统出错或是宕机等。</li></ol><p>⽇志级别从⼩到⼤为 trace&lt;debug&lt;info&lt;warn&lt;error&lt;fatal，由于通常⽇志框架默认⽇志级别设置为 INFO，因此 trace 和 debug 级别的⽇志都看不到。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>-04-17 <span class="token number">13</span>:59:16.566 INFO c.z.b.l.controller.LogTestController  <span class="token builtin class-name">:</span>Info ⽇志<span class="token punctuation">..</span>.<span class="token number">2020</span>-04-17 <span class="token number">13</span>:59:16.566 WARN c.z.b.l.controller.LogTestController  <span class="token builtin class-name">:</span>Warn ⽇志<span class="token punctuation">..</span>.<span class="token number">2020</span>-04-17 <span class="token number">13</span>:59:16.566 ERROR c.z.b.l.controller.LogTestController <span class="token builtin class-name">:</span>Error ⽇志<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、常⻅术语概念解析"><a href="#四、常⻅术语概念解析" class="headerlink" title="四、常⻅术语概念解析"></a>四、常⻅术语概念解析</h3><ol><li>appender：主要控制⽇志输出到哪⾥，⽐如：⽂件、数据库、控制台打印等。</li><li>logger: ⽤来设置某⼀个包或者具体某⼀个类的⽇志打印级别、以及指定 appender。</li><li>root：也是⼀个 logger，是⼀个特殊的⽗ logger。所有的⼦ logger 最终都会将输出流交给 root，除⾮ 在⼦ logger 中配置了 additivity=”false”。</li><li>rollingPolicy：所有⽇志都放在⼀个⽂件是不好的，所以可以指定滚动策略，按照⼀定周期或⽂件⼤ ⼩切割存放⽇志⽂件。</li><li>RolloverStrategy：⽇志清理策略。通常是指⽇志保留的时间。</li><li>异步⽇志：单独开⼀个线程做⽇志的写操作，达到不阻塞主线程的⽬的。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/r4vd58.png"></p><ul><li>同步⽇志，主线程要等到⽇志写磁盘完成之后，才能继续向下执⾏。</li><li>异步⽇志，主线程写⽇志只是将⽇志消息放⼊⼀个队列，之后就继续向下执⾏，这个过程是在内存层 ⾯完成的。之后由专⻔的线程从队列中获取⽇志数据写⼊磁盘，所以不阻塞主线程。主线程（核⼼业 务代码）执⾏效率很⾼。</li></ul><h2 id="2-logback-⽇志框架配置"><a href="#2-logback-⽇志框架配置" class="headerlink" title="2.logback ⽇志框架配置"></a>2.logback ⽇志框架配置</h2><p>logback 既可以通过 application 配置⽂件进⾏⽇志的配置，⼜可以通过 logback-spring.xml 进⾏⽇志的配 置。通常情况下，使⽤全局配置⽂件 application.yml 或 properties 进⾏配置就⾜够了，如果您的⽇志输出 需求特别复杂⽽且需求⽐较个性化，可以考虑使⽤ logback-spring.xml 的配置⽅式。</p><h3 id="⼀、application-配置⽂件实现⽇志配置"><a href="#⼀、application-配置⽂件实现⽇志配置" class="headerlink" title="⼀、application 配置⽂件实现⽇志配置"></a>⼀、application 配置⽂件实现⽇志配置</h3><p>我们可以在 applicaition.properties(yml) ⽂件中进⾏⽇志的配置</p><pre class="line-numbers language-none"><code class="language-none">logging: level:   root: info   top.syhan.boot.log.controller: debug file:   path: &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;logs   name:  &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;logs&#x2F;boot.log   max-size: 10MB   max-history: 10 pattern:   console: &#39;%red(%d&#123;yyyy-MM-dd HH:mm:ss&#125;) %green([%thread])%highlight(%-5level) %boldMagenta(%logger&#123;10&#125;) - %cyan(%msg%n)&#39;   file: &#39;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger :%msg%n&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>logging.level.root=info 指定整个系统的默认⽇志级别是 info，⽇志级别统⼀化。</li><li>logging.level.com.zimug.boot.launch.controller=debug,指定某个特定的 package 的⽇志级别是 debug，⽇志级别个性化。优先级⻆度，个性配置⼤于统⼀配置。</li><li>logging.file.path 将⽇志输出到指定⽬录，如果不指定 logging.file.name，⽇志⽂件的默认名称是 spring.log。配置了 logging.file.name 之后，logging.file.path 配置失效。</li><li>⽆论何种设置，Spring Boot 都会⾃动按天分割⽇志⽂件，也就是说每天都会⾃动⽣成⼀个新的 log ⽂ 件，⽽之前的会⾃动打成 GZ 压缩包。# ⽇志⽂件⼤⼩</li><li>可以设置 logging.file.max-size=10MB 分割的每个⽇志的⽂件最⼤容量，超过这个 size 之后⽇志继续分隔。</li><li>可以设置保留的⽇志时间 logging.file.max-history=10，以天为单位。</li><li>logging.pattern.file 输出到⽂件中的⽇志的格式。</li><li>logging.pattern.console 控制台输出⽇志的格式，为了在控制台调试时候显示效果更清晰，为⽇志增 加了颜⾊。red、green 等等。</li></ul><p><strong>⽇志格式占位符</strong></p><p>配合这张图，看⼀下占位符和 logging.pattern.console 格式配置之间的关系</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/aGV75l.png"></p><ul><li>%d{HH:mm:ss.SSS}：⽇志输出时间（red）</li><li>%thread：输出⽇志的进程名字，这在 Web 应⽤以及异步任务处理中很有⽤ （green）</li><li>%-5level：⽇志级别，并且使⽤ 5 个字符靠左对⻬ （highlight ⾼亮蓝⾊）</li><li>%logger：⽇志输出类的名字 （boldMagenta 粗体洋红⾊）</li><li>%msg：⽇志消息 （cyan 蓝绿⾊）</li><li>%n：平台的换⾏符</li></ul><h3 id="⼆、使⽤-logback-spring-xml-实现⽇志配置"><a href="#⼆、使⽤-logback-spring-xml-实现⽇志配置" class="headerlink" title="⼆、使⽤ logback-spring.xml 实现⽇志配置"></a>⼆、使⽤ logback-spring.xml 实现⽇志配置</h3><h4 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h4><p>⼀般情况下，使⽤全局配置⽂件 application.yml 或 properties 进⾏配置就⾜够了，如果你的⽇志输出需求 特别复杂，可以考虑使⽤ logback-spring.xml 的配置⽅式。</p><p><strong>spring boot ⽤⾃带的 logback 打印⽇志，多环境打印：</strong></p><ol><li>⽣产环境输出到控制台和⽂件,⼀天⼀个⽂件,保留 30 天。</li><li>开发环境输出到控制台和打印 sql(mybatis)输出，⽣产环境不打印这个信息。</li><li>测试环境只输出到控制台。不输出到⽂件。</li></ol><blockquote><p>打印 Mybatis SQL，只需要把使⽤到 Mybatis 的 package 的⽇志级别调整为 DEBUG，就可以将 SQL 打印出来。</p></blockquote><p><strong>前提：</strong>项⽬已经⽀持 application.yml 的 profile 多环境配置</p><h4 id="2-2-需求实现"><a href="#2-2-需求实现" class="headerlink" title="2.2 需求实现"></a>2.2 需求实现</h4><p>因为 logback 是 spring boot 的默认⽇志框架，所以不需要引⼊ maven 依赖，直接上 logback-spring.xml 放 在 resources 下⾯。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引⼊默认的⼀些设置--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--web信息--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--写⼊⽇志到控制台的appender,⽤默认的,但是要去掉charset,否则windows下tomcat下乱码--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--定义⽇志⽂件的存储地址 勿在 LogBack 的配置中使⽤相对路径--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_PATH<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/Users/syhan/Desktop/logs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--写⼊⽇志到⽂件的appender--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--⽇志⽂件输出的⽂件名,每天⼀个⽂件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">></span></span>$&#123;LOG_PATH&#125;.%d&#123;yyyy-MM-dd&#125;.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--⽇志⽂件保留天数--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125;- %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--⽇志⽂件最⼤的⼤⼩--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxFileSize</span><span class="token punctuation">></span></span>10MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxFileSize</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--异步写⽇志到⽂件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asyncFileAppender<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--⽣产环境:打印控制台和输出到⽂件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asyncFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--开发环境:打印控制台--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 打印sql --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.syhan.boot.log<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--测试环境:打印控制台--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异步⽇志配置：</p><ul><li>异步⽇志 queueSize 默认值 256，异步⽇志队列的容量。</li><li>discardingThreshold：当异步⽇志队列的剩余容量⼩于这个阈值，会丢弃 TRACE, DEBUG or INFO 级别的⽇志。如果不希望丢弃⽇志（即全量保存），那可以设置为 0。但是当队列占满后，⾮阻塞的 异步⽇志会变成阻塞的同步⽇志。所以在⾼并发低延迟要求的系统⾥⾯针对不重要的⽇志可以设置 discardingThreshold 丢弃策略，值⼤于 0。</li></ul><h4 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h4><p>上⾯配置完成之后，可以使⽤如下代码测试⼀下，是否满⾜了 2.1 节中提出的需求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTestController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogTestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testlog"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Trace ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Debug ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Info ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Warn ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error ⽇志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-log4j2-⽇志框架配置"><a href="#3-log4j2-⽇志框架配置" class="headerlink" title="3.log4j2 ⽇志框架配置"></a>3.log4j2 ⽇志框架配置</h2><h3 id="⼀、引⼊-maven-依赖"><a href="#⼀、引⼊-maven-依赖" class="headerlink" title="⼀、引⼊ maven 依赖"></a>⼀、引⼊ maven 依赖</h3><p>Spring Boot 默认使⽤ LogBack，但是我们没有看到显示依赖的 jar 包，其实是因为所在的 jar 包 springboot-starter-logging 都是作为 spring-boot-starter-web 或者 spring-boot-starter 依赖的⼀部分。 如果这⾥要使⽤ Log4j2，需要从 spring-boot-starter-web 中去掉 spring-boot-starter-logging 依赖， 同时显示声明使⽤ Log4j2 的依赖 jar 包，具体如下:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、添加配置⽂件-log4j2-spring-xml"><a href="#⼆、添加配置⽂件-log4j2-spring-xml" class="headerlink" title="⼆、添加配置⽂件 log4j2-spring.xml"></a>⼆、添加配置⽂件 log4j2-spring.xml</h3><p>在 resources ⽬录下新建⼀个 log4j2-spring.xml ⽂件，放在 src/main/resources ⽬录下即可被 Spring Boot 应⽤识别。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--⽇志输出位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/Users/apple/Desktop/logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 将⽇志输出到控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--设置⽇志格式及颜⾊--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%style&#123;%d&#125;&#123;bright,green&#125;][%highlight&#123;%p&#125;][%style&#123;%t&#125;&#123;bright,blue&#125;][%style&#123;%C&#125;&#123;bright,yellow&#125;]:%msg%n%style&#123;%throwable&#125;&#123;red&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">disableAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">noConsoleNoAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 将⽇志输出到⽂件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE-APPENDER<span class="token punctuation">"</span></span>                 <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/log4j2-demo.log<span class="token punctuation">"</span></span>                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/log4j2-demo-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--设置⽇志格式--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%d][%p][%t][%C] %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PatternLayout</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 设置⽇志⽂件切分参数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--设置最⼤存档数--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 根⽇志设置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE-APPENDER<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spring⽇志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- mybatis⽇志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatis<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>两个 Appender，⼀个叫做 CONSOLE ⽤于输出⽇志到控制台，⼀个叫做 FILE-APPENDER 输出⽇志到⽂件</p></li><li><p>PatternLayout ⽤于指定输出⽇志的格式，[%d] [%p] [%t] [%C] %m %n 这些占位符将结合下⽂测试 结果为⼤家介绍</p></li><li><p>Policies ⽤于指定⽂件切分参数</p><ul><li>TimeBasedTriggeringPolicy 默认的 size 是 1，结合 filePattern 定义%d{yyyy-MM-dd}，则每天 ⽣成⼀个⽂件（最⼩的时间切分粒度是⼩时）</li><li><code>&lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</code>当⽂件⼤⼩到 100MB 的时候，切分⼀个新的⽇ 志⽂件</li></ul></li><li><p><code>&lt;DefaultRolloverStrategy max=&quot;20&quot;/&gt;</code>表示⽂件最⼤的存档数量，多余的将被删除</p></li></ul><h3 id="三、⾃定义配置⽂件"><a href="#三、⾃定义配置⽂件" class="headerlink" title="三、⾃定义配置⽂件"></a>三、⾃定义配置⽂件</h3><p>但是我们通常会有这样⼀个需求，就是不同的环境使⽤不同的配置，⽐如：我们需要三个 log4j2 xml ⽂件：</p><ul><li>log4j2-dev.xml 开发环境⽇志配置</li><li>log4j2-prod.xml ⽣产环境⽇志配置</li><li>log4j2-test.xml 测试环境⽇志配置</li></ul><p>但是 Spring Boot 并不知道 log4j2-.xml 这些配置⽂件是⼲什么的，所以需要通过在 application.yml ⽂件中显示声明才⾏。</p><p>举例：在 application-dev.yml ⾥⾯使⽤ log4j2-dev.xml 配置⽂件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>log4j2<span class="token punctuation">-</span>dev.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以此类推，在 application-prod.yml ⾥⾯使⽤ log4j2-prod.xml 配置⽂件，在 application-test.yml ⾥⾯使 ⽤ log4j2-test.xml 配置⽂件。</p><p>说⼀下占位符</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%style&#123;%d&#125;&#123;bright,green&#125;][%highlight&#123;%p&#125;][%style&#123;%t&#125;&#123;bright,blue&#125;][%style&#123;%C&#125;&#123;bright,yellow&#125;]:%msg%n%style&#123;%throwable&#125;&#123;red&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">disableAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">noConsoleNoAnsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>%d ： date 时间</li><li>%p ： ⽇志级别</li><li>%t ： thread 线程名称</li><li>%C： class 类⽂件名称</li><li>%msg：⽇志信息</li><li>%n 换⾏</li><li><code>%style&#123;%throwable&#125;&#123;red&#125;</code> 加样式，异常信息红⾊显示</li></ul><h2 id="4-拦截器实现统⼀访问⽇志"><a href="#4-拦截器实现统⼀访问⽇志" class="headerlink" title="4.拦截器实现统⼀访问⽇志"></a>4.拦截器实现统⼀访问⽇志</h2><h3 id="⼀、需求"><a href="#⼀、需求" class="headerlink" title="⼀、需求"></a>⼀、需求</h3><p>我们本节要实现的需求</p><ul><li>针对当前系统的每⼀次接⼝访问，要记录是什么⼈访问的（⽤户名）、什么时间访问的、访问耗时多 ⻓时间、使⽤什么 HTTP method ⽅法访问的、访问结果如何等。可以称为审计⽇志。</li><li>将访问记录审计⽇志，输出到⼀个单独的⽇志⽂件 access.log</li></ul><h3 id="⼆、定义访问⽇志内容记录实体类"><a href="#⼆、定义访问⽇志内容记录实体类" class="headerlink" title="⼆、定义访问⽇志内容记录实体类"></a>⼆、定义访问⽇志内容记录实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FormatUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 访问⽇志内容记录实体类* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessLog</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 访问者⽤户名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求路径     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uri<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求消耗时⻓     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> duration<span class="token punctuation">;</span>    <span class="token comment">/**     * http ⽅法：GET、POST等     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> httpMethod<span class="token punctuation">;</span>    <span class="token comment">/**     * http 请求响应状态码     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> httpStatus<span class="token punctuation">;</span>    <span class="token comment">/**     * 访问者ip     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>    <span class="token comment">/**     * 此条记录的创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"&#123;"</span> <span class="token operator">+</span> <span class="token string">"username="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"uri="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uri <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"duration="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>duration <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"httpMethod="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpMethod <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"httpStatus="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpStatus <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"ip="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"createTime="</span> <span class="token operator">+</span> <span class="token class-name">FormatUtils</span><span class="token punctuation">.</span><span class="token function">forTime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>createTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、⾃定义⽇志拦截器"><a href="#三、⾃定义⽇志拦截器" class="headerlink" title="三、⾃定义⽇志拦截器"></a>三、⾃定义⽇志拦截器</h3><p>通过⾃定义拦截器的⽅式，记录审计⽇志。</p><ul><li>拦截器的 preHandle ⽅法，可以⽤于拦截请求处理开始。⽤于记录请求开始时间等信息保存到 Http Request，⽤于后续计算请求时⻓。</li><li>拦截器的 postHandle ⽅法，可以⽤于拦截请求处理完成。可以从 Request 对象获取开始时间，计算本次请求总的处理时⻓等信息。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">AccessLog</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">AddressIpUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: ⾃定义⽇志拦截器* @author: syhan* @date: 2022-04-04**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessLogInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 进⼊SpringMVC的Controller之前开始记录⽇志实体     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建⽇志实体</span>        <span class="token class-name">AccessLog</span> accessLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置IP地址</span>        accessLog<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//accessLog.setIp(AddressIpUtils.getIpAddress(request));</span>        <span class="token comment">//设置请求⽅法,GET,POST...</span>        accessLog<span class="token punctuation">.</span><span class="token function">setHttpMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求路径(端点)</span>        accessLog<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求开始时间</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"sendTime"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求实体到request内，⽅便afterCompletion⽅法调⽤</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"accessLog"</span><span class="token punctuation">,</span> accessLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//获取本次请求⽇志实体</span>      <span class="token class-name">AccessLog</span> accessLog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AccessLog</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"accessLog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取请求错误码，根据需求存⼊数据库，这⾥不保存</span>      <span class="token keyword">int</span> status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      accessLog<span class="token punctuation">.</span><span class="token function">setHttpStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置访问者</span>      accessLog<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//当前时间</span>      <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//请求开始时间</span>      <span class="token keyword">long</span> sendTime <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"sendTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//设置请求时间差</span>      accessLog<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentTime <span class="token operator">-</span> sendTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      accessLog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//打印⽇志</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>accessLog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterCompletion... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LoggerFactory.getLogger(“ACCESS-LOG”)获取⼀个⽇志配置中的 Logger 的名字，⽤于打印⽇志输 出，持久化到⽇志⽂件⾥。</p><h3 id="四、拦截器注册"><a href="#四、拦截器注册" class="headerlink" title="四、拦截器注册"></a>四、拦截器注册</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置排除路径，spring boot 2.*，注意排除掉静态资源的路径，不然静态资源⽆法访问</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> excludePath <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/static"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccessLogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、-“ACCESS-LOG”的⽇志-Logger-定义"><a href="#五、-“ACCESS-LOG”的⽇志-Logger-定义" class="headerlink" title="五、 “ACCESS-LOG”的⽇志 Logger 定义"></a>五、 “ACCESS-LOG”的⽇志 Logger 定义</h3><p>配置参考以 Log4J2 配置为例</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mHmvkV.png"></p><ul><li>LoggerFactory.getLogger(“ACCESS-LOG”) 代码去配置⽂件⾥⾯找⼀个 name 为 ACCESS-LOG 的 Logger 配置。</li><li>该 Logger 是⼀个 AsyncLogger，指向的输出⽬标是 ACCESS-APPENDER。</li><li>ACCESS-APPENDER 是⼀个⽇志⽂件输出配置，⽇志⽂件是 access-log.log。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--⽇志输出位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/Users/apple/Desktop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 将⽇志输出到⽂件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCESS-APPENDER<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/access.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_HOME&#125;/access-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--设置⽇志格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%d][%p][%t][%C] %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PatternLayout</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 设置⽇志⽂件切分参数 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--设置最⼤存档数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncLogger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCESS-LOG<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCESS-APPENDER<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncLogger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一全局异常处理</title>
      <link href="/2022/06/20/tong-yi-quan-ju-yi-chang-chu-li/"/>
      <url>/2022/06/20/tong-yi-quan-ju-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="统⼀全局异常处理"><a href="#统⼀全局异常处理" class="headerlink" title="统⼀全局异常处理"></a>统⼀全局异常处理</h1><h2 id="1-设计⼀个优秀的异常处理机制"><a href="#1-设计⼀个优秀的异常处理机制" class="headerlink" title="1.设计⼀个优秀的异常处理机制"></a>1.设计⼀个优秀的异常处理机制</h2><h3 id="⼀、异常处理的乱象例举"><a href="#⼀、异常处理的乱象例举" class="headerlink" title="⼀、异常处理的乱象例举"></a>⼀、异常处理的乱象例举</h3><h4 id="乱象⼀：捕获异常后只输出到控制台"><a href="#乱象⼀：捕获异常后只输出到控制台" class="headerlink" title="乱象⼀：捕获异常后只输出到控制台"></a><strong>乱象⼀：捕获异常后只输出到控制台</strong></h4><p>前端 js-ajax 代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/user/add"</span><span class="token punctuation">,</span>  <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端业务代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">XyyyyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：</p><ol><li>后端直接将异常捕获，⽽且只做了⽇志打印。⽤户体验⾮常差，⼀旦后台出错，⽤户没有任何感知， ⻚⾯⽆状态。</li><li>后端只给出前端异常结果，没有给出异常的原因的描述。⽤户不知道是⾃⼰操作输⼊错误，还是系统 bug。⽤户⽆法判断⾃⼰需要等⼀下再操作？还是继续下⼀步？</li><li>如果没有⼈去经常关注服务端⽇志，不会有⼈发现系统出现异常。</li></ol><h4 id="乱象⼆：混乱的返回⽅式"><a href="#乱象⼆：混乱的返回⽅式" class="headerlink" title="乱象⼆：混乱的返回⽅式"></a>乱象⼆：混乱的返回⽅式</h4><p>前端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"/goods/add"</span><span class="token punctuation">,</span>    dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>    success<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    error<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goods/add"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// do something</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    reutrn map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：</p><ol><li>每个⼈返回的数据有每个⼈⾃⼰的规范，你叫 flag 他叫 isOK，你的成功 code 是 0，它的成功 code 是 0000。这样导致后端书写了⼤量的异常返回逻辑代码，前端也随之每⼀个请求⼀套异常处理逻辑。 很多重复代码。</li><li>如果是前端后端⼀个⼈开发还勉强能⽤，如果前后端分离，这就是系统灾难。</li></ol><h3 id="⼆、该如何设计异常处理"><a href="#⼆、该如何设计异常处理" class="headerlink" title="⼆、该如何设计异常处理"></a>⼆、该如何设计异常处理</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/nlKLCJ.png"></p><h4 id="⾯向相关⽅友好"><a href="#⾯向相关⽅友好" class="headerlink" title="⾯向相关⽅友好"></a>⾯向相关⽅友好</h4><ol><li>后端开发⼈员职责单⼀，只需要将异常捕获并转换为⾃定义异常⼀直对外抛出。不需要去想⻚⾯跳转 404，以及异常响应的数据结构的设计。</li><li>⾯向前端⼈员友好，后端返回给前端的数据应该有统⼀的数据结构，统⼀的规范。不能⼀个⼈⼀个响 应的数据结构。⽽在此过程中不需要后端开发⼈员做更多的⼯作，交给全局异常处理器去处理“异 常”到“响应数据结构”的转换。</li><li>⾯向⽤户友好，⽤户能够清楚的知道异常产⽣的原因。这就要求⾃定义异常，全局统⼀处理，ajax 接 ⼝请求响应统⼀的异常数据结构，⻚⾯模板请求统⼀跳转到 404 ⻚⾯。</li><li>⾯向运维友好，将异常信息合理规范的持久化，以⽇志的形式存储起来，以便查询。</li></ol><p><strong>为什么要将系统运⾏时异常捕获，转换为⾃定义异常抛出？</strong></p><p>因为⽤户不认识 ConnectionTimeOutException 类似这种异常是什么东⻄，但是转换为⾃定义异常就要求 程序员对运⾏时异常进⾏⼀个翻译，⽐如：⾃定义异常⾥⾯应该有 message 字段，后端程序员应该明确 的在 message 字段⾥⾯⽤⾯向⽤户的友好语⾔，说明服务端发⽣了什么。</p><h3 id="三、开发规范"><a href="#三、开发规范" class="headerlink" title="三、开发规范"></a>三、开发规范</h3><ol><li>Controller、Service、DAO 层拦截异常转换为⾃定义异常，不允许将异常私⾃截留。必须对外抛出。</li><li>统⼀数据响应代码，使⽤ http 状态码，不要⾃定义。⾃定义不⽅便记忆，HTTP 状态码程序员都知道。但是太多了程序员也记不住，在项⽬组规定范围内使⽤⼏个就可以。⽐如：200 请求成功，400 ⽤户输⼊错误导致的异常，500 系统内部异常，999 未知异常。</li><li>⾃定义异常⾥⾯有 message 属性，⽤对⽤户友好的语⾔描述异常的发⽣情况，并赋值给 message。</li><li>不允许对⽗类 Exception 统⼀ catch，要分⼩类 catch，这样能够清楚地将异常转换为⾃定义异常传递给前端。</li></ol><h2 id="2-⾃定义异常和相关数据结构"><a href="#2-⾃定义异常和相关数据结构" class="headerlink" title="2.⾃定义异常和相关数据结构"></a>2.⾃定义异常和相关数据结构</h2><h3 id="⼀、该如何设计数据结构"><a href="#⼀、该如何设计数据结构" class="headerlink" title="⼀、该如何设计数据结构"></a>⼀、该如何设计数据结构</h3><ol><li>CustomException ⾃定义异常。核⼼要素包含异常错误编码（400,500）、异常错误信息 message。</li><li>ExceptionTypeEnum 枚举异常分类，将异常分类固化下来，防⽌开发⼈员思维发散。</li><li>AjaxResponse ⽤于响应 HTTP 请求的统⼀数据结构。</li></ol><h3 id="⼆、枚举异常的类型"><a href="#⼆、枚举异常的类型" class="headerlink" title="⼆、枚举异常的类型"></a>⼆、枚举异常的类型</h3><p>为了防⽌开发⼈员⼤脑发散，每个开发⼈员都不断的发明⾃⼰的异常类型，我们需要规定好异常的类型 (枚举)。⽐如：系统异常、⽤户（输⼊）操作导致的异常、其他异常等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums</span><span class="token punctuation">;</span><span class="token comment">/*** @description: 异常类型枚举* @author: syhan* @date: 2022-04-11**/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CustomExceptionType</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 客户端异常     */</span>    <span class="token function">USER_INPUT_ERROR</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"您输⼊的数据错误或您没有权限访问资源！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 服务器异常     */</span>    <span class="token function">SYSTEM_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"系统出现异常，请您稍后再试或联系管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 未知异常     */</span>    <span class="token function">OTHER_ERROR</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">"系统出现未知异常，请联系管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CustomExceptionType</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 异常类型状态码     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment">/**     * 异常类型中⽂描述     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最好不要超过 5 个，否则开发⼈员将会记不住，也不愿意去记。</li><li>这⾥的 code 表示异常类型的唯⼀编码，为了⽅便⼤家记忆，就使⽤ Http 状态码 400、500。</li><li>这⾥的 desc 是通⽤的异常描述，在创建⾃定义异常的时候，为了给⽤户更友好的回复，通常异常信 息描述应该更具体更友好。</li></ul><h3 id="三、⾃定义异常"><a href="#三、⾃定义异常" class="headerlink" title="三、⾃定义异常"></a>三、⾃定义异常</h3><ul><li>⾃定义异常有两个核⼼内容，⼀个是 code。使⽤ CustomExceptionType 来限定范围。</li><li>另外⼀个是 message，这个 message 信息是要最后返回给前端的，所以需要⽤友好的提示来表达异常发⽣的原因或内容</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: ⾃定义异常* @author: syhan* @date: 2022-04-11**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 异常错误编码     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment">/**     * 异常信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span> customExceptionType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> customExceptionType<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> customExceptionType<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span> customExceptionType<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> customExceptionType<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、请求接⼝统⼀响应数据结构"><a href="#四、请求接⼝统⼀响应数据结构" class="headerlink" title="四、请求接⼝统⼀响应数据结构"></a>四、请求接⼝统⼀响应数据结构</h3><p>为了解决不同的开发⼈员使⽤不同的结构来响应给前端，导致规范不统⼀，开发混乱的问题。我们使⽤ 如下代码定义统⼀数据响应结构。</p><ul><li>isok 表示该请求是否处理成功（即是否发⽣异常）。true 表示请求处理成功，false 表示处理失败。</li><li>code 对响应结果进⼀步细化，200 表示请求成功，400 表示⽤户操作导致的异常，500 表示系统异 常，999 表示其他异常。与 CustomExceptionType 枚举⼀致。</li><li>message：友好的提示信息，或者请求结果提示信息。如果请求成功这个信息通常没什么⽤，如果 请求失败，该信息需要展示给⽤户。</li><li>data：通常⽤于查询数据请求，成功之后将查询数据响应给前端。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CustomException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 请求接⼝统⼀响应数据结构* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxResponse</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 请求响应状态码     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求结果描述信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求结果数据（通常⽤于查询操作）     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求出现异常时的响应数据封装     *     * @param e e     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> resultBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求出现异常时的响应数据封装       * @param customExceptionType customExceptionType     * @param errorMessage       errorMessage     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span> customExceptionType<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMessage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> resultBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>customExceptionType<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultBean<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求成功的响应，不带查询数据（⽤于删除、修改、新增接⼝）     *     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"请求响应成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求成功的响应，带有查询数据（⽤于数据查询接⼝）     *     * @param obj obj     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"请求响应成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求成功的响应，带有查询数据（⽤于数据查询接⼝）     *     * @param obj     obj     * @param message message     * @return AjaxResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AjaxResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AjaxResponse</span> ajaxResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        ajaxResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ajaxResponse<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于不同的场景，提供了四种构建 AjaxResponse 的⽅法。</p><ul><li>当请求成功的情况下，可以使⽤ AjaxResponse.success()构建返回结果给前端。</li><li>当查询请求等需要返回业务数据，请求成功的情况下，可以使⽤ AjaxResponse.success(data)构建 返回结果给前端。携带结果数据。</li><li>当请求处理过程中发⽣异常，需要将异常转换为 CustomException ，然后在控制层使⽤ AjaxResponse error(CustomException)构建返回结果给前端。</li><li>在某些情况下，没有任何异常产⽣，我们判断某些条件也认为请求失败。这种使⽤ AjaxResponse error(customExceptionType,errorMessage)构建响应结果。</li></ul><h3 id="五、使⽤示例如下："><a href="#五、使⽤示例如下：" class="headerlink" title="五、使⽤示例如下："></a>五、使⽤示例如下：</h3><p>例如：更新操作，Controller ⽆需返回额外的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询接⼝，Controller 需返回结果数据(data 可以是任何类型数据)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-通⽤全局异常处理逻辑"><a href="#3-通⽤全局异常处理逻辑" class="headerlink" title="3.通⽤全局异常处理逻辑"></a>3.通⽤全局异常处理逻辑</h2><h3 id="⼀、通⽤异常处理逻辑"><a href="#⼀、通⽤异常处理逻辑" class="headerlink" title="⼀、通⽤异常处理逻辑"></a>⼀、通⽤异常处理逻辑</h3><p>程序员的异常处理逻辑要⼗分的单⼀：⽆论在 Controller 层、Service 层还是什么其他位置，程序员只负 责⼀件事：<strong>那就是捕获异常，并将异常转换为⾃定义异常。使⽤⽤户友好的信息去填充。</strong></p><p>CustomException 的 message,并将 CustomException 抛出去。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>consts<span class="token punctuation">.</span></span><span class="token class-name">MsgConsts</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CustomException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 通⽤异常处理逻辑* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 服务层，模拟系统异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">systemBizError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.cj.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span>                    <span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">,</span>"在XXX业务，<span class="token function">myBiz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>⽅法内，出现<span class="token class-name">ClassNotFoundException</span>，请将该信息告知管理员"<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 服务层，模拟⽤户输⼊数据导致的校验异常     *     * @param input ⽤户输⼊     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userBizError</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//模拟业务校验失败逻辑</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> <span class="token class-name">MsgConsts</span><span class="token punctuation">.</span>INPUT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、全局异常处理器"><a href="#⼆、全局异常处理器" class="headerlink" title="⼆、全局异常处理器"></a>⼆、全局异常处理器</h3><p>通过团队内的编码规范的要求，我们已经知道了：不允许程序员截留处理 Exception，必须把异常转换为 ⾃定义异常 CustomException 全都抛出去。那么程序员把异常跑出去之后由谁来处理？那就是 ControllerAdvice。 ControllerAdvice 注解的作⽤就是监听所有的 Controller，⼀旦 Controller 抛出 CustomException，就会 在@ExceptionHandler(CustomException.class)注解的⽅法⾥⾯对该异常进⾏处理。处理⽅法很简单就是<strong>使⽤ AjaxResponse.error(e)包装为通⽤的接⼝数据结构返回给前端</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">CustomExceptionType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CustomException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">AjaxResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">BindException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">FieldError</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 全局异常处理器* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebExceptionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 处理程序员主动转换的⾃定义异常     *     * @param e 异常     * @return AjaxResponse     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">customerException</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//400异常不需要持久化，将异常信息以友好的⽅式告知⽤户就可以</span>            <span class="token comment">//将500异常信息持久化处理，⽅便运维⼈员处理</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 处理程序员在程序中未能捕获（遗漏的）异常     *     * @param e 异常     * @return AjaxResponse     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//TODO 将异常信息持久化处理，⽅便运维⼈员处理</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>OTHER_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> fieldError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BindException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">BindException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> fieldError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleIllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试⼀下"><a href="#三、测试⼀下" class="headerlink" title="三、测试⼀下"></a>三、测试⼀下</h3><p>随便找⼀个 API，注⼊ ExceptionService 访问测试⼀下</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/ymSGh3.png"></p><h3 id="四、业务状态与-HTTP-协议状态⼀致"><a href="#四、业务状态与-HTTP-协议状态⼀致" class="headerlink" title="四、业务状态与 HTTP 协议状态⼀致"></a>四、业务状态与 HTTP 协议状态⼀致</h3><p>不知道⼤家有没有注意到⼀个问题(看上图)？这个问题就是我们的 AjaxResponse 的 code 是 400，但是真正的 HTTP 协议状态码是 200。</p><ul><li>AjaxResponse 的 code 是 400 代表的是业务状态，也就是说⽤户的请求业务失败了</li><li>但是 HTTP 请求是成功的，也就是说数据是正常返回的。</li></ul><p>在很多的公司开发 RESTful 服务时，要求 HTTP 状态码能够体现业务的最终执⾏状态，所以说：我们有必要让业务状态与 HTTP 协议 Response 状态码⼀致。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalResponseAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span> converterType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//return returnType.hasMethodAnnotation(ResponseBody.class);</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span> <span class="token class-name">Class</span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果响应结果是JSON数据类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>selectedContentType<span class="token punctuation">.</span><span class="token function">equalsTypeAndSubtype</span><span class="token punctuation">(</span>                <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//为HTTP响应结果设置状态码，状态码就是AjaxResponse的code，⼆者达到统⼀</span>                response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>                        <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AjaxResponse</span><span class="token punctuation">)</span> body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> body<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现 ResponseBodyAdvice 接⼝的作⽤是：在将数据返回给⽤户之前，做最后⼀步的处理。也就是说，ResponseBodyAdvice 的处理过程在全局异常处理的后⾯。</li></ul><h3 id="五、进⼀步优化"><a href="#五、进⼀步优化" class="headerlink" title="五、进⼀步优化"></a>五、进⼀步优化</h3><p>我们已经知道了，ResponseBodyAdvice 接⼝的作⽤是：在将数据返回给⽤户之前，做最后⼀步的处理。将上⽂的 GlobalResponseAdvice 中 beforeBodyWrite ⽅法代码优化如下。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/DRqfmu.png"></p><ul><li>如果 Controller 或全局异常处理响应的结果 body 是 AjaxResponse，就直接 return 给前端。</li><li>如果 Controller 或全局异常处理响应的结果 body 不是 AjaxResponse，就将 body 封装为 AjaxResponse 之后再 return 给前端。</li></ul><p>我们之前的代码是这样写的，⽐如：某个 controller ⽅法返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>objList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在就可以这样写了，因为在 GlobalResponseAdvice ⾥⾯会统⼀再封装为 AjaxResponse。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> objList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>advice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">AjaxResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyAdvice</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: 全局业务状态通知* @author: syhan* @date: 2022-04-11**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalResponseAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">Class</span> aClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">,</span> <span class="token class-name">Class</span> aClass<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> serverHttpRequest<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> serverHttpResponse<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//如果响应结果是JSON数据类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mediaType<span class="token punctuation">.</span><span class="token function">equalsTypeAndSubtype</span><span class="token punctuation">(</span>                <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">AjaxResponse</span> ajaxResponse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//999 不是标准的HTTP状态码，特殊处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ajaxResponse<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">999</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    serverHttpResponse<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>                            ajaxResponse<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> body<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                serverHttpResponse<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-服务端数据校验异常处理逻辑"><a href="#4-服务端数据校验异常处理逻辑" class="headerlink" title="4.服务端数据校验异常处理逻辑"></a>4.服务端数据校验异常处理逻辑</h2><h3 id="⼀、异常校验的规范及常⽤注解"><a href="#⼀、异常校验的规范及常⽤注解" class="headerlink" title="⼀、异常校验的规范及常⽤注解"></a>⼀、异常校验的规范及常⽤注解</h3><p>在 Web 开发时，对于请求参数，⼀般上都需要进⾏参数合法性校验的，原先的写法是⼀个个字段⼀个个 去判断，这种⽅式太不通⽤了，Java 的 JSR 303: Bean Validation 规范就是解决这个问题的。 JSR 303 只是个规范，并没有具体的实现，⽬前通常是⽤ hibernate-validator 进⾏统⼀参数校验。</p><p>JSR303 定义的校验类型</p><table><thead><tr><th>Constraint</th><th>详细信息</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为 false</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼤于等于指定的最⼩值</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼩于等于指定的最⼤值</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼤于等于指定的最⼩值</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是⼀个数字，其值必须⼩于等于指定的最⼤值</td></tr><tr><td>@Size(max, min)</td><td>被注释的元素的⼤⼩必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td>被注释的元素必须是⼀个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注释的元素必须是⼀个过去的⽇期</td></tr><tr><td>@Future</td><td>被注释的元素必须是⼀个将来的⽇期</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><p>Hibernate Validator 附加的 constraint</p><table><thead><tr><th>Constraint</th><th>详细信息</th></tr></thead><tbody><tr><td>@Email</td><td>被注释的元素必须是电⼦邮箱地址</td></tr><tr><td>@Length</td><td>被注释的字符串的⼤⼩必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串的必须⾮空</td></tr><tr><td>@Range</td><td>被注释的元素必须在合适的范围内</td></tr></tbody></table><p><strong>⽤法:把以上注解加在 ArticleVO 的属性字段上，然后在参数校验的⽅法上加@Valid 注解</strong> 如:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/vAYP87.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/mzxQtY.png"></p><p>当⽤户输⼊参数不符合注解给出的校验规则的时候，会抛出 BindException 或 MethodArgumentNotValidException。</p><h3 id="⼆、Assert-断⾔与-IllegalArgumentException"><a href="#⼆、Assert-断⾔与-IllegalArgumentException" class="headerlink" title="⼆、Assert 断⾔与 IllegalArgumentException"></a>⼆、Assert 断⾔与 IllegalArgumentException</h3><p>之前给⼤家讲通⽤异常处理的时候，⽤户输⼊异常判断是这样处理的。这种⽅法也是可以⽤的，但是我 们学了这么多的知识，可以优化⼀下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//服务层，模拟⽤户输⼊数据导致的校验异常</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userBizError</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//模拟业务校验失败逻辑</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span>                <span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span>                <span class="token string">"您输⼊的数据不符合业务逻辑，请确认后重新输⼊！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//…… 其他的业务</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更好的写法是下⾯这样的，使⽤ org.springframework.util.Assert 断⾔ input &gt;= 0，如果不满⾜条件就抛 出 IllegalArgumentException，参数不合法的异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//服务层，模拟⽤户输⼊数据导致的校验异常</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userBizError</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>input <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"您输⼊的数据不符合业务逻辑，请确认后重新输⼊！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//…… 其他的业务</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>org.springframework.util.Assert 断⾔提供了⼤量的断⾔⽅法，针对各种数据类型进⾏数据合法性校验， 使⽤它我们编写代码更⽅便。</p><h3 id="三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）"><a href="#三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）" class="headerlink" title="三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）"></a>三、友好的数据校验异常处理（⽤户输⼊异常的全局处理）</h3><p>我们已知当数据校验失败的时候，会抛出异常 BindException 或 MethodArgumentNotValidException。 所以我们对这两种异常做全局处理，防⽌程序员重复编码带来困扰。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BindException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">BindException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们已知使⽤ org.springframework.util.Assert 断⾔，如果不满⾜条件就抛出 IllegalArgumentException。可以使⽤下⾯的全局异常处理函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span><span class="token function">handleIllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>USER_INPUT_ERROR<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合分布式⽂件系统</title>
      <link href="/2022/05/01/zheng-he-fen-bu-shi-wen-jian-xi-tong/"/>
      <url>/2022/05/01/zheng-he-fen-bu-shi-wen-jian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="整合分布式⽂件系统"><a href="#整合分布式⽂件系统" class="headerlink" title="整合分布式⽂件系统"></a>整合分布式⽂件系统</h1><h2 id="1-⽂件本地上传与提供访问服务"><a href="#1-⽂件本地上传与提供访问服务" class="headerlink" title="1.⽂件本地上传与提供访问服务"></a>1.⽂件本地上传与提供访问服务</h2><p>在开始介绍分布式⽂件系统之前，先来看⼀下使⽤本机存储来存放⽂件资源。</p><p>⼆者的核⼼实现过程是⼀样的：</p><ul><li>上传⽂件，保存⽂件（本节是本地磁盘）</li><li>返回⽂件 HTTP 访问服务路径给前端，进⾏上传之后的效果展示</li></ul><h3 id="⼀、复习"><a href="#⼀、复习" class="headerlink" title="⼀、复习"></a>⼀、复习</h3><p>服务端接收上传的⽬的是提供⽂件的访问服务，那么对于 SpringBoot ⽽⾔，有哪些可以提供⽂件访问的静态资源⽬录呢？</p><ul><li>classpath:/META-INF/resources/</li><li>classpath:/static/</li><li>classpath:/public/</li><li>classpath:/resources/</li></ul><p>静态资源都在 classpath 下。那么就出现了问题：</p><ul><li>应⽤的⽂件资源不能和项⽬代码分开存储（你⻅过往 github 上传代码，还附带项⽬⽂件数据的么？）</li><li>项⽬打包困难，当上传的⽂件越来越多，项⽬的打包 jar 越来越⼤。</li><li>代码与⽂件数据不能分开存储，就意味着⽂件数据的备份将变得复杂</li></ul><h3 id="⼆、⽂件上传⽬录⾃定义配置"><a href="#⼆、⽂件上传⽬录⾃定义配置" class="headerlink" title="⼆、⽂件上传⽬录⾃定义配置"></a>⼆、⽂件上传⽬录⾃定义配置</h3><p>怎么解决上述问题?</p><p>别忘记了 spring boot 为我们提供了使⽤ spring.resources.static-locations<strong>配置⾃定义静态⽂件的位置</strong>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">web</span><span class="token punctuation">:</span><span class="token key atrule">upload-path</span><span class="token punctuation">:</span> /Users/apple/Desktop<span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">resources</span><span class="token punctuation">:</span>   static<span class="token punctuation">-</span><span class="token key atrule">locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/META<span class="token punctuation">-</span>INF/resources/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/resources/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/static/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/public/<span class="token punctuation">,</span>file<span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>web.upload<span class="token punctuation">-</span>path<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置 web.upload-path 为与项⽬代码分离的静态资源路径，即：⽂件上传保存根路径</p></li><li><p>配置 spring.resources.static-locations，除了带上 Spring Boot 默认的静态资源路径之外，加上 file:${web.upload-path}指向外部的⽂件资源上传路径。该路径下的静态资源可以直接对外提供 HTTP 访问服务。</p></li></ul><h3 id="三、⽂件上传的-Controller-实现"><a href="#三、⽂件上传的-Controller-实现" class="headerlink" title="三、⽂件上传的 Controller 实现"></a>三、⽂件上传的 Controller 实现</h3><p>详情看代码注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadController</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//绑定⽂件上传路径到uploadPath</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;web.upload-path&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uploadPath<span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> uploadFile<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 在 uploadPath ⽂件夹中通过⽇期对上传的⽂件归类保存</span>        <span class="token comment">// ⽐如：/2019/06/06/cf13891e-4b95-4000-81eb-b6d70ae44930.png</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> folder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>uploadPath <span class="token operator">+</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>folder<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            folder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>                <span class="token comment">// 对上传的⽂件重命名，避免⽂件重名</span>        <span class="token class-name">String</span> oldName <span class="token operator">=</span> uploadFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> oldName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>oldName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oldName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// ⽂件保存</span>        uploadFile<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> newName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 返回上传⽂件的访问路径</span>        <span class="token comment">//https://localhost:8888/2020/10/18/a9a05df4-6615-4bb5-b859-a3f9bf4bfae0.jpg</span>        <span class="token class-name">String</span> filePath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span>   <span class="token operator">+</span> format <span class="token operator">+</span> newName<span class="token punctuation">;</span>        <span class="token keyword">return</span> filePath<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试"><a href="#四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试" class="headerlink" title="四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试"></a>四、写⼀个模拟的⽂件上传⻚⾯，进⾏测试</h3><p>把该 upload.html ⽂件放到 classpath:public ⽬录下，对外提供访问。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请选择上传⽂件<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保存<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问测试、点击“选择⽂件”，之后保存</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_18-19-42.png" alt="测试结果"></p><p>⽂件被保存到服务端的 web.upload-path 指定的资源⽬录下，浏览器端响应返回⼀个⽂件 HTTP 访问路径。</p><p>使⽤该 HTTP 访问路径，在浏览器可以看到上传的图⽚。证明我们的⽂件已经成功上传到服务端。</p><h2 id="2-MinlO-简介与选型介绍"><a href="#2-MinlO-简介与选型介绍" class="headerlink" title="2. MinlO 简介与选型介绍"></a>2. MinlO 简介与选型介绍</h2><p>⽬前可⽤于⽂件存储的⽹络服务选择有很多，⽐如阿⾥云 OSS、七⽜云、腾讯云等等，但是收费都有点⼩贵。为了帮公司节约成本，之前⼀直是使⽤ fastDFS 作为⽂件服务器，准确的说是图⽚服务器。直到我发现了 MinIO，我决定放弃 FastDFS。下⾯我从对⽐的⻆度来说说我为什么果断的放弃了 fastDFS，转⽽使⽤ MinIO 作为图⽚存储服务器。</p><h3 id="⼀、为什么使⽤-MInIO-替换了-FastDFS"><a href="#⼀、为什么使⽤-MInIO-替换了-FastDFS" class="headerlink" title="⼀、为什么使⽤ MInIO 替换了 FastDFS"></a>⼀、为什么使⽤ MInIO 替换了 FastDFS</h3><p>MinIO 是⼀个基于 Apache License v2.0 开源协议的对象存储服务。它兼容亚⻢逊 S3 云存储服务接⼝，⾮常适合于存储⼤容量⾮结构化的数据，例如图⽚、视频、⽇志⽂件、备份数据和容器/虚拟机镜像等，⽽⼀个对象⽂件可以是任意⼤⼩，从⼏ kb 到最⼤ 5T 不等。</p><h4 id="理由⼀：安装部署-运维-复杂度"><a href="#理由⼀：安装部署-运维-复杂度" class="headerlink" title="理由⼀：安装部署(运维)复杂度"></a>理由⼀：安装部署(运维)复杂度</h4><p>如果要将⼀个 fastDFS 分布式服务部署完成，需要具备以下的知识：</p><ul><li><p>linux 基础的⽬录操作</p></li><li><p>常⽤的分布式主从原理</p></li><li><p>C 语⾔代码的编译</p></li><li><p>nginx 安装部署</p></li><li><p>nginx 插件的使⽤（防盗链）</p></li></ul><p>fastdfs 部署结构⽐较复杂。看了 MinIO 的分布式的部署<a href="https://docs.min.io/docs/distributed-minio-quickstart-guide.html">分布式 MinIO 快速⼊⻔</a>，放弃 fastdfs 的决⼼就会愈发明显。<br>fastdfs 的部署是零件的组装过程，需要你去理解 fastDFS 的架构设计，才能够正确的安装部署。MinIO 在 安装的过程是⿊盒的，你不⽤去深⼊关注它的架构，也不需要你进⾏零件组装，基本上可以做到开箱即 ⽤。普通的技术⼈员就能够参与后期运维。</p><h4 id="理由⼆：⽂档"><a href="#理由⼆：⽂档" class="headerlink" title="理由⼆：⽂档"></a>理由⼆：⽂档</h4><p>fastdfs 也有⼗年了，没有官⽅⽂档，所有的⽂档全是某某公司的⽹友总结的⽂档。从这点上看 fastdfs 真的是⼀败涂地，当然发明者：阿⾥的余庆⼤神在做这个项⽬的时候可能也没有考虑 到后来会有这么多⼈⽤。</p><h4 id="理由三：开源项⽬运营组织"><a href="#理由三：开源项⽬运营组织" class="headerlink" title="理由三：开源项⽬运营组织"></a>理由三：开源项⽬运营组织</h4><p>fastdfs 是阿⾥余庆做的⼀个个⼈项⽬，在⼀些互联⽹创业公司中有应⽤，没有官⽹，不活跃，⽬前已经很少做更新。 MinIO ⽬前是由 2014 年在硅⾕创⽴的公司 MinIO.Inc 运营的开源项⽬，社区论坛的活跃度⽬前也⾮常的不错。</p><h4 id="理由四：UI-界⾯"><a href="#理由四：UI-界⾯" class="headerlink" title="理由四：UI 界⾯"></a>理由四：UI 界⾯</h4><p>我们都知道 fastdfs 默认是不带 UI 界⾯的，⽽下⾯是 MinIO 的界⾯，这个界⾯不需要单独部署，和服务端⼀并安装，开箱即⽤。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-25-41.png" alt="图片描述"></p><h4 id="理由五：性能"><a href="#理由五：性能" class="headerlink" title="理由五：性能"></a>理由五：性能</h4><p>MinIO 号称是世界上速度最快的对象存储服务器。在标准硬件上，对象存储的读/写速度最⾼可以达到 183 GB/s 和 171 GB/s。关于 fastDFS 我曾经单线程测试写了 20 万个⽂件，总共 200G，⼤约⽤时 10 个⼩ 时。总体上是很难达到 MinIO“号称的”以 G 为单位的每秒读写速度。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-28-31.png" alt="图片描述"></p><h4 id="理由六：容器化⽀持"><a href="#理由六：容器化⽀持" class="headerlink" title="理由六：容器化⽀持"></a>理由六：容器化⽀持</h4><p>MinIO 提供了与 k8s、etcd、docker 等容器化技术深度集成⽅案，可以说就是为了云环境⽽⽣的。这点是 Fastdfs 不具备的。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-31-49.png" alt="图片描述"></p><h4 id="理由七：丰富的-SDK-⽀持"><a href="#理由七：丰富的-SDK-⽀持" class="headerlink" title="理由七：丰富的 SDK ⽀持"></a>理由七：丰富的 SDK ⽀持</h4><p>fastDFS ⽬前提供了 C 和 Java SDK ，以及 PHP 扩展 SDK。</p><p>下图是 MinIO 提供的 SDK ⽀持，MinIO ⼏乎提供了所有主流开发语⾔的 SDK 以及⽂档。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_19-54-56.png"></p><h4 id="理由⼋：AWS-S3-标准兼容"><a href="#理由⼋：AWS-S3-标准兼容" class="headerlink" title="理由⼋：AWS S3 标准兼容"></a>理由⼋：AWS S3 标准兼容</h4><p>Amazon 的 S3 API 是对象存储领域的事实标准。MinIO 是 S3 兼容性的事实上的标准，是第⼀个采⽤ API 和第⼀个添加对 S3 Select ⽀持的标准之⼀。包括微软 Azure 在内的 750 多家公司使⽤ MinIO 的 S3 ⽹关，这⼀数字超过了业内其他公司的总和。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_20-57-47.png" alt="图片描述"></p><p>现在为了节约成本使⽤ MinIO，等你的公司壮⼤了、有钱了。不想⾃⼰运维基础设施了，就可以把对象存储放到云上，只要云⼚商⽀持 S3 标准（⽐如阿⾥云 OSS、七⽜云等），应⽤程序是不需要重新开发的。</p><h2 id="3-MinIO-的安装与基础⽤法"><a href="#3-MinIO-的安装与基础⽤法" class="headerlink" title="3. MinIO 的安装与基础⽤法"></a>3. MinIO 的安装与基础⽤法</h2><h3 id="⼀、安装"><a href="#⼀、安装" class="headerlink" title="⼀、安装"></a>⼀、安装</h3><p>我们使⽤ Docker 来安装 MinIO，步骤如下：</p><ul><li>拉取镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull minio/minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建并运⾏容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it --name minio -p <span class="token number">9000</span>:9000 -p <span class="token number">9001</span>:9001 -d-v /usr/local/docker/minio/data:/data-v /usr/local/docker/minio/config:/root/.minio-e <span class="token string">'MINIO_ROOT_USER=admin'</span>-e <span class="token string">'MINIO_ROOT_PASSWORD=admin123'</span>minio/minio server /data --console-address <span class="token string">":9001"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>开启相应的安全组端⼝</p><p>访问：<a href="http://124.222.178.129:9000/">http://124.222.178.129:9000</a></p><p>账号：admin，密码：admin123</p><p>9000：API 调⽤端⼝</p><p>9001：控制台端⼝，不指定会随机⽣成。注：控制台⽤ 9000 也能打开，最终会跳转到 9001，效果是⼀样的</p></li><li><p>防⽕墙相关</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minio默认的服务端⼝是9000，需要开放防⽕墙端⼝firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">9000</span>/tcp --permanentfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看端⼝是否开放</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --query-port<span class="token operator">=</span><span class="token number">9000</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启防⽕墙：systemctl start firewalld</p><p>关闭防⽕墙：systemctl stop firewalld</p><p>重启防⽕墙：systemctl restart firewalld</p><p><strong>相关⽂档</strong></p><ul><li><a href="https://min.io/">https://min.io/</a></li><li><a href="https://github.com/minio/minio-java/tree/release/examples">https://github.com/minio/minio-java/tree/release/examples</a></li><li><a href="https://github.com/minio/minio-java/blob/release/docs/zh_CN/APl.md">https://github.com/minio/minio-java/blob/release/docs/zh_CN/APl.md</a></li></ul><h3 id="⼆、使⽤"><a href="#⼆、使⽤" class="headerlink" title="⼆、使⽤"></a>⼆、使⽤</h3><ul><li>登录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-18-59.png"></p><ul><li>创建 bucket</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-21-14.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-22-06.png"></p><ul><li>上传⽂件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-26-42.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-28-35.png"></p><p>● 修改 bucket 访问策略为公开</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-29-44.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-30-43.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-33-14.png"></p><ul><li>访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_21-34-45.png"></p><h2 id="4-整合-MinIO-的-JavaSDK"><a href="#4-整合-MinIO-的-JavaSDK" class="headerlink" title="4. 整合 MinIO 的 JavaSDK"></a>4. 整合 MinIO 的 JavaSDK</h2><h3 id="⼀、整合-MinIO"><a href="#⼀、整合-MinIO" class="headerlink" title="⼀、整合 MinIO"></a>⼀、整合 MinIO</h3><p>pom.xml 引⼊：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml，服务信息要和我们上⼀节安装的 MinIO 服务⼀致，这样我们才能正常连接测试：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endPoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//124.222.178.129<span class="token punctuation">:</span><span class="token number">9000</span>  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> admin  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> admin123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写⼀个⼯具类，这个⼯具类只为⼤家演示了基础的 API。</p><p>更多的 API 请参考官⽅⽂档：<a href="https://docs.min.io/cn/java-client-api-reference.html">https://docs.min.io/cn/java-client-api-reference.html</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>file<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: MinIO⼯具类* @author: syhan* @date: 2022-04-14**/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinIoTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;minio.endPoint&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> endPoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;minio.accessKey&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;minio.secretKey&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MinioClient</span> instance<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断 bucket是否存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">BucketExistsArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建 bucket     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> isExist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isExist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span>                    <span class="token class-name">MakeBucketArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                           <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * ⽂件上传     *     * @param bucketName bucket名称     * @param objectName 对象名称，⽂件名称     * @param filepath   ⽂件路径     */</span>    <span class="token keyword">public</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">String</span> filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">uploadObject</span><span class="token punctuation">(</span>                <span class="token class-name">UploadObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * ⽂件上传     *     * @param bucketName bucket名称     * @param objectName 对象名称，⽂件名称     * @param inputStream ⽂件输⼊流     */</span>     <span class="token keyword">public</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>               <span class="token class-name">PutObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10485760</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**      * 删除⽂件      *      * @param bucketName bucket名称      * @param objectName 对象名称      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>       instance<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>                 <span class="token class-name">RemoveObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、测试"><a href="#⼆、测试" class="headerlink" title="⼆、测试"></a>⼆、测试</h3><p>写⼀个测试⽤例测试上⾯的⽅法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>file</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>file<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">MinIoTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">ObjectWriteResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtendWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span></span><span class="token class-name">SpringExtension</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description:* @author: syhan* @date: 2022-04-14**/</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinIoTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MinIoTemplate</span> minIoTemplate<span class="token punctuation">;</span>    <span class="token comment">//测试创建bucket</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testCreateBucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        minIoTemplate<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试上传⽂件对象</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testPutObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectWriteResponse</span> response <span class="token operator">=</span> minIoTemplate<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>                <span class="token string">"img/banner.jpg"</span><span class="token punctuation">,</span>                <span class="token string">"/Users/syhan/Pictures/横版背景/img7.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试删除⽂件对象</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testDeleteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        minIoTemplate<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"img/banner.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第⼀个测试⽤例创建⼀个名称为 hello 的 bucket</li><li>第⼆个测试⽤例上传了⼀个图⽚⽂件对象</li><li>第三个测试⽤例把图⽚⽂件对象删除需要注意的是当⽂件对象名称中包含⽂件夹分隔符“/”的时候,会⾃动创建⽂件⽬录。</li><li>MinIO 不提供⽂件⽬录的创建 API，⽂件⽬录随着⽂件上传动作创建。objectName 可以是/temp/xxx.jpg，可以认为⾃动创建了 temp ⽬录。</li><li>MinIO 不提供删除⽬录的 API，把⽂件⽬录下的所有⽂件都删除，就等于⽂件⽬录被删除。</li></ul><h2 id="5-fastdfs-简介及架构说明"><a href="#5-fastdfs-简介及架构说明" class="headerlink" title="5. fastdfs 简介及架构说明"></a>5. fastdfs 简介及架构说明</h2><h3 id="⼀、简介"><a href="#⼀、简介" class="headerlink" title="⼀、简介"></a>⼀、简介</h3><ul><li>fastdfs 是⼀个轻量级的开源分布式⽂件系统。</li><li>fastdfs 主要解决了⼤容量的⽂件存储和⾼并发访问的问题，⽂件存取时实现了负载均衡。</li><li>fastdfs 实现了软件⽅式的 RAID，可以使⽤廉价的 IDE 硬盘进⾏存储</li><li>⽀持存储服务器在线扩容</li><li>⽀持相同内容的⽂件只保存⼀份，节约磁盘空间</li><li>fastdfs 特别适合⼤中型⽹站使⽤，⽤来存储资源⽂件（如：图⽚、⽂档、⾳频、视频等等）</li></ul><h3 id="⼆、架构说明"><a href="#⼆、架构说明" class="headerlink" title="⼆、架构说明"></a>⼆、架构说明</h3><ul><li>Tracker：管理集群，tracker 也可以实现集群。每个 tracker 节点地位平等。收集 Storage 集群的状态。</li><li>Storage：实际保存⽂件 Storage 分为多个组，每个组之间保存的⽂件是不同的。每个组内部可以有多个成员。组成员内部保存的内容是⼀样的，组成员的地位是⼀致的，没有主从的概念。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HcQUCO.png" alt="图片描述"></p><p>说明： nginx + fileid（⽂件路径），http 访问</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/uiHWfw.png" alt="图片描述"></p><p>三、好处</p><ol><li><p>将文件的管理与具体业务应用解耦，可以多个应用共用一套 fastDFS 集群，分成不同的组。</p></li><li><p>图片访问，只需要将 http-ur 交给浏览器。nginx 提供访问服务。</p></li><li><p>方便统一备份，一组的多个 storage 就是彼此的备份。</p></li><li><p>可以将图片浏览，文件下载的压力分散给 nginx 服务。应用自己专心做业务。</p></li><li><p>缩略图，防盗链等等。</p></li></ol><h2 id="6-使用-docker-安装-Fastdfs"><a href="#6-使用-docker-安装-Fastdfs" class="headerlink" title="6. 使用 docker 安装 Fastdfs"></a>6. 使用 docker 安装 Fastdfs</h2><p>一、安装</p><ul><li>拉取镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull delron/fastdfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建本机存储目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -fR /home/docker/fastdfs/<span class="token punctuation">&#123;</span>tracker,storage<span class="token punctuation">&#125;</span><span class="token function">mkdir</span> /home/docker/fastdfs/<span class="token punctuation">&#123;</span>tracker,storage<span class="token punctuation">&#125;</span>  -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>启动 tracker</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>--network<span class="token operator">=</span>host <span class="token punctuation">\</span>--name tracker <span class="token punctuation">\</span>-v /home/docker/fastdfs/tracker:/var/fdfs <span class="token punctuation">\</span>delron/fastdfs tracker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动 storage（改成⾃⼰的地址）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>--network<span class="token operator">=</span>host <span class="token punctuation">\</span>--name storage <span class="token punctuation">\</span>-e <span class="token assign-left variable">TRACKER_SERVER</span><span class="token operator">=</span><span class="token number">124.222</span>.178.129:22122 <span class="token punctuation">\</span>-v /home/docker/fastdfs/storage:/var/fdfs <span class="token punctuation">\</span>-e <span class="token assign-left variable">GROUP_NAME</span><span class="token operator">=</span>group1 <span class="token punctuation">\</span>delron/fastdfs storage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、开启宿主机防火墙端口"><a href="#二、开启宿主机防火墙端口" class="headerlink" title="二、开启宿主机防火墙端口"></a>二、开启宿主机防火墙端口</h3><p>morunchang/fastdfs 镜像在构建的时候，为 nginx 配置的端⼝是 8888（开相应安全组）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">22122</span>/tcp --permanentfirewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">23000</span>/tcp --permanentfirewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8888</span>/tcp --permanentfirewall-cmd --reload<span class="token comment"># 查看是否开放</span>firewall-cmd --query-port<span class="token operator">=</span><span class="token number">22122</span>/tcpfirewall-cmd --query-port<span class="token operator">=</span><span class="token number">23000</span>/tcpfirewall-cmd --query-port<span class="token operator">=</span><span class="token number">8888</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、测试安装结果"><a href="#三、测试安装结果" class="headerlink" title="三、测试安装结果"></a>三、测试安装结果</h3><p>FastDFS 安装包中，⾃带了客户端程序，可以使⽤这个命令⾏客户端进⾏⽂件上</p><p>传及下载测试。 在宿主机执⾏命令</p><ul><li>上传⽂件（是容器⾥⾯的⽂件）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage /usr/bin/fdfs_upload_file /etc/fdfs/client.conf./README返回结果（序号不⼀定⼀样）group1/M00/00/00/wKgBW10lZHCAC8TaAAAAMT6WPfM3645854<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看 fastdfs ⽂件系统信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage fdfs_file_info /etc/fdfs/client.confgroup1/M00/00/00/wKgBW10lZHCAC8TaAAAAMT6WPfM3645854<span class="token comment"># 结果</span><span class="token builtin class-name">source</span> storage id: <span class="token number">0</span><span class="token builtin class-name">source</span> <span class="token function">ip</span> address: <span class="token number">192.168</span>.1.91<span class="token function">file</span> create timestamp: <span class="token number">2019</span>-07-10 04:07:12<span class="token function">file</span> size: <span class="token number">49</span><span class="token function">file</span> crc32: <span class="token number">1050033651</span> <span class="token punctuation">(</span>0x3E963DF3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下载⽂件，不会下载到宿主机，要到去容器⾥⾯看（注意改成你⾃⼰的⽂件序号）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage fdfs_download_file /etc/fdfs/client.confgroup1/M00/00/00/wKgBW10lZHCAC8TaAAAAMT6WPfM3645854<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看集群状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i storage fdfs_monitor /etc/fdfs/storage.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-开发一个自定义-fastdfs-starter"><a href="#7-开发一个自定义-fastdfs-starter" class="headerlink" title="7. 开发一个自定义 fastdfs-starter"></a>7. 开发一个自定义 fastdfs-starter</h2><h3 id="⼀、主要实现的功能"><a href="#⼀、主要实现的功能" class="headerlink" title="⼀、主要实现的功能"></a>⼀、主要实现的功能</h3><ol><li><p>实现 FastDFSClientUtil 及 properties 的⾃动装配（如何开发⼀个⾃定义的 spring-boot-starter）</p></li><li><p>加⼊连接线程池管理</p></li></ol><h3 id="⼆、实现-FastDFSClientUtil-及-properties-的⾃动装配"><a href="#⼆、实现-FastDFSClientUtil-及-properties-的⾃动装配" class="headerlink" title="⼆、实现 FastDFSClientUtil 及 properties 的⾃动装配"></a>⼆、实现 FastDFSClientUtil 及 properties 的⾃动装配</h3><p>实际上就是要⾃⼰实现⼀个 starter</p><p>第⼀步：创建项⽬</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/yA4u1f.png" alt="图片描述"></p><p>第⼆步：引⼊ maven 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.syhan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>syhan-fastdfs-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>syhan-fastdfs-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.oschina.zcx7878<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastdfs-client-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.27.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 spring-boot-configuration-processor 的作⽤是编译时⽣成 spring-configuration-metadata.json， 此⽂件主要给 IDE 使⽤，⽤于提示。</p><p>fastdfs-client-java 和 commons-pool2 是实现 fastdfs 功能及连接池的，与⾃动装配⽆关。</p><p>第三步：FastDFS 属性类 FastDFSProperties</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>fastdfs</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @program: fastdfs-spring-boot-starter * @description: * @author: SYH * @create: 2022-04-14 20:58 **/</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"syhan.fastdfs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastDFSProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> connect_timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> network_timeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tracker_server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> max_total<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> http_anti_steal_token <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> http_secret_key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> http_tracker_http_port <span class="token operator">=</span> <span class="token number">8987</span><span class="token punctuation">;</span>    <span class="token comment">//下面这个实际上不是fastdfs的属性，为了方便实用自定义属性，表示访问nginx的http地址</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> httpserver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getHttp_tracker_http_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> http_tracker_http_port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttp_tracker_http_port</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> http_tracker_http_port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>http_tracker_http_port <span class="token operator">=</span> http_tracker_http_port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getHttp_anti_steal_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> http_anti_steal_token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttp_anti_steal_token</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> http_anti_steal_token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>http_anti_steal_token <span class="token operator">=</span> http_anti_steal_token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHttp_secret_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> http_secret_key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttp_secret_key</span><span class="token punctuation">(</span><span class="token class-name">String</span> http_secret_key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>http_secret_key <span class="token operator">=</span> http_secret_key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getMax_total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> max_total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMax_total</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> max_total<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>max_total <span class="token operator">=</span> max_total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHttpserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> httpserver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttpserver</span><span class="token punctuation">(</span><span class="token class-name">String</span> httpserver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpserver <span class="token operator">=</span> httpserver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getTracker_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> tracker_server<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTracker_server</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tracker_server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tracker_server <span class="token operator">=</span> tracker_server<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getConnect_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> connect_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConnect_timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> connect_timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>connect_timeout <span class="token operator">=</span> connect_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getNetwork_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> network_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNetwork_timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> network_timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>network_timeout <span class="token operator">=</span> network_timeout<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> charset<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCharset</span><span class="token punctuation">(</span><span class="token class-name">String</span> charset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>charset <span class="token operator">=</span> charset<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余如 Base64 ⼯具类、FastDFSClient、FastDFSClientFactory、FastDFSClientPool 等查看代码</p><p>第四步：⾃动装配配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>fastdfs</span><span class="token punctuation">;</span><span class="token comment">/** * @program: fastdfs-spring-boot-starter * @description: * @author: SYH * @create: 2022-04-14 20:59 **/</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnClass</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token comment">/** * 实现最终目标把FastDFSClientUtil自动注入Spring，提供外部使用 */</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//当classpath下面有这三个类才做自动装配</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">FastDFSClientFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FastDFSClientPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FastDFSClientUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//@EnableConfigurationProperties 相当于把使用 @ConfigurationProperties的类注入。</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">FastDFSProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">FastDFSProperties</span> properties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">AutoConfigure</span><span class="token punctuation">(</span><span class="token class-name">FastDFSProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">FastDFSClientPool</span> <span class="token function">fastDFSClientPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FastDFSClientPool</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token comment">//当没有FastDFSClientUtil，就把FastDFSClientUtil作为Bean注入Spring</span>    <span class="token class-name">FastDFSClientUtil</span> fastDFSClientUtil <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">FastDFSClientUtil</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：在 resources/META-INF/下创建 spring.factories ⽂件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\top.syhan.boot.fastdfs.AutoConfigure</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、总结-Starter-的⼯作原理"><a href="#三、总结-Starter-的⼯作原理" class="headerlink" title="三、总结 Starter 的⼯作原理"></a>三、总结 Starter 的⼯作原理</h3><ul><li>Spring Boot 在启动时扫描项⽬所依赖的 JAR 包，寻找包含 spring.factories ⽂件的 JAR 包</li><li>根据 spring.factories 配置加载 AutoConfigure 类</li><li>根据 @Conditional 注解的条件，进⾏⾃动配置并将 Bean 注⼊ Spring Context</li></ul><h3 id="四、打包安装"><a href="#四、打包安装" class="headerlink" title="四、打包安装"></a>四、打包安装</h3><p>依次执⾏ mvn clean、mvn install 命令，在本地仓库安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_15-31-05.png" alt="图片描述"></p><h2 id="8-整合-fastdfs-操作文件数据"><a href="#8-整合-fastdfs-操作文件数据" class="headerlink" title="8. 整合 fastdfs 操作文件数据"></a>8. 整合 fastdfs 操作文件数据</h2><ul><li>在需要上传⽂件的项⽬中引⼊ maven 依赖坐标</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.syhan.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>syhan-fastdfs-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写配置</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syhan</span><span class="token punctuation">:</span> <span class="token key atrule">fastdfs</span><span class="token punctuation">:</span>   httpserver<span class="token punctuation">:</span> http<span class="token punctuation">:</span>//124.222.178.129<span class="token punctuation">:</span>8888/ <span class="token comment"># 在使⽤FastDFSClientUtil会得到完 整的http⽂件访问路径</span>   connect_timeout<span class="token punctuation">:</span> <span class="token number">5</span>   network_timeout<span class="token punctuation">:</span> <span class="token number">30</span>   charset<span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>   tracker_server<span class="token punctuation">:</span> <span class="token comment"># tracker_server 可以配置成数组</span>     <span class="token punctuation">-</span> 124.222.178.129<span class="token punctuation">:</span><span class="token number">22122</span>   max_total<span class="token punctuation">:</span> <span class="token number">50</span>   http_anti_steal_token<span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 如果有防盗链的话，这⾥true</span>   http_secret_key<span class="token punctuation">:</span> <span class="token comment"># 有防盗链，这⾥填secret_key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写上传接⼝</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fastdfs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastDfsController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">FastDFSClientUtil</span> fastDFSClientUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResponse</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> fileId<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> originalFileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">assert</span> originalFileName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            fileId <span class="token operator">=</span> fastDFSClientUtil<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>originalFileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">AjaxResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>fastDFSClientUtil<span class="token punctuation">.</span><span class="token function">getSourceUrl</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">CustomExceptionType</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">,</span><span class="token string">"⽂件上传图⽚服务器失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>postman 测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/CEABzb.png"></p><ul><li>访问返回的图⽚地址，可以成功访问到上传的图⽚</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/9FwjRN.png" alt="图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis和缓存</title>
      <link href="/2022/05/01/redis-he-huan-cun/"/>
      <url>/2022/05/01/redis-he-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-和缓存"><a href="#redis-和缓存" class="headerlink" title="redis 和缓存"></a>redis 和缓存</h1><h2 id="1-redis-数据结构与应用场景"><a href="#1-redis-数据结构与应用场景" class="headerlink" title="1.redis 数据结构与应用场景"></a>1.redis 数据结构与应用场景</h2><h3 id="⼀、简介"><a href="#⼀、简介" class="headerlink" title="⼀、简介"></a>⼀、简介</h3><p>Redis 是开源免费， key-value 内存数据库，主要解决⾼并发、⼤数据场景下，热点数据访问的性能问题，提供⾼性能的数据快速访问。项⽬中部分数据访问⽐较频繁，对下游 DB（例如 MySQL）造成服务压⼒，这时候可以使⽤缓存来提⾼效率。<br>Redis 的主要特点包括：</p><ul><li>Redis 数据存储在内存中，可以提高热点数据的访问效率</li><li>Redis 除了支持 key-value 类型的数据，同时还支持其他多种数据结构的存储；</li><li>Redis 支持数据持久化存储，可以将数据存储在磁盘中，机器重启数据将从磁盘重新加载数据;Redis 作为缓存数据库和 MySQL 这种结构化数据库进行对比。</li><li>从数据库类型上，Redis 是 NoSQL 半结构化缓存数据库，MySQL 是结构化关系型数据库；</li><li>从读写性能上，MySQL 是持久化硬盘存储，读写速度较楼，Redis 数据存储读取都在内存，同时也可以持久化到磁盘，读写速度较快；</li><li>从使用场景上，Redis 一般作为 MySQL 数据读取性能优化的技术送型，彼此配合使用。Redis 用于存储热数据或者级存数据，并不存在相互替换的关系。</li></ul><h3 id="⼆、Redis-基本数据结构与实战场景"><a href="#⼆、Redis-基本数据结构与实战场景" class="headerlink" title="⼆、Redis 基本数据结构与实战场景"></a>⼆、Redis 基本数据结构与实战场景</h3><ol><li><p>redis 的数据结构可以理解为 Java 数据类型中的 Map&lt;String,Object&gt;,key 是 String 类型，value 是下⾯ 的类型。只不过作为⼀个独⽴的数据库单独存在，所以 Java 中的 Map 怎么⽤，redis 就怎么⽤，⼤同⼩异。</p></li><li><p>字符串类型的数据结构可以理解为 Map&lt;String,String&gt;</p></li><li><p>list 类型的数据结构可以理解为 Map&lt;String,List<String>&gt;</p></li><li><p>set 类型的数据结构可以理解为 Map&lt;String,Set<String>&gt;</p></li><li><p>hash 类型的数据结构可以理解为 Map&lt;String,HashMap&lt;String,String&gt;&gt;</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_13-23-32.png" alt="图片描述"></p><p>上图中命令行更正：Irange，不是 lrang</p><h3 id="三、redis-应用场景解析"><a href="#三、redis-应用场景解析" class="headerlink" title="三、redis 应用场景解析"></a>三、redis 应用场景解析</h3><h4 id="3-1-String-类型使用场景"><a href="#3-1-String-类型使用场景" class="headerlink" title="3.1 String 类型使用场景"></a>3.1 String 类型使用场景</h4><h5 id="场景一：商品库存数"><a href="#场景一：商品库存数" class="headerlink" title="场景一：商品库存数"></a>场景一：商品库存数</h5><p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">incr key     <span class="token comment">#增加⼀个库存</span>decr key    <span class="token comment"># 减少⼀个库存</span>incrby key <span class="token number">10</span> <span class="token comment"># 增加20个库存</span>decrby key <span class="token number">15</span>   <span class="token comment"># 减少15个库存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>set goods_id 10；设置 id 为 goodid 的商品的库存初始值为 10；</li><li>decr goods_id；当商品被购买时候，库存数据减 1。</li></ul><p>依此类推的场景：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p><h5 id="场景二：时效信息存储"><a href="#场景二：时效信息存储" class="headerlink" title="场景二：时效信息存储"></a>场景二：时效信息存储</h5><p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间，SETEX mykey 60 “value”中的第 2 个参数就是过期时间。比如，用户登录某个 App 需要获取登录验证码，验证码在 30 秒内有效。</p><ul><li>生成验证码：生成验证码并使用 String 类型在 reids 存储验证码，同时设置 30 秒的失效时间。如：SETEX validcode 30 “value”</li><li>验证过程：用户获得验证码之后，我们通过 get validcode 获取验证码，如果获取不到说明验证码过期了。</li></ul><h4 id="3-2-List-类型使用场景"><a href="#3-2-List-类型使用场景" class="headerlink" title="3.2 List 类型使用场景"></a>3.2 List 类型使用场景</h4><p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1))。</p><h5 id="场景一：消息队列实现"><a href="#场景一：消息队列实现" class="headerlink" title="场景一：消息队列实现"></a>场景一：消息队列实现</h5><p>目前有很多专业的消息队列组件 Kafka、 RabbitMQ 等。我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。list 存储就是一个队列的存储形式：</p><ul><li><p>Ipush key value； 在 key 对应 list 的头部添加字符串元素；</p></li><li><p>rpop key； 移除列表的最后一个元素，返回值为移除的元素。</p></li></ul><h5 id="场景二：最新上架商品"><a href="#场景二：最新上架商品" class="headerlink" title="场景二：最新上架商品"></a>场景二：最新上架商品</h5><p>在交易网站首页经常会有新上架产品推荐的模块，这个模块是存储了最新上架前 100 名。这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。Redis trim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrim key start end<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>start 和 end 都是由 0 开始计数的，这⾥的 0 是列表⾥的第⼀个元素（表头），1 是第⼆个元素。</p><p>如下伪代码演示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//把新上架商品添加到链表⾥ret <span class="token operator">=</span> r.lpush<span class="token punctuation">(</span><span class="token string">"new:goods"</span>, goodsId<span class="token punctuation">)</span>//保持链表 <span class="token number">100</span> 位ret <span class="token operator">=</span> r.ltrim<span class="token punctuation">(</span><span class="token string">"new:goods"</span>, <span class="token number">0</span>, <span class="token number">99</span><span class="token punctuation">)</span>//获得前 <span class="token number">100</span> 个最新上架的商品 <span class="token function">id</span> 列表newest_goods_list <span class="token operator">=</span> r.lrange<span class="token punctuation">(</span><span class="token string">"new:goods"</span>, <span class="token number">0</span>, <span class="token number">99</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-set-类型使用场景"><a href="#3-3-set-类型使用场景" class="headerlink" title="3.3 set 类型使用场景"></a>3.3 set 类型使用场景</h4><p>set 也是存储了⼀个集合列表功能。和 list 不同，set 具备去重功能(和 Java 的 Set 数据类型⼀样)。当需要存储⼀个列表信息，同时要求列表内的元素不能有重复，这时候使⽤ set ⽐较合适。与此同时，set 还提供的交集、并集、差集。</p><p>例如，在交易⽹站，我们会存储⽤户感兴趣的商品信息，在进⾏相似⽤户分析的时候， 可以通过计算两个不同⽤户之间感兴趣商品的数量来提供⼀些依据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//userid 为⽤户 ID ， goodID 为感兴趣的商品信息。sadd <span class="token string">"user:userId"</span> goodIDsadd <span class="token string">"user:101"</span> <span class="token number">1</span>sadd <span class="token string">"user:101"</span> <span class="token number">2</span>sadd <span class="token string">"user:102"</span> <span class="token number">1</span>sadd <span class="token string">"user:102"</span> <span class="token number">3</span>sinter <span class="token string">"user:101"</span> <span class="token string">"user:102"</span>    <span class="token comment"># 返回值是1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到两个⽤户相似的产品， 然后确定相似产品的类⽬就可以进⾏⽤户分析。类似的应⽤场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的⽀持。</p><h4 id="3-4-Hash-类型使用场景"><a href="#3-4-Hash-类型使用场景" class="headerlink" title="3.4 Hash 类型使用场景"></a>3.4 Hash 类型使用场景</h4><p>Redis 在存储对象（例如：⽤户信息）的时候需要对对象进⾏序列化转换然后存储，还有⼀种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。对于⼀些对象类型，还有另外⼀种⽐较⽅便的类型，那就是按照 Redis 的 Hash 类型进⾏存储。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hset key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，我们存储⼀些⽹站⽤户的基本信息， 我们可以使⽤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hset user101 name <span class="token string">"⼩明"</span>hset user101 phone <span class="token string">"123456"</span>hset user101 sex <span class="token string">"男"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就存储了⼀个⽤户基本信息，存储信息有：{name : ⼩明， phone : “123456”，sex : “男”}<br>当然这种类似场景还⾮常多， ⽐如存储订单的数据，产品的数据，商家基本信息等。⼤家可以参考来进⾏存储选型。但是不适合存储关联关系⽐较复杂的数据，那种场景还得⽤关系型数据库⽐较⽅便。</p><h4 id="3-5-Sorted-Set-类型使用场景"><a href="#3-5-Sorted-Set-类型使用场景" class="headerlink" title="3.5 Sorted Set 类型使用场景"></a>3.5 Sorted Set 类型使用场景</h4><p>Redis sorted set 的使⽤场景与 set 类似，区别是 set 不是⾃动有序的，⽽ sorted set 可以通过提供⼀个 score 参数来为存储数据排序，并且是⾃动排序，插⼊既有序。<strong>业务中如果需要⼀个有序且不重复的集合列表，就可以选择 sorted set 这种数据结构。</strong>⽐如：商品的购买热度可以将购买总量 num 当做商品列表的 score，这样获取最热⻔的商品时就是可以⾃动按售卖总量排好序。</p><h2 id="2-整合单例模式"><a href="#2-整合单例模式" class="headerlink" title="2. 整合单例模式"></a>2. 整合单例模式</h2><p>redis 集群模式和哨兵模式⾼可⽤的安装与运维，需要去专⻔的 redis 课程学习。这⾥主要⾯向 SpringBoot 整合 redis 来开发，不涉及 redis 集群⾼可⽤及运维知识。</p><h3 id="⼀、spring-data-redis-简介"><a href="#⼀、spring-data-redis-简介" class="headerlink" title="⼀、spring-data-redis 简介"></a>⼀、spring-data-redis 简介</h3><p>Spring Boot 提供了对 Redis 集成的组件包：spring-boot-starter-data-redis，它依赖于 spring-data-redis 和 lettuce。Spring Boot 1.0 默认使⽤的是 Jedis 客户端，2.0 替换成了 Lettuce， spring-boot-starter-data-redis 为我们隔离了其中的差异性。</p><ol><li><p>Lettuce：是⼀个可伸缩线程安全的 Redis 客户端，多个线程可以共享同⼀个 RedisConnection，它 利⽤优秀 Netty NIO 框架来⾼效地管理多个连接。</p></li><li><p>Spring Data：是 Spring 框架中的⼀个主要项⽬，⽬的是为了简化构建基于 Spring 框架应⽤的数据访问，包括⾮关系数据库、Map-Reduce 框架、云数据服务等，另外也包含对关系数据库的访问⽀持。</p></li><li><p>Spring Data Redis：是 Spring Data 项⽬中的⼀个主要模块，实现了对 Redis 客户端 API 的⾼度封装，使对 Redis 的操作更加便捷。</p></li></ol><h3 id="⼆、整合-spring-data-redis"><a href="#⼆、整合-spring-data-redis" class="headerlink" title="⼆、整合 spring data redis"></a>⼆、整合 spring data redis</h3><p>引入依赖包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入 commons-pool 2 是因为 Lettuce 需要使用 commons-pool 2 创建 Redis 连接池.<br>application 全局配置 redis 的单节点实例:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    database<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># Redis 数据库索引（默认为 0）</span>    host<span class="token punctuation">:</span> 127.0.0.1 <span class="token comment"># Redis 服务器地址</span>    port<span class="token punctuation">:</span> <span class="token number">6379</span> <span class="token comment"># Redis 服务器连接端⼝</span>    password<span class="token punctuation">:</span> <span class="token number">123456</span> <span class="token comment"># Redis 服务器连接密码（默认为空）</span>    timeout<span class="token punctuation">:</span>  5000  <span class="token comment"># 连接超时，单位ms</span>    lettuce<span class="token punctuation">:</span>      pool<span class="token punctuation">:</span>        max<span class="token punctuation">-</span><span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment"># 连接池最⼤连接数（使⽤负值表示没有限制） 默认 8</span>        max<span class="token punctuation">-</span><span class="token key atrule">wait</span><span class="token punctuation">:</span> <span class="token number">-1</span> <span class="token comment"># 连接池最⼤阻塞等待时间（使⽤负值表示没有限制） 默认 -1</span>        max<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment"># 连接池中的最⼤空闲连接 默认 8</span>        min<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 连接池中的最⼩空闲连接 默认 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用-redisTemplate-操作数据"><a href="#3-使用-redisTemplate-操作数据" class="headerlink" title="3.使用 redisTemplate 操作数据"></a>3.使用 redisTemplate 操作数据</h2><h3 id="⼀、redis-模板封装类"><a href="#⼀、redis-模板封装类" class="headerlink" title="⼀、redis 模板封装类"></a>⼀、redis 模板封装类</h3><p>RedisTemplate 的封装使我们能够更⽅便的进⾏ redis 数据操作，⽐直接使⽤ Jedis 或者 Lettuce 的 javaSDK 要⽅便很多。RedisTemplate 作为 java 操作 redis 数据库的 API 模板更通⽤，可以操作所有的 redis 数据类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注⼊RedisTemplate，更通⽤</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span><span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token class-name">ValueOperations</span> <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作字符串</span><span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作 hash</span><span class="token class-name">ListOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> listOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作 list</span><span class="token class-name">SetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> setOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作 set</span><span class="token class-name">ZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> zSetOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作有序 set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ListOperations、ValueOperations、HashOperations、SetOperations、ZSetOperations 等都是针对专有数据类型进⾏操作，使⽤起来更简洁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> valueOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis string类型存取Java Object(序列化反序列化)</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的hash类型存储java Object</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">ListOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> listOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的list类型 存储java Object</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">SetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> setOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis的set类型存 储java Object</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">ZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> zSetOperations<span class="token punctuation">;</span>  <span class="token comment">//以redis的zset类型存储java Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、基础数据-Java-类"><a href="#⼆、基础数据-Java-类" class="headerlink" title="⼆、基础数据 Java 类"></a>⼆、基础数据 Java 类</h3><p>为了⽅便后⾯写代码解释 API 的使⽤⽅法，写测试⽤例。我们需要先准备数据对象 Person，注意要实现 Serializable 接⼝，为什么⼀定要实现这个接⼝？我们下⽂解释。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8985545025228238754L</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> id<span class="token punctuation">;</span>  <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>  <span class="token class-name">Address</span> address<span class="token punctuation">;</span>   <span class="token comment">//注意这⾥，不是基础数据类型</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> lastname<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备数据对象 Address</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8985545025228238771L</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> city<span class="token punctuation">;</span>  <span class="token class-name">String</span> country<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">,</span> <span class="token class-name">String</span> country<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、StringRedisTemplate"><a href="#三、StringRedisTemplate" class="headerlink" title="三、StringRedisTemplate"></a>三、StringRedisTemplate</h3><p>除了 RedisTemplate 模板类，还有另⼀个模板类叫做 StringRedisTemplate 。⼆者都提供了⽤来操作 redis 数据库的 API。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>   <span class="token comment">//以String序列化⽅式 保存数据的通⽤模板类</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>   <span class="token comment">//默认以JDK⼆进 制⽅式保存数据的通⽤模板类</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将数据存⼊redis数据库</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"player:srt"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"player:rt"</span><span class="token punctuation">,</span>person<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⼆者的区别在于</p><ul><li><p>操作的数据类型不同，以 List 类型为例：RedisTemplate 操作 <code>List&lt;Object&gt;</code>,StringRedisTemplate 操作 <code>List&lt;String&gt;</code></p></li><li><p>序列化数据的⽅式不同，RedisTemplate 使⽤的是 JdkSerializationRedisSerializer 存⼊数据会将数据先序列化成字节数组然后在存⼊ Redis 数据库。 StringRedisTemplate 使⽤的是 StringRedisSerializer redis 持久化的 java 数据类为什么要实现 Serializable 接⼝？因为 RedisTemplate 默认使⽤的是 JdkSerializationRedisSerializer，也就是使⽤ Java JDK 默认的序列化⽅式存储数据。如果不实现 Serializable 接⼝，JDK 序列化就会报错，这是 java 基础知识。如果我们可以不使⽤ JDK 默认的序列化⽅式，就不需要实现这个 Serializable 接⼝。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-17-02.png" alt="图片描述"></p><p>需要注意的是因为 RedisTemplate 和 StringRedisTemplate 的默认序列化存储⽅式不⼀样，所以⼆者存储的数据并不能通⽤。也就是说 RedisTemplate 存的数据只能⽤ RedisTemplate 去取，对于 StringRedisTemplate 也是⼀样。</p><h3 id="四、解决-key-value-乱码问题"><a href="#四、解决-key-value-乱码问题" class="headerlink" title="四、解决 key-value 乱码问题"></a>四、解决 key-value 乱码问题</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-43-28.png" alt="图片描述"></p><p>其实这个不是严格意义上的乱码，是 JDK 的⼆进制序列化之后的存储⽅式。</p><p>如何解决？看下⽂的配置类代码</p><ul><li><p>采⽤ StringRedisSerializer 对 key 进⾏序列化（字符串格式）</p></li><li><p>采⽤ Jackson2JsonRedisSerializer 对 value 将进⾏序列化（JSON 格式）</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>              objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重点在这四⾏代码</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乱码问题的症结在于对象的序列化问题：RedisTemplate 默认使⽤的是 JdkSerializationRedisSerializer （⼆进制存储），StringRedisTemplate 默认使⽤的是 StringRedisSerializer（redis 字符串格式存储）。</p><p>序列化⽅式对⽐：</p><ul><li><p>JdkSerializationRedisSerializer: 使⽤ JDK 提供的序列化功能。 优点是反序列化时不需要提供类型信息(class)，但缺点是需要实现 Serializable 接⼝，还有序列化后的结果⾮常庞⼤，是 JSON 格式的 5 倍左右，这样就会消耗 redis 服务器的⼤量内存。⽽且是以⼆进制形式保存，⾃然⼈⽆法理解。</p></li><li><p>Jackson2JsonRedisSerializer： 使⽤ Jackson 库将对象序列化为 JSON 字符串。优点是速度快，序列化后的字符串短⼩精悍，不需要实现 Serializable 接⼝。似乎没啥缺点。</p></li><li><p>StringRedisSerializer 序列化之后的结果，⾃然⼈也是可以理解，但是 value 只能是 String 类型，不能是 Object。</p></li></ul><h3 id="五、使用-redisTemplate-存取-redis-各种数据类型"><a href="#五、使用-redisTemplate-存取-redis-各种数据类型" class="headerlink" title="五、使用 redisTemplate 存取 redis 各种数据类型"></a>五、使用 redisTemplate 存取 redis 各种数据类型</h3><p>下⾯的各种数据类型操作的 api 和 redis 命令⾏ api 的含义⼏乎是⼀致的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigTest2</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> valueOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis string类型存取Java Object(序列化反序列化)</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的hash类型存储java Object</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">ListOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> listOperations<span class="token punctuation">;</span> <span class="token comment">//以redis的list类型存储java Object</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">SetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> setOperations<span class="token punctuation">;</span>   <span class="token comment">//以redis的set类型存储java Object</span>     <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">ZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> zSetOperations<span class="token punctuation">;</span>  <span class="token comment">//以redis的zset类型存储java Object</span>     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testValueObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//向redis数据库保存数据(key,value),数据有效期20秒</span>         valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"player:1"</span><span class="token punctuation">,</span>person<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20秒之后数据消失</span>         <span class="token comment">//根据key把数据取出来</span>         <span class="token class-name">Person</span> getBack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"player:1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getBack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"playerset"</span><span class="token punctuation">,</span>person<span class="token punctuation">,</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//向Set中添加数据项</span>        <span class="token comment">//members获取Redis Set中的所有记录</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> setOperations<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token string">"playerset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//包含kobe和curry的数组</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HashOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"kobe"</span><span class="token punctuation">,</span><span class="token string">"byrant"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使⽤hash的⽅法存储对象数据（⼀个属性⼀个属性的存，下节教⼤家简单的⽅法）</span>              hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"lastname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取出⼀个对象的属性值，有没有办法⼀次将整个对象取出来？有，下节介绍</span>        <span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>hashOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//kobe</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token class-name">ListOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将数据对象放⼊队列</span>        listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三丰"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">,</span><span class="token string">"三⻛"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从左侧存，再从左侧取，所以取出来的数据是后放⼊的curry</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> listOperations<span class="token punctuation">.</span><span class="token function">leftPop</span><span class="token punctuation">(</span><span class="token string">"list:player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//curry对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-使用-Redis-Repository-操作数据"><a href="#4-使用-Redis-Repository-操作数据" class="headerlink" title="4. 使用 Redis Repository 操作数据"></a>4. 使用 Redis Repository 操作数据</h2><p>通过集成 spring-boot-starter-data-redis 之后⼀共有三种 redis hash 数据操作⽅式可以供我们选择</p><ul><li><p>⼀个属性、⼀个属性的存取</p></li><li><p>使⽤ Jackson2HashMapper 存取对象</p></li><li><p>使⽤ RedisRepository 的对象操作（本节核⼼内容）</p></li></ul><h3 id="一、一个属性、一个属性的存取"><a href="#一、一个属性、一个属性的存取" class="headerlink" title="一、一个属性、一个属性的存取"></a>一、一个属性、一个属性的存取</h3><p>这种⽅式在上⼀节中的代码，已经得以体现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HashOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使⽤hash的⽅法存储对象数据（⼀个属性⼀个属性的存，下节教⼤家简单的⽅法）</span>    hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"lastname"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>hashOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hash:player"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>⼀个 hash 代表⼀个对象的数据</p></li><li><p>⼀个对象有多个属性 key、value 键值对数据，每⼀组键值对都可以单独存取</p></li></ul><h3 id="⼆、使⽤-Jackson2HashMapper-存取对象"><a href="#⼆、使⽤-Jackson2HashMapper-存取对象" class="headerlink" title="⼆、使⽤ Jackson2HashMapper 存取对象"></a>⼆、使⽤ Jackson2HashMapper 存取对象</h3><p>上⼀⼩节我们操作 hash 对象的时候是⼀个属性⼀个属性设置的，那我们有没有办法将对象⼀次性 hash ⼊库呢？可以使⽤ jacksonHashOperations 和 Jackson2HashMapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigTest3</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> jacksonHashOperations<span class="token punctuation">;</span>        <span class="token comment">//注意这⾥的false，下⽂会讲解</span>    <span class="token keyword">private</span> <span class="token class-name">HashMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> jackson2HashMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2HashMapper</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHashPutAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"洛杉矶"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将对象以hash的形式放⼊redis数据库</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> mappedHash <span class="token operator">=</span> jackson2HashMapper<span class="token punctuation">.</span><span class="token function">toHash</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        jacksonHashOperations<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"player:"</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mappedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将对象从数据库取出来</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> loadedHash <span class="token operator">=</span> jacksonHashOperations<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">"player:"</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> map <span class="token operator">=</span> jackson2HashMapper<span class="token punctuation">.</span><span class="token function">fromHash</span><span class="token punctuation">(</span>loadedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> getback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Junit5,验证放进去的和取出来的数据⼀致</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>getback<span class="token punctuation">.</span><span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使⽤这种⽅式可以⼀次性存取 Java 对象为 redis 数据库的 hash 数据类型。需要注意的是：执⾏上⾯的测试⽤例，Person 和 Address ⼀定要有 public ⽆参构造⽅法，在将 map 转换成 Person 或 Address 对象的时候⽤到，如果没有的话会报错。</p><h3 id="三、使⽤-RedisRepository-的对象操作"><a href="#三、使⽤-RedisRepository-的对象操作" class="headerlink" title="三、使⽤ RedisRepository 的对象操作"></a>三、使⽤ RedisRepository 的对象操作</h3><p>使⽤ RedisRepository 进⾏ redis 数据操作，它不只是能简单地存取数据，还可以做很多 CURD 操作。使⽤起来和⽤ JPA 进⾏关系型数据库的单表操作，⼏乎是⼀样的。</p><p>⾸先，我们需要在需要操作的 java 实体类上⾯加上@RedisHash 注解，并使⽤@Id 为该实体类指定 id。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span>   <span class="token comment">//注意这⾥的person，下⽂会说明</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Id</span>  <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token comment">//其他和上⼀节代码⼀样</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后写⼀个 PersonRepository ，继承 CrudRepository，是不是也和 JPA 差不多？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//泛型第⼆个参数是id的数据类型</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">// 继承CrudRepository，获取基本的CRUD操作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CrudRepository 默认为我们提供了下⾯的这么多⽅法，我们直接调⽤就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-53-02.png" alt="图片描述"></p><p>然后进⾏下⾯的测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisRepositoryTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">PersonRepository</span> personRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rand<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存</span>        personRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//取</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> op <span class="token operator">=</span> personRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//统计Person的数量</span>        personRepository<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除person对象rand</span>        personRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：需要注意的是 RedisRepository 在存取对象数据的时候，实际上使⽤了 redis 的 2 种数据类型</p><ul><li><p>第⼀种是 Set 类型，⽤于保存每⼀个存⼊ redis 的对象（Person）的 id。我们可以利⽤这个 Set 实现 person 对象集合类的操作，⽐如说：count()统计 redis 数据库中⼀共保存了多少个 person。</p></li><li><p>第⼆种是 Hash 类型，是⽤来保存 Java 对象的，id 是 RedisRepository 帮我们⽣成的。</p></li></ul><h2 id="5-spring-cache-缓存基本用法"><a href="#5-spring-cache-缓存基本用法" class="headerlink" title="5. spring cache 缓存基本用法"></a>5. spring cache 缓存基本用法</h2><h3 id="一、为什么要做缓存"><a href="#一、为什么要做缓存" class="headerlink" title="一、为什么要做缓存"></a>一、为什么要做缓存</h3><ul><li><p>提升性能绝⼤多数情况下，关系型数据库 select 查询是出现性能问题最⼤的地⽅。⼀⽅⾯，select 会有很多像 join、group、order、like 等这样丰富的语义，⽽这些语义是⾮常耗性能的；另⼀⽅⾯，⼤多数应⽤都是读多写少，所以加剧了慢查询的问题。分布式系统中远程调⽤也会耗很多性能，因为有⽹络开销，会导致整体的响应时间下降。为了挽救这样的性能开销，在业务允许的情况（不需要太实时的数据）下，使⽤缓存是⾮常必要的事情。</p></li><li><p>缓解数据库压⼒当⽤户请求增多时，数据库的压⼒将⼤⼤增加，通过缓存能够⼤⼤降低数据库的压⼒。</p></li></ul><h3 id="⼆、常⽤缓存操作流程"><a href="#⼆、常⽤缓存操作流程" class="headerlink" title="⼆、常⽤缓存操作流程"></a>⼆、常⽤缓存操作流程</h3><p>使⽤缓存最关键的⼀点就是保证：缓存与数据库的数据⼀致性，该怎么去做？下图是⼀种最常⽤的缓存操作模式，来保证数据⼀致性。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-05-01_14-55-32.png" alt="图片描述"></p><ul><li><p><strong>更新写数据</strong>：先把数据存到数据库中，然后再让缓存失效或更新。缓存操作失败，数据库事务回滚。</p></li><li><p><strong>删除写数据</strong>: 先从数据库⾥⾯删掉数据，再从缓存⾥⾯删掉。缓存操作失败，数据库事务回滚。</p></li><li><p><strong>查询读数据</strong></p><ul><li><strong>缓存命中</strong>：先去缓存 cache 中取数据，取到后返回结果。</li><li><strong>缓存失效</strong>：应⽤程序先从 cache 取数据，没有得到，则从数据库中取数据，成功后，在将数据放到缓存中。</li></ul></li></ul><p>如果上⾯的这些更新、删除、查询操作流程全都由程序员通过编码来完成的话</p><ul><li><p>因为加⼊缓存层，程序员的编码量⼤⼤增多</p></li><li><p>缓存层代码和业务代码耦合，造成难以维护的问题。</p></li></ul><h3 id="三、整合-Spring-Cache"><a href="#三、整合-Spring-Cache" class="headerlink" title="三、整合 Spring Cache"></a>三、整合 Spring Cache</h3><p>我们可以使⽤ Spring cache 解决上⾯遇到的两个问题，Spring cache 通过注解的⽅式来操作缓存，⼀定程度上减少了程序员缓存操作代码编写量。注解添加和移除都很⽅便，不与业务代码耦合，容易维护。</p><p>第⼀步：pom.xml 添加 Spring Boot 的 jar 依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第⼆步：添加⼊⼝启动类 @EnableCaching 注解开启 Caching</p><p>在 Spring Boot 中通过@EnableCaching 注解⾃动化配置合适的缓存管理器（CacheManager），SpringBoot 根据下⾯的顺序去侦测缓存提供者，也就是说 Spring Cache ⽀持下⾯的这些缓存框架：</p><ul><li><p>Generic</p></li><li><p>JCache (JSR-107) (EhCache 3, Hazelcast, Infinispan, and others)</p></li><li><p>EhCache 2.x</p></li><li><p>Hazelcast</p></li><li><p>Infinispan</p></li><li><p>Couchbase</p></li><li><p>Redis</p></li><li><p>Caffeine</p></li><li><p>Simple</p></li></ul><h3 id="四、在-ArticleController-类上实现一个简单的例子"><a href="#四、在-ArticleController-类上实现一个简单的例子" class="headerlink" title="四、在 ArticleController 类上实现一个简单的例子"></a>四、在 ArticleController 类上实现一个简单的例子</h3><p>第⼀次访问⾛数据库，第⼆次访问就⾛缓存了, 可以⾃⼰打⽇志试⼀下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span> <span class="token string">"/article/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span>  <span class="token class-name">AjaxResponse</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使⽤ redis 缓存，被缓存的对象（函数返回值）有⼏个⾮常需要注意的点：</p><ol><li><p>必须实现⽆参的构造函数</p></li><li><p>需要实现 Serializable 接⼝和定义 serialVersionUID （因为缓存需要使⽤ JDK 的⽅式序列化和反序列化）。</p></li></ol><h3 id="五、更改-Redis-缓存的序列化方式"><a href="#五、更改-Redis-缓存的序列化方式" class="headerlink" title="五、更改 Redis 缓存的序列化方式"></a>五、更改 Redis 缓存的序列化方式</h3><p>让缓存使⽤ JDK 默认的序列化和反序列化⽅式⾮常不友好，我们可以修改为使⽤ JSON 序列化与反序列化的⽅式，可读性更强，体积更⼩，速度更快。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这个函数是上⼀节的内容</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>                     objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重点在这四⾏代码</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//本节的重点配置，让Redis缓存的序列化⽅式使⽤</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//不在使⽤JDK默认的序列化⽅式</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">RedisCacheWriter</span> redisCacheWriter <span class="token operator">=</span> <span class="token class-name">RedisCacheWriter</span><span class="token punctuation">.</span><span class="token function">nonLockingRedisCacheWriter</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">RedisCacheConfiguration</span> redisCacheConfiguration <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span>redisCacheWriter<span class="token punctuation">,</span> redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步任务与定时任务</title>
      <link href="/2022/05/01/yi-bu-ren-wu-yu-ding-shi-ren-wu/"/>
      <url>/2022/05/01/yi-bu-ren-wu-yu-ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="异步任务与定时任务"><a href="#异步任务与定时任务" class="headerlink" title="异步任务与定时任务"></a>异步任务与定时任务</h1><h2 id="1-实现-Async-异步任务"><a href="#1-实现-Async-异步任务" class="headerlink" title="1. 实现 Async 异步任务"></a>1. 实现 Async 异步任务</h2><h3 id="⼀、环境准备"><a href="#⼀、环境准备" class="headerlink" title="⼀、环境准备"></a>⼀、环境准备</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/HkuXGu.png"></p><p>在 Spring Boot ⼊⼝类上配置 @EnableAsync 注解开启异步处理。</p><p>创建任务抽象类 AbstractTask，并分别配置三个任务⽅法 doTaskOne()，doTaskTwo()，doTaskThree()。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始做任务⼀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务⼀，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始做任务⼆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务⼆，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始做任务三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务三，耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、同步调⽤"><a href="#⼆、同步调⽤" class="headerlink" title="⼆、同步调⽤"></a>⼆、同步调⽤</h3><p>下⾯通过⼀个简单示例来直观的理解什么是同步调⽤：</p><ul><li>定义 Task 类，继承 AbstractTask，三个处理函数分别模拟三个执⾏任务的操作，操作消耗时间随机取（10 秒内）。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<strong>单元测试</strong>⽤例中，注⼊ SyncTask 对象，并在测试⽤例中执⾏ doTaskOne()，doTaskTwo()， doTaskThree() 三个⽅法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SyncTaskTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">SyncTask</span> syncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSyncTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        syncTask<span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        syncTask<span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        syncTask<span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执⾏单元测试，可以看到类似如下输出：</li></ul><p>开始做任务⼀ 完成任务⼀，耗时：6720 毫秒 开始做任务⼆ 完成任务⼆，耗时：6604 毫秒 开始做任务三 完成任务三，耗时：9448 毫秒</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/tyjy5t.png"></p><p>任务⼀、任务⼆、任务三顺序的执⾏完了，换⾔之 doTaskOne()，doTaskTwo()，doTaskThree() 三个⽅法按调⽤顺序的先后执⾏完成。</p><h3 id="三、异步调⽤"><a href="#三、异步调⽤" class="headerlink" title="三、异步调⽤"></a>三、异步调⽤</h3><p>上述的<strong>同步调⽤</strong>虽然顺利的执⾏完了三个任务，但是可以看到<strong>执⾏时间⽐较⻓</strong>，若这三个任务本身之间<strong>不存在依赖关系</strong>，可以<strong>并发执⾏</strong>的话，同步调⽤在<strong>执⾏效率</strong>⽅⾯就⽐较差，可以考虑通过<strong>异步调⽤</strong>的⽅式来 并发执⾏。</p><ul><li><p>在 Application 启动类上⾯加上@EnableAsync</p></li><li><p>创建 AsyncTask 类，分别在⽅法上配置 @Async 注解，将原来的<strong>同步⽅法</strong>变为<strong>异步⽅法</strong>。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>单元测试</strong>⽤例中，注⼊ AsyncTask 对象，并在测试⽤例中执⾏ doTaskOne()，doTaskTwo()，doTaskThree() 三个⽅法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AsyncTaskTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncTask</span> asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyncTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncTask<span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执⾏其他代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执⾏单元测试，可以看到类似如下输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">开始做任务三开始做任务⼀开始做任务⼆<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果反复执⾏单元测试，可能会遇到各种不同的结果，⽐如：</p><ol><li><p>没有任何任务相关的输出</p></li><li><p>有部分任务相关的输出</p></li><li><p>乱序的任务相关的输出</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/L9U836.png"></p><p>原因是⽬前 doTaskOne()，doTaskTwo()，doTaskThree() 这三个⽅法已经异步并发执⾏了。主程序在<strong>异步调⽤</strong>之后，主程序并不会理会这三个函数是否执⾏完成了，由于没有其他需要执⾏的内容，所以程序就<strong>⾃动结束</strong>了，导致了任务<strong>不完整</strong>或是<strong>没有输出</strong>相关内容的情况。</p><blockquote><p>注意：@Async 所修饰的函数不要定义为 static 类型，这样异步调⽤不会⽣效。</p></blockquote><h3 id="四、-异步回调"><a href="#四、-异步回调" class="headerlink" title="四、 异步回调"></a>四、 异步回调</h3><p>为了让 doTaskOne()，doTaskTwo()，doTaskThree() 能正常结束，假设我们需要统计⼀下三个任务<strong>并发执⾏</strong>共耗时多少，这就需要等到上述三个函数都完成动⽤之后记录时间，并计算结果。</p><p>那么我们如何判断上述三个<strong>异步调⽤</strong>是否已经执⾏完成呢？我们需要使⽤<code>Future&lt;T&gt;</code>来返回<strong>异步调⽤</strong>的<strong>结果</strong>。</p><ul><li>创建 AsyncCallBackTask 类， 声明 doTaskOneCallback()，doTaskTwoCallback()，doTaskThreeCallback() 三个⽅法，对原有的 三个⽅法进⾏包装。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCallBackTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼀完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼆完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务三完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>单元测试</strong>⽤例中，注⼊ AsyncCallBackTask 对象，并在测试⽤例中执⾏ doTaskOneCallback()，doTaskTwoCallback()，doTaskThreeCallback() 三个⽅法。循环调⽤ Future 的 isDone() ⽅法 等待三个<strong>并发任务</strong>执⾏完成，记录最终执⾏时间。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">AsyncCallBackTask</span> asyncCallBackTask<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyncCallbackTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task1 <span class="token operator">=</span> asyncCallBackTask<span class="token punctuation">.</span><span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task2 <span class="token operator">=</span> asyncCallBackTask<span class="token punctuation">.</span><span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task3 <span class="token operator">=</span> asyncCallBackTask<span class="token punctuation">.</span><span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 三个任务都调⽤完成，退出循环等待</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>task1<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>task2<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>task3<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务全部完成，总耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看都做了哪些改变：</p><ul><li><p>在测试⽤例⼀开始记录开始时间；</p></li><li><p>在调⽤三个异步函数的时候，返回 Future 类型的结果对象；</p></li><li><p>在调⽤完三个异步函数之后，开启⼀个循环，根据返回的 Future 对象来判断三个异步函数是否都结束了。若都结束，就结束循环；若没有都结束，就等 1 秒后再判断。</p></li><li><p>跳出循环之后，根据结束时间 - 开始时间，计算出三个任务并发执⾏的总耗时。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/2vqFvR.png"></p><p>执⾏⼀下上述的单元测试，可以看到如下结果：</p><p>开始做任务三 开始做任务⼀ 开始做任务⼆ 完成任务⼆，耗时：2572 毫秒 完成任务⼀，耗时：7333 毫秒完成任务三，耗时：7647 毫秒 任务全部完成，总耗时：8013 毫秒</p><p>可以看到，通过<strong>异步调⽤</strong>，让任务⼀、任务⼆、任务三<strong>并发执⾏</strong>，有效减少了程序的<strong>运⾏总时间</strong>。</p><h2 id="2-为异步任务规划线程池"><a href="#2-为异步任务规划线程池" class="headerlink" title="2. 为异步任务规划线程池"></a>2. 为异步任务规划线程池</h2><h3 id="一、Spring-Boot-任务线程池"><a href="#一、Spring-Boot-任务线程池" class="headerlink" title="一、Spring Boot 任务线程池"></a>一、Spring Boot 任务线程池</h3><p><strong>线程池的作用</strong></p><ol><li>防止资源占用无限的扩张</li><li>调用过程省去资源的创建和销毀所占用的时间</li></ol><p>在上⼀节中，我们的⼀个异步任务打开了⼀个线程，完成后销毁。在⾼并发环境下，不断的分配新资源，可能导致系统资源耗尽。所以为了避免这个问题，我们为异步任务规划⼀个线程池。当然，如果没有配置线程池的话，springboot 会⾃动配置⼀个 ThreadPoolTaskExecutor 线程池到 bean 当中。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 核⼼线程数</span><span class="token key attr-name">spring.task.execution.pool.core-size</span><span class="token punctuation">=</span><span class="token value attr-value">8  </span><span class="token comment"># 最⼤线程数</span><span class="token key attr-name">spring.task.execution.pool.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">16</span><span class="token comment"># 空闲线程存活时间</span><span class="token key attr-name">spring.task.execution.pool.keep-alive</span><span class="token punctuation">=</span><span class="token value attr-value">60s</span><span class="token comment"># 是否允许核⼼线程超时</span><span class="token key attr-name">spring.task.execution.pool.allow-core-thread-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># 线程队列数量</span><span class="token key attr-name">spring.task.execution.pool.queue-capacity</span><span class="token punctuation">=</span><span class="token value attr-value">100</span><span class="token comment"># 线程关闭等待</span><span class="token key attr-name">spring.task.execution.shutdown.await-termination</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">spring.task.execution.shutdown.await-termination-period</span><span class="token punctuation">=</span><span class="token comment"># 线程名称前缀</span><span class="token key attr-name">spring.task.execution.thread-name-prefix</span><span class="token punctuation">=</span><span class="token value attr-value">task-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、⾃定义线程池"><a href="#⼆、⾃定义线程池" class="headerlink" title="⼆、⾃定义线程池"></a>⼆、⾃定义线程池</h3><p>有的时候，我们希望将系统内的⼀类任务放到⼀个线程池，另⼀类任务放到另外⼀个线程池，所以使⽤ Spring Boot ⾃带的任务线程池就捉襟⻅肘了。下⾯介绍⾃定义线程池的⽅法。</p><p>创建⼀个<strong>线程池配置类</strong>TaskConfiguration ，并配置⼀个<strong>任务线程池对象</strong>taskExecutor。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">taskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"taskExecutor-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/qsyDx7.png"></p><p>上⾯我们通过使⽤ ThreadPoolTaskExecutor 创建了⼀个 线程池，同时设置了以下这些参数：</p><table><thead><tr><th>线程池属性</th><th>属性的作用</th><th>上下文的设置初始值</th></tr></thead><tbody><tr><td>核⼼线程数 CorePoolSize</td><td>线程池创建时候初始化的线程</td><td>10</td></tr><tr><td>最⼤线程数 MaxPoolSize</td><td>线程池最大的线程数，只有在缓冲队列满了之后，才会利请超过核心线程数的线程</td><td>20</td></tr><tr><td>缓冲任务队列 QueueCapacity</td><td>用来缓冲执行任务的队列</td><td>200</td></tr><tr><td>允许线程的空闲时间 KeepAliveSeconds</td><td>超过了核心线程之外的线程，在空闲时间到达之后，没活干的线程会被销毀</td><td>60 秒</td></tr><tr><td>线程池名的前缀 ThreadNamePrefix</td><td>可以用于定位处理任务所在的线程池</td><td>taskExecutor-</td></tr><tr><td>线程池对任务的 Reject 策略 RejectedExecutionHandler</td><td>当线程池运行饱和，或者线程池处于 shutdown 临界状态时，用来拒绝一个任务的执行</td><td>CallerRunsPolicy</td></tr></tbody></table><p>Reject 策略预定义有四种：</p><ul><li><p>AbortPolicy，⽤于被拒绝任务的处理程序，它将抛出 RejectedExecutionException。</p></li><li><p>CallerRunsPolicy，⽤于被拒绝任务的处理程序，它直接在 execute ⽅法的调⽤线程中运⾏被拒绝的任务。</p></li><li><p>DiscardOldestPolicy，⽤于被拒绝任务的处理程序，它放弃最旧的未处理请求，然后重试 execute。</p></li><li><p>DiscardPolicy，⽤于被拒绝任务的处理程序，默认情况下它将丢弃被拒绝的任务。</p></li></ul><p>创建 AsyncExecutorTask 类，三个任务的配置和 AsyncTask ⼀样，不同的是 @Async 注解需要指定前⾯配置的<strong>线程池的名称</strong>taskExecutor。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncExecutorTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务⼀，当前线程："</span> <span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼀完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务⼆，当前线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务⼆完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doTaskThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务三，当前线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"任务三完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>单元测试</strong>⽤例中，注⼊ AsyncExecutorTask 对象，并在测试⽤例中执⾏ doTaskOne()，doTaskTwo()，doTaskThree() 三个⽅法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncExecutorTaskTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncExecutorTask</span> task<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyncExecutorTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        task<span class="token punctuation">.</span><span class="token function">doTaskOneCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">doTaskTwoCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">doTaskThreeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器推送技术</title>
      <link href="/2022/04/28/fu-wu-qi-tui-song-ji-zhu/"/>
      <url>/2022/04/28/fu-wu-qi-tui-song-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器推送技术"><a href="#服务器推送技术" class="headerlink" title="服务器推送技术"></a>服务器推送技术</h1><h2 id="1-主流服务器推送技术说明"><a href="#1-主流服务器推送技术说明" class="headerlink" title="1. 主流服务器推送技术说明"></a>1. 主流服务器推送技术说明</h2><h3 id="⼀、需求与背景"><a href="#⼀、需求与背景" class="headerlink" title="⼀、需求与背景"></a>⼀、需求与背景</h3><p>若⼲年前，所有的请求都是由浏览器端发起，浏览器本身并没有接受请求的能⼒。所以⼀些特殊需求都是⽤ ajax 轮询的⽅式来实现的。⽐如：</p><ul><li>股价展示页面实时的获取股价更新</li><li>赛事的文字直播，实时更新赛况</li><li>通过页面启动一个任务，前媏想知道任务后台的实时运行状态</li></ul><p>通常的做法就是需要以较⼩的间隔，频繁的向服务器建⽴ http 连接询问任务状态的更新，然后刷新⻚⾯显示状态。但这样做的后果就是浪费⼤量流量，对服务端造成了⾮常⼤的压⼒。</p><h3 id="⼆、服务端推送常⽤技术"><a href="#⼆、服务端推送常⽤技术" class="headerlink" title="⼆、服务端推送常⽤技术"></a>⼆、服务端推送常⽤技术</h3><p>在 html5 被⼴泛推⼴之后，我们可以使⽤服务端主动推送数据，浏览器接收数据的⽅式来解决上⾯提到的问题。下⾯我们就为⼤家介绍两种服务端数据推送技术。</p><h4 id="全双⼯通信-WebSocket"><a href="#全双⼯通信-WebSocket" class="headerlink" title="全双⼯通信:WebSocket"></a>全双⼯通信:WebSocket</h4><p>全双⼯就是双向通信。如果说 http 协议是“对讲机”之间的通话（你⼀句我⼀句，有来有回），那 websocket 就是移动电话(可以随时发送信息与接收信息，就是全双⼯)。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_13-48-35.png" alt="图片描述"></p><p>本质上是⼀个额外的 tcp 连接，建⽴和关闭时握⼿使⽤ http 协议，其他数据传输不使⽤ http 协议 ，更加复杂⼀些，⽐较适⽤于需要进⾏复杂双向实时数据通讯的场景。在 web ⽹⻚上⾯的客服、聊天室⼀般都是使⽤ WebSocket 协议来开发的。</p><h4 id="服务端主动推送-SSE-Server-Send-Event"><a href="#服务端主动推送-SSE-Server-Send-Event" class="headerlink" title="服务端主动推送:SSE (Server Send Event)"></a>服务端主动推送:SSE (Server Send Event)</h4><p>html5 新标准，⽤来从服务端实时推送数据到浏览器端， 直接建⽴在当前 http 连接上，本质上是保持⼀个 http ⻓连接，轻量协议 。客户端发送⼀个请求到服务端 ，服务端保持这个请求连接直到⼀个新的消息准备好，将消息返回⾄客户端。除⾮主动关闭，这个连接会⼀直保持。</p><ul><li>建⽴连接</li><li>服务端 -&gt; 浏览器(连接保持）</li><li>关闭连接</li></ul><p>SSE 的⼀⼤特⾊就是<strong>重复利⽤ 1 个连接来接收服务端发送的消息</strong>（⼜称 event），从⽽避免不断轮询请求建⽴连接，造成服务资源紧张。</p><h3 id="三、websocket-与-SSE-⽐较"><a href="#三、websocket-与-SSE-⽐较" class="headerlink" title="三、websocket 与 SSE ⽐较"></a>三、websocket 与 SSE ⽐较</h3><table><thead><tr><th>1</th><th>是否基于新协议</th><th>是否双向通信</th><th>是否支持跨域</th></tr></thead><tbody><tr><td>SSE</td><td>否（Http）</td><td>否（单向）</td><td>否（Firefox ⽀持跨域）</td></tr><tr><td>WebSocket</td><td>是（ws）</td><td>是</td><td>是</td></tr></tbody></table><p><strong>但是 IE 和 Edge 浏览器不⽀持 SSE，所以 SSE ⽬前的应⽤场景⽐较少。</strong> 虽然</p><p>websocket 在很多⽐较旧的版本浏览器上⾯也不兼容，但是总体上⽐ SSE 要好不少。另外还有⼀些开源的 JS 前端产品，如 <a href="https://github.com/sockjs/sockjs-client"> SockJS</a>，<a href="https://socket.io/"> Socket.IO</a>，在浏览器</p><p>端提供了更好的 websocket 前端 js 编程体验，与浏览器有更好的兼容性。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-03-41.png" alt="图片描述"></p><h2 id="2-服务端推送事件-SSE"><a href="#2-服务端推送事件-SSE" class="headerlink" title="2. 服务端推送事件 SSE"></a>2. 服务端推送事件 SSE</h2><h3 id="⼀、模拟⽹络⽀付场景"><a href="#⼀、模拟⽹络⽀付场景" class="headerlink" title="⼀、模拟⽹络⽀付场景"></a>⼀、模拟⽹络⽀付场景</h3><p>⼤家应该都⽤过⽀付系统，⽐如淘宝买⼀个产品之后进⾏扫码⽀付。如果结</p><p>合 SSE，该如何实现这个过 程？</p><ol><li><p>⽤户扫码向⽀付系统（⽀付宝）进⾏⽀付</p></li><li><p>⽀付完成之后，告知商户系统（淘宝卖家系统）我已经发起⽀付了（建⽴ SSE 连接）</p></li><li><p>⽀付系统(⽀付宝)告诉商户系统(淘宝卖家系统)，这个⽤户确实⽀付成功了</p></li><li><p>商户系统(淘宝卖家系统)向⽤户发送消息：你已经⽀付成功，跳转到⽀付成功⻚⾯。（<strong>通过 SSE 连接，由服务器端告知⽤户客户端浏览器</strong>）</p></li></ol><p><strong>注意：在返回最终⽀付结果的操作，实现了服务端向客户端的事件推送，以</strong></p><p><strong>使⽤ SSE 来实现</strong></p><h3 id="⼆、SSE-起步练习"><a href="#⼆、SSE-起步练习" class="headerlink" title="⼆、SSE 起步练习"></a>⼆、SSE 起步练习</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyEmitter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SseEmitter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DecimalFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/*** @description: SSE练习* @author: syhan* @date: 2022-04-18**/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SseController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/server/info"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/event-stream;charset=UTF-8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseBodyEmitter</span> <span class="token function">pushMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">SseEmitter</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SseEmitter</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"emitter push message ....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            emitter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_EVENT_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> emitter<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/server/data"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/event-stream;charset=UTF-8"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">ResponseBodyEmitter</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">SseEmitter</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SseEmitter</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">DecimalFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">".00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> param <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            emitter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"⽩菜价格⾏情:"</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">"元"</span> <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_EVENT_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> emitter<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于服务器端向浏览器发送的数据，浏览器端需要在 JavaScript 中使⽤ EventSource 对象来进⾏处理。EventSource 使⽤的是标准的事件监听器⽅式，只需要在对象上添加相应的事件处理⽅法即可。EventSource 提供了三个标准事件</p><table><thead><tr><th>事件名称</th><th>事件触发说明</th><th>事件处理方法</th></tr></thead><tbody><tr><td>open</td><td>当服务器向浏览器第⼀次发送数据</td><td>onopen</td></tr><tr><td>message</td><td>当收到服务器发送的消息时产⽣</td><td>onmessage</td></tr><tr><td>error</td><td>当出现异常时产⽣</td><td>onerror</td></tr></tbody></table><p>除了使⽤标准的事件处理⽅法，还可以使⽤<strong>addEventListener</strong>⽅法对事件进⾏监听。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> es <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token char">'事件源名称'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">//与事件源建⽴连接</span><span class="token comment">//标准事件处理⽅法,还有onopen、onerror</span>es<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//可以监听⾃定义的事件名称</span>es<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>'⾃定义事件名称'<span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>public/sse-demo1.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>sse-demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg_from_server<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>window<span class="token punctuation">.</span>EventSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/server/info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>          <span class="token string">"open"</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接打开."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          s <span class="token operator">+=</span> e<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>          document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"msg_from_server"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>          <span class="token string">"error"</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>readyState <span class="token operator">===</span> EventSource<span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"没有sse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-33-54.png" alt="运行效果"></p><p>public/sse-demo2.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>sse-demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">//需要判断浏览器⽀不⽀持，可以去w3c进⾏查看</span>      <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/server/data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      source<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏效果：1 秒后出现服务端推送的数据</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-50-19.png" alt="运行效果"></p><h2 id="3-双向实时通信-websocket"><a href="#3-双向实时通信-websocket" class="headerlink" title="3. 双向实时通信 websocket"></a>3. 双向实时通信 websocket</h2><h3 id="⼀、整合-websocket"><a href="#⼀、整合-websocket" class="headerlink" title="⼀、整合 websocket"></a>⼀、整合 websocket</h3><ul><li>添加依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引⼊websocket依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写配置类，开启 websocket 功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServerEndpointExporter</span> <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⼆、兼容-HTTPS-协议"><a href="#⼆、兼容-HTTPS-协议" class="headerlink" title="⼆、兼容 HTTPS 协议"></a>⼆、兼容 HTTPS 协议</h3><ul><li>WebSocket 的 ws 协议是基于 HTTP 协议实现的</li><li>WebSocket 的 wss 协议是基于 HTTPS 协议实现的</li></ul><p>⼀旦你的项⽬⾥⾯使⽤了 https 协议，websocket 就要使⽤ wss 协议才可以。</p><p>在 TomcatCustomizer 配置的基础之上加上如下的代码，就可以⽀持 wss 协议。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TomcatContextCustomizer</span> <span class="token function">tomcatContextCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatContextCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WsSci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、WebSocket-编程基础"><a href="#三、WebSocket-编程基础" class="headerlink" title="三、WebSocket 编程基础"></a>三、WebSocket 编程基础</h3><h4 id="3-1-连接的建⽴"><a href="#3-1-连接的建⽴" class="headerlink" title="3.1 连接的建⽴"></a>3.1 连接的建⽴</h4><p>前端 js 向后端发送 wss 连接建⽴请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"wss://localhost:8888/ws/asset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SpringBoot 服务端 WebSocket 服务接收类定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/ws/asset"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-全双工数据交互"><a href="#3-2-全双工数据交互" class="headerlink" title="3.2 全双工数据交互"></a>3.2 全双工数据交互</h4><p>前端后端都有</p><ul><li><p>onopen 事件监听，处理连接建⽴事件</p></li><li><p>onmessage 事件监听，处理对⽅发过来的消息数据</p></li><li><p>onclose 事件监听，处理连接关闭</p></li><li><p>onerror 事件监听，处理交互过程中的异常</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_14-58-17.png" alt="图片描述"></p><h4 id="3-3-数据发送"><a href="#3-3-数据发送" class="headerlink" title="3.3 数据发送"></a>3.3 数据发送</h4><h5 id="浏览器与服务器交换数据"><a href="#浏览器与服务器交换数据" class="headerlink" title="浏览器与服务器交换数据"></a>浏览器与服务器交换数据</h5><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-00-07.png" alt="图片描述"></p><p>前端 JS</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后端 Java，向某⼀个 javax.websocket.Session ⽤户发送消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送消息，每次浏览器刷新，session会发⽣变化。* @param session session* @param message 消息*/</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>    session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>"<span class="token operator">%</span>s <span class="token punctuation">(</span><span class="token class-name">From</span> <span class="token class-name">Server</span>，<span class="token class-name">Session</span> ID<span class="token operator">=</span><span class="token operator">%</span>s<span class="token punctuation">)</span>"<span class="token punctuation">,</span>message<span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="⼀个⽤户向其他⽤户群发"><a href="#⼀个⽤户向其他⽤户群发" class="headerlink" title="⼀个⽤户向其他⽤户群发"></a>⼀个⽤户向其他⽤户群发</h5><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-04-47.png" alt="图片描述"></p><p>服务器向所有在线的 javax.websocket.Session ⽤户发送消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 群发消息* @param message 消息*/</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">broadCastInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Session</span> session <span class="token operator">:</span> <span class="token class-name">SessionSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、websocket-实现简单聊天"><a href="#四、websocket-实现简单聊天" class="headerlink" title="四、websocket 实现简单聊天"></a>四、websocket 实现简单聊天</h3><p>WebSocketServer 核⼼代码</p><ol><li><p>@ServerEndpoint(value = “/ws/asset”)表示 websocket 的接⼝服务地址</p></li><li><p>@OnOpen 注解的⽅法，为连接建⽴成功时调⽤的⽅法</p></li><li><p>@OnClose 注解的⽅法，为连接关闭调⽤的⽅法</p></li><li><p>@OnMessage 注解的⽅法，为收到客户端消息后调⽤的⽅法</p></li><li><p>@OnError 注解的⽅法，为出现异常时调⽤的⽅法</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>syhan<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">PathParam</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerEndpoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token comment">/*** @author syhan* @description: webSocket服务层，连接webSocket的时候，路径中传⼀个参数值id，⽤ 来区分不同⻚⾯推送不同的数据* @date 2022-04-18*/</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/socket/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 静态变量，⽤来记录当前在线连接数，线程安全     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> onlineCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/**     * concurrent包的线程安全Set，⽤来存放每个客户端对应的MyWebSocket对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">></span></span>webSocketSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 与某个客户端的连接会话，需要通过它来给客户端发送数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span>    <span class="token comment">/**     * 传过来的id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 连接建⽴成功调⽤的⽅法     */</span>      <span class="token annotation punctuation">@OnOpen</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> param<span class="token punctuation">,</span> <span class="token class-name">Session</span>session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//接收到发送消息的⼈员编号</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> param<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>        <span class="token comment">//加⼊set中</span>        webSocketSet<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在线数加1</span>        <span class="token function">addOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"有新连接加⼊！当前在线⼈数为"</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"-连接已建⽴-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 连接关闭调⽤的⽅法     */</span>    <span class="token annotation punctuation">@OnClose</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从set中删除</span>            webSocketSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在线数减1</span>            <span class="token function">subOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"有⼀连接关闭！当前在线⼈数为"</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 收到客户端消息后调⽤的⽅法     *     * @param message 客户端发送过来的消息     */</span>    <span class="token annotation punctuation">@OnMessage</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"来⾃客户端的消息:"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 发⽣错误时调⽤     **/</span>    <span class="token annotation punctuation">@OnError</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发⽣错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        error<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发⽣错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 给指定的⼈发送消息     *     * @param id     id     * @param message message     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendToMessageById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>webSocketSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            webSocketSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"webSocketSet中没有此key，不推送消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 群发⾃定义消息    */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">broadcastInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebSocketServer</span> item <span class="token operator">:</span> webSocketSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token class-name">Session</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> session<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> onlineCount<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebSocketServer</span><span class="token punctuation">.</span>onlineCount<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">subOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebSocketServer</span><span class="token punctuation">.</span>onlineCount<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码，public/websocket.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>websocket⻚⾯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>              输⼊昵称                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span>            <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span>            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输⼊昵称<span class="token punctuation">"</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>open<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>连接websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>             输⼊内容                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span>            <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span>            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输⼊内容<span class="token punctuation">"</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nickname <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"昵称不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ws://localhost:8888/websocket?nickname=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nickname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已经连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket出现异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运⾏效果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-19-11.png" alt="运行效果"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-28_15-19-58.png" alt="运行效果"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件发送的整合与使用</title>
      <link href="/2022/04/27/you-jian-fa-song-de-zheng-he-yu-shi-yong/"/>
      <url>/2022/04/27/you-jian-fa-song-de-zheng-he-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="邮件发送的整合与使用"><a href="#邮件发送的整合与使用" class="headerlink" title="邮件发送的整合与使用"></a>邮件发送的整合与使用</h1><h2 id="1-基础协议及邮件配置整合"><a href="#1-基础协议及邮件配置整合" class="headerlink" title="1. 基础协议及邮件配置整合"></a>1. 基础协议及邮件配置整合</h2><h3 id="一、名词概念解释"><a href="#一、名词概念解释" class="headerlink" title="一、名词概念解释"></a>一、名词概念解释</h3><ul><li><p>什么是 POP3、SMTP 和 IMAP？</p><p>简单的说：POP3 和 IMAP 是⽤来从服务器上下载邮件的。SMTP 适⽤于发送或中转信件时找到下⼀个⽬的地。所以我们发送邮件应该使⽤ SMTP 协议。</p></li></ul><p><a href="http://help.mail.163.com/faqDetail.do?code=d7a5dc8471cd0c0e8b4b8f4f8e49998b374173cfe9171305fa1ce630d7f67ac2f56104105f35a05d">IMAP 和 POP3 有什么区别？</a></p><ul><li><p>什么是免费邮箱客户端授权码功能？</p><p>邮箱客户端授权码是为了避免您的邮箱密码被盗后，盗号者通过客户端登录邮箱⽽独特设计的安防功能。可以理解为客户端授权码为邮件发送的⼆次密码。</p></li></ul><h3 id="⼆、-整合邮件发送功能"><a href="#⼆、-整合邮件发送功能" class="headerlink" title="⼆、 整合邮件发送功能"></a>⼆、 整合邮件发送功能</h3><h4 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-邮箱配置"><a href="#2-2-邮箱配置" class="headerlink" title="2.2 邮箱配置"></a>2.2 邮箱配置</h4><p><strong>QQ 系邮箱配置</strong></p><p>官方配置说明：<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=369">参考官方帮助中心</a></p><p>获取客户端授权码：<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=1001256&&id=28">参考官方帮助中心</a></p><p>详细的配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span>    host<span class="token punctuation">:</span> smtp.qq.com <span class="token comment">#发送邮件服务器</span>    username<span class="token punctuation">:</span> xx@qq.com <span class="token comment">#QQ邮箱</span>    password<span class="token punctuation">:</span> xxxxxxxxxxx <span class="token comment">#客户端授权码</span>    protocol<span class="token punctuation">:</span> smtp <span class="token comment">#发送邮件协议</span>    properties.mail.smtp.auth<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.port<span class="token punctuation">:</span> <span class="token number">465</span> <span class="token comment">#端⼝号465或587</span>    properties.mail.display.sendmail<span class="token punctuation">:</span> Javen <span class="token comment">#可以任意</span>    properties.mail.display.sendname<span class="token punctuation">:</span> Spring Boot Guide Email <span class="token comment">#可以任意</span>    properties.mail.smtp.starttls.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.starttls.required<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.ssl.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    default<span class="token punctuation">-</span><span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：开启 SSL 时使⽤<strong>587</strong>端⼝时⽆法连接 QQ 邮件服务器</p></blockquote><p><strong>⽹易系(126/163/yeah)邮箱配置</strong></p><p>网易邮箱客户端授码：<a href="http://help.mail.163.com/faq.do?m=list&categoryID=197">参考官方帮助中心</a></p><p>客户端端口配置说明：<a href="http://mail.163.com/html/110127_imap/index.htm#tab=android">参考官方帮助中心</a></p><p>详细的配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span>    host<span class="token punctuation">:</span> smtp.126.com    username<span class="token punctuation">:</span> xx@126.com    password<span class="token punctuation">:</span> xxxxxxxx    protocol<span class="token punctuation">:</span> smtp    properties.mail.smtp.auth<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.port<span class="token punctuation">:</span> <span class="token number">994</span> <span class="token comment">#465或者994</span>    properties.mail.display.sendmail<span class="token punctuation">:</span> Javen    properties.mail.display.sendname<span class="token punctuation">:</span> Spring Boot Guide Email    properties.mail.smtp.starttls.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.starttls.required<span class="token punctuation">:</span> <span class="token boolean important">true</span>    properties.mail.smtp.ssl.enable<span class="token punctuation">:</span> <span class="token boolean important">true</span>    default<span class="token punctuation">-</span><span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>    from<span class="token punctuation">:</span> xx@126.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别说明:</p><ul><li>126 邮箱 SMTP 服务器地址:smtp.126.com,端⼝号:465 或者 994</li><li>163 邮箱 SMTP 服务器地址:smtp.163.com,端⼝号:465 或者 994</li><li>yeah 邮箱 SMTP 服务器地址:smtp.yeah.net,端⼝号:465 或者 994</li></ul><blockquote><p>有的邮件服务器接受使⽤客户端授权码发邮件，有的邮件服务器接受使⽤邮箱密码来发送邮件，所以 password 的配置不能⼀概⽽论。客户端授权码不⾏，就试试⽤邮箱密码；邮箱密码不⾏，就试试客户 端授权码。</p></blockquote><h3 id="三、发送简单邮件"><a href="#三、发送简单邮件" class="headerlink" title="三、发送简单邮件"></a>三、发送简单邮件</h3><p>这⾥的简单邮件就是指邮件的内容只是普通⽂字的这种邮件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">JavaMailSender</span> mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.mail.username&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fromEmail<span class="token punctuation">;</span>    <span class="token comment">/**     * 发送⽂本邮件     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sendSimpleMail 的三个参数依次是：邮件的发送⽬标，邮件的标题，邮件的内容.</p><p>测试代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span>DEFINED_PORT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailServiceTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">MailService</span> mailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mailService<span class="token punctuation">.</span><span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token string">"16422802@qq.com"</span><span class="token punctuation">,</span>                <span class="token string">"普通⽂本邮件"</span><span class="token punctuation">,</span>                <span class="token string">"普通⽂本邮件内容测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-42-07.png" alt="测试结果"></p><p>附录：QQ 邮箱发邮件设置</p><p>1.开启 SMTP 服务</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-38-49.png" alt="图片描述"></p><p>2.在配置开启 SMTP 之后，会返回给我们⼀个客户端授权码。这个授权码就是上⽂中⽤来发邮件的 password。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-39-36.png" alt="图片描述"></p><h2 id="2-发送-html-和基于模板的邮件"><a href="#2-发送-html-和基于模板的邮件" class="headerlink" title="2. 发送 html 和基于模板的邮件"></a>2. 发送 html 和基于模板的邮件</h2><h3 id="⼀、发送-html-邮件服务"><a href="#⼀、发送-html-邮件服务" class="headerlink" title="⼀、发送 html 邮件服务"></a>⼀、发送 html 邮件服务</h3><p>sendHtmlMail 函数的第⼀个参数是发送⽬标邮箱，第⼆个参数是邮件标题，第三个参数是邮件的正⽂(html)。</p><ul><li>上⼀节中发送普通的⽂本⽂件邮件，使⽤的是 SimpleMailMessage</li><li>下⽂代码中发送的正⽂是 HTML 的邮件，使⽤的是 MimeMessage</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送html邮件*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注意这⾥使⽤的是MimeMessage</span>    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第⼆个参数是否是html，true表示发送的邮件正⽂是html⽂本</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试⽤例，我们将 HTML 以字符串拼接的⽅式写在 Java 代码⾥⾯，这样对于开发者⽽⾔不太友好。可以 结合 Java 模板引擎，如 Freemarker 来来发送 HTML 邮件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>  mailService<span class="token punctuation">.</span><span class="token function">sendHtmlMail</span><span class="token punctuation">(</span>    <span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span>    <span class="token string">"一封HTML测试邮件"</span><span class="token punctuation">,</span>    <span class="token triple-quoted-string string">"""    &lt;body>    &lt;div style="width:600px;height:400px;margin:auto;background:#bdd8f6;color:#fff;text-align:center;">    &lt;h3>涵的邮件&lt;/h3>    &lt;img src="https://syhan.oss-cn-hangzhou.aliyuncs.com/img/me.png"\040    style="width:100px;height:100px;">    &lt;p>    &lt;a style="text-decoration: none;color: #fff;" href="http://syhan.top" target="_bank">    &lt;strong>我的博客主页&lt;/strong>    &lt;/a>    &lt;/p>    &lt;/div>    &lt;/body>    """</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-46-11.png" alt="测试结果"></p><h3 id="⼆、基于-freemarker-模板的邮件"><a href="#⼆、基于-freemarker-模板的邮件" class="headerlink" title="⼆、基于 freemarker 模板的邮件"></a>⼆、基于 freemarker 模板的邮件</h3><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-47-01.png" alt="图片描述"></p><p>基于 freemarker 模板邮件本质上，还是发送 html 邮件，只不过是有⼀个把模板转换成 html 字符串的过程。</p><ul><li>先添加 freemarker 依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>application.yml 配置 freemarker</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">freemarker</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 缓存配置 开发阶段应该配置为false 因为经常会改</span>  <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .ftl <span class="token comment"># 模版⽂件后缀名</span>  <span class="token key atrule">charset</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># ⽂件编码</span>  <span class="token key atrule">template-loader-path</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Article 实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写模板邮件发送测试代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTemplateMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 添加动态数据，替换模版里面的占位符</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"syhan"</span><span class="token punctuation">,</span> <span class="token string">"今天星期一"</span><span class="token punctuation">,</span> <span class="token string">"内容一"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"syhan"</span><span class="token punctuation">,</span> <span class="token string">"今天下雨天"</span><span class="token punctuation">,</span> <span class="token string">"内容二"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Template</span> template <span class="token operator">=</span> freeMarkerConfigurer<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"freemarker-temp.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将模版文件及数据渲染完成后，转换为html字符串</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"articles"</span><span class="token punctuation">,</span> articles<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> templateHtml <span class="token operator">=</span> <span class="token class-name">FreeMarkerTemplateUtils</span><span class="token punctuation">.</span><span class="token function">processTemplateIntoString</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 发送邮件</span>  mailService<span class="token punctuation">.</span><span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"这是一封freemarker模版的html测试邮件"</span><span class="token punctuation">,</span>templateHtml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>templates ⽬录新建 freemarker-temp.ftl 模板⽂件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>freemarker简单示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>作者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>教程名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">articles</span> <span class="token attr-name">as</span> <span class="token attr-name">article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.author&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;article.content&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试结果：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-49-58.png" alt="测试结果"></p><h2 id="3-发送带附件和内联附件邮件"><a href="#3-发送带附件和内联附件邮件" class="headerlink" title="3. 发送带附件和内联附件邮件"></a>3. 发送带附件和内联附件邮件</h2><h3 id="⼀、发送带附件的邮件"><a href="#⼀、发送带附件的邮件" class="headerlink" title="⼀、发送带附件的邮件"></a>⼀、发送带附件的邮件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送带附件的邮件*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentsMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span>content<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//带附件第⼆个参数true</span>    <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加附件资源</span>    <span class="token class-name">FileSystemResource</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> fileName <span class="token operator">=</span>filePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filePath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送邮件</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sendAttachmentsMail 的第⼀个参数是发送⽬标邮箱，第⼆个参数是邮件的内容，第三个参数是邮件的附件。</p><p>运⾏如下的测试⽤例进⾏测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentsMailTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"/Users/apple/Desktop/me.png"</span><span class="token punctuation">;</span>  mailService<span class="token punctuation">.</span><span class="token function">sendAttachmentsMail</span><span class="token punctuation">(</span>    <span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span>    <span class="token string">"这是一封带附件的邮件--来自syhan"</span><span class="token punctuation">,</span>    <span class="token string">"邮件中有附件，请注意查收!"</span><span class="token punctuation">,</span>    filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-52-41.png" alt="测试结果"></p><h3 id="⼆、发送内联附件的邮件"><a href="#⼆、发送内联附件的邮件" class="headerlink" title="⼆、发送内联附件的邮件"></a>⼆、发送内联附件的邮件</h3><p>所谓的内联附件就是附件⽂件在邮件正⽂内显示，通常是⼀图⽚资源。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-53-41.png" alt="图片描述"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 发送正⽂中有静态资源的邮件*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendResourceMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span><span class="token class-name">String</span> rscPath<span class="token punctuation">,</span> <span class="token class-name">String</span> rscId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>fromEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加内联附件，指定⼀个资源id:rscId</span>    <span class="token class-name">FileSystemResource</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>rscPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span>rscId<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sendResourceMail ⽅法的参数说明：</p><ul><li><p>参数⼀：发送邮件的⽬标邮箱</p></li><li><p>参数⼆：⽂件的标题</p></li><li><p>参数三：邮件的正⽂：html（含图⽚资源 id：rscId）</p></li><li><p>参数四：图⽚资源⽂件本地磁盘路径 res</p></li><li><p>参数五：图⽚资源⽂件的资源 Id：rscId</p></li></ul><p>参数三 HTML ⽂本发现正⽂中包含<code>&lt;img src=cid: rscId&gt;</code>,就会根据参数五 helper.addInline(rscId, res);，找 到参数四对应的资源⽂件 res，并渲染到 HTML ⾥⾯。</p><p>测试⽤例，执⾏之后看结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendResourceMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> rscId <span class="token operator">=</span> <span class="token string">"syhan"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;body>这是有图片的邮件&lt;br/>&lt;img src='cid:"</span> <span class="token operator">+</span> rscId <span class="token operator">+</span> <span class="token string">"'>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> imgPath <span class="token operator">=</span> <span class="token string">"/Users/apple/Desktop/vlog.png"</span><span class="token punctuation">;</span>  mailService<span class="token punctuation">.</span><span class="token function">sendResourceMail</span><span class="token punctuation">(</span>            <span class="token string">"2470752581@qq.com"</span><span class="token punctuation">,</span>            <span class="token string">"这邮件中包含图片"</span><span class="token punctuation">,</span>            content<span class="token punctuation">,</span>            imgPath<span class="token punctuation">,</span>            rscId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_14-57-13.png" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用程序监控管理</title>
      <link href="/2022/04/27/ying-yong-cheng-xu-jian-kong-guan-li/"/>
      <url>/2022/04/27/ying-yong-cheng-xu-jian-kong-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="应用程序监控管理"><a href="#应用程序监控管理" class="headerlink" title="应用程序监控管理"></a>应用程序监控管理</h1><h2 id="1-Actuator-应用监控快速入门"><a href="#1-Actuator-应用监控快速入门" class="headerlink" title="1. Actuator 应用监控快速入门"></a>1. Actuator 应用监控快速入门</h2><h3 id="一、大纲"><a href="#一、大纲" class="headerlink" title="一、大纲"></a>一、大纲</h3><ul><li>Spring Boot Actuator 简介</li><li>Actuator 开启与配置</li><li>常用监控端点说明</li></ul><h3 id="二、Spring-Boot-Actuator-简介"><a href="#二、Spring-Boot-Actuator-简介" class="headerlink" title="二、Spring Boot Actuator 简介"></a>二、Spring Boot Actuator 简介</h3><p>Spring Boot 作为构建微服务节点的方案，一定要提供全面而且细致的监控指标，使微服务更易于管理！微服务不同于单体应用，微服务的每个服务节点都单独部署，独立运行，大型的微服务项目甚至有成百上干个服务节点。这就为我们进行系统监控与运维提出了挑战。为了应对这个挑战，其中最重要的工作之一就是：微服务节点能够合理的暴露服务的相关监控指标，用以对服务进行健康检查、监控管理，从而进行合理的流量规划与安排系统运维工作！</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-19-32.png" alt="图片描述"></p><p>Spring Boot Actuator 模块提供了生产级别的功能，比如健康检查，审计，指标收集，HTTP 跟踪等，帮助我们监控和管理 Spring Boot 应用、Bean 加载情况、环境变量、日志信息、线程信息，JVM 堆信息等。这个模块是一个采集应用内部信息暴露给外部的模块，上述的功能都可以通过 HTTP 和 JMX 访问。</p><p>Actuator 也可以和⼀些外部的应⽤监控系统整合（Prometheus, Graphite, DataDog, Influx, Wavefront, New Relic 等）。这些监控系统提供了出⾊的仪表板，图形，分析和警报，可帮助你通过⼀个统⼀友好的 界⾯，监视和管理你的应⽤程序。</p><h3 id="三、Actuator-开启与配置"><a href="#三、Actuator-开启与配置" class="headerlink" title="三、Actuator 开启与配置"></a>三、Actuator 开启与配置</h3><blockquote><p>新建 boot-actuator 模块</p></blockquote><h4 id="3-1-开启监控"><a href="#3-1-开启监控" class="headerlink" title="3.1 开启监控"></a>3.1 开启监控</h4><p>在 Spring Boot 项目中开启 Actuator 非常简单，只需要引入如下的 maven 坐标即可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-默认开放访问的监控端点"><a href="#3-2-默认开放访问的监控端点" class="headerlink" title="3.2 默认开放访问的监控端点"></a>3.2 默认开放访问的监控端点</h4><p>Spring Boot Actuator 启⽤之后，HTTP 协议下默认开放了两个端点的访问：</p><ul><li>/actuator/health ⽤以监控应⽤状态。返回值是应⽤状态信息，包含四种状态 DOWN(应⽤不正常), OUT_OF_SERVICE(服务不可⽤),UP(状态正常), UNKNOWN(状态未知)。如果服务状态正常，我们访问 http:/host:port/actuator/health 得到如下响应信息：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>  <span class="token string">"status"</span><span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上⾯的响应结果看，该监控端点的监控信息⾮常有限，如果我们想让展示信息更加丰富的话，可以做如下配置。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">management.endpoint.health.show-details</span><span class="token punctuation">=</span><span class="token value attr-value">always</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>/actuator/info ⽤来响应应⽤相关信息，默认为空。可以根据我们⾃⼰的需要，向服务调⽤者暴露相 关信息。如下所示,配置属性可以随意起名，但都要挂在 info 下⾯：</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">info.app-name</span><span class="token punctuation">=</span><span class="token value attr-value">spring-boot-actuator-demo</span><span class="token key attr-name">info.description</span><span class="token punctuation">=</span><span class="token value attr-value">spring-boot-actuator-demo indexs monitor</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-27-38.png"></p><h4 id="3-3-开放端点配置（exposure）"><a href="#3-3-开放端点配置（exposure）" class="headerlink" title="3.3 开放端点配置（exposure）"></a>3.3 开放端点配置（exposure）</h4><p>如果我们希望开放更多的监控端点给服务调⽤者，需要配置：<strong>开放部分监控端点</strong>，端点名称⽤逗号分隔。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## 开放访问的服务端点</span><span class="token key attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token value attr-value">beans,env</span><span class="token comment">## 不暴露对外开放的服务端点</span><span class="token key attr-name">management.endpoints.web.exposure.exclude</span><span class="token punctuation">=</span><span class="token value attr-value">mappings</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>开放所有监控端点:</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token value attr-value">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>星号在 YAML 配置⽂件中中有特殊的含义，所以在 YAML 配置⽂件使⽤星号⼀定要加引号，如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    web<span class="token punctuation">:</span>      exposure<span class="token punctuation">:</span>        include<span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-开启端点配置（enabled）"><a href="#3-4-开启端点配置（enabled）" class="headerlink" title="3.4.开启端点配置（enabled）"></a>3.4.开启端点配置（enabled）</h4><ul><li><p>针对 actuator 提供的服务端点，开启启⽤(enabled)不等于开放访问(include)。</p></li><li><p>绝⼤部分的监控端点是默认开启的（下图中的 Yes），少部分监控端点默认是不开启的，⽐如：shutdown。</p></li><li><p>对于默认不启⽤的监控服务端点，⼀定要先开启(enabled)，开启的配置⽅法如下：</p></li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># shutdown是服务端点名称，可以替换</span><span class="token key attr-name">management.endpoint.shutdown.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、常⽤监控端点说明"><a href="#四、常⽤监控端点说明" class="headerlink" title="四、常⽤监控端点说明"></a>四、常⽤监控端点说明</h3><p>Spring Boot Actuator 监控端点的分类</p><ul><li><p>静态配置类：主要是⼀些静态配置信息，⽐如： Spring Bean 加载信息、yml 或 properties 配置信息、环境变量信息、请求接⼝关系映射信息等；</p></li><li><p>动态指标类：主要⽤于展现程序运⾏期状态，例如内存堆栈信息、请求链信息、健康指标信息等；</p></li><li><p>操作控制类：主要是 shutdown 功能，⽤户可以远程发送 HTTP 请求，从⽽关闭监控功能。</p></li></ul><table><thead><tr><th>ID(监控端点名称)</th><th>描述</th><th>服务是否默认启⽤</th></tr></thead><tbody><tr><td>auditevents</td><td>应⽤程序的审计事件相关信息</td><td>Yes</td></tr><tr><td>beans</td><td>应⽤中所有 Spring Beans 的完整列表</td><td>Yes</td></tr><tr><td>conditions</td><td>(confguration and auto-confgurationclasses)的状态及它们被应用或未被应用的原因</td><td>Yes</td></tr><tr><td>configprops</td><td>@ConfigurationProperties 的集合列表</td><td>Yes</td></tr><tr><td>env</td><td>Spring 的 ConfigurableEnvironment 的属性</td><td>Yes</td></tr><tr><td>flyway</td><td>flyway 数据库迁移路径，如果有的话</td><td>Yes</td></tr><tr><td>liquibase</td><td>Liquibase 数据库迁移路径，如果有的话</td><td>Yes</td></tr><tr><td>metrics</td><td>应⽤的 metrics 指标信息</td><td>Yes</td></tr><tr><td>mappings</td><td>所有@RequestMapping 路径的集合列表</td><td>Yes</td></tr><tr><td>scheduledtasks</td><td>应⽤程序中的计划任务</td><td>Yes</td></tr><tr><td>sessions</td><td>允许从 Spring 会话支持的会话存储中检索和删除(retrieval and deletion)用户会话.使用 Spring Session 对反应性 Web 应用程序的支持时不可用</td><td>Yes</td></tr><tr><td>shutdown</td><td>允许应⽤以优雅的⽅式关闭（默认情况下不启⽤）</td><td>No</td></tr><tr><td>threaddump</td><td>线程名、线程 ID、线程的状态、是否等待锁资源、线程堆栈等信息</td><td>Yes</td></tr><tr><td>httptrace 显示</td><td>HTTP 跟踪信息（默认显示最后 100 个 HTTP 请求-响应交换）</td><td>Yes</td></tr></tbody></table><p>如果使⽤ web 应⽤(Spring MVC, Spring WebFlux, 或者 Jersey)，还可以使⽤以下端点：</p><table><thead><tr><th>ID (监控端点名称)</th><th>描述</th><th>默认启⽤</th></tr></thead><tbody><tr><td>heapdump</td><td>返回⼀个 GZip 压缩的 hprof 堆 dump ⽂件</td><td>Yes</td></tr><tr><td>jolokia</td><td>通过 HTTP 暴露 JMX beans(当 Jolokia 在类路径上时,WebFlux 不可用）</td><td>Yes</td></tr><tr><td>logfile</td><td>返回日志文件内容（如果设置了 logging.file 或 logging。path 展性的话），支持使用 HTTPRange 头接收日志文件内容的部分信息</td><td>Yes</td></tr><tr><td>prometheus</td><td>以可以被 Prometheus 服务器抓取的格式显示 metrics 信息</td><td>Yes</td></tr></tbody></table><h2 id="2-SpringBootAdmin-界面化监控"><a href="#2-SpringBootAdmin-界面化监控" class="headerlink" title="2. SpringBootAdmin 界面化监控"></a>2. SpringBootAdmin 界面化监控</h2><p>在之前的内容中，我们学习了如何使用 Spring Boot Actuator 对单个 Spring Boot 应用进行监控。通过浏览器访问 url 可以各个监控应用端点，可以知道应用的运行状态信息。但是这种方式返回的数据都是 JSON 的格式，各种指标需要单独访问查看。我们迫切希望有一种方式：可以通过方便地通过鼠标点击和友好的 U！界面的展现方式查看应用的各种运行指标。Spring Boot Admin 应运而生！</p><h3 id="⼀、Spring-Boot-Admin-介绍"><a href="#⼀、Spring-Boot-Admin-介绍" class="headerlink" title="⼀、Spring Boot Admin 介绍"></a>⼀、Spring Boot Admin 介绍</h3><ul><li><p>Spring Boot Admin 是⼀个针对 Spring Boot Actuator 的 JSON 数据响应结果进⾏ UI 美化封装的监控⼯具</p></li><li><p>通过 Spring Boot Admin，可以在可视化⻚⾯中浏览所有被监控的 spring-boot 项⽬的 Actuator 运⾏时信息，甚⾄还可以直接修改 logger 的 level</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-48-34.png" alt="图片描述"></p><ul><li>Spring Boot Admin 包括客户端和服务端两个部分，⼀个服务端可以展示多个客户端的监控结果：<ul><li>客户端：<strong>即需要监控的应⽤服务</strong>，需集成 spring-boot-admin-starter-client,通过 HTTP 协议注册到 Spring Boot Admin 服务端,从⽽进⾏集中展示。（也可以结合 Spring Cloud 服务注册中⼼）</li><li>服务端：访问客户端的 Actuator 运⾏时数据，并使⽤ UI 界⾯进⾏展示。<strong>是⼀个独⽴的 Spring Boot 应⽤</strong>,需集成 spring-boot-admin-starter-server</li></ul></li></ul><h3 id="⼆、创建-SpringBoot-Admin-服务端"><a href="#⼆、创建-SpringBoot-Admin-服务端" class="headerlink" title="⼆、创建 SpringBoot Admin 服务端"></a>⼆、创建 SpringBoot Admin 服务端</h3><p>新建⼀个模块：boot-admin ，maven 坐标引⼊</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在项⽬启动类上⾯加上@EnableAdminServer 注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAdminServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootActuatorAdminApplication</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">BootLaunchActuatorAdminApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定访问端⼝</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 <code>http://localhost:8081/</code>，因为⽬前没有任何的客户端应⽤注册上来，所以界⾯上没有相关的展示信息。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-51-46.png"></p><h3 id="三、集成-SpringBoot-Admin-客户端"><a href="#三、集成-SpringBoot-Admin-客户端" class="headerlink" title="三、集成 SpringBoot Admin 客户端"></a>三、集成 SpringBoot Admin 客户端</h3><p>在我们之前的项⽬ boot-actuator ⾥⾯引⼊下⾯的依赖，作为被 SpringBoot Admin 监控的客户端存在。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进⾏ application.yml 配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">boot</span><span class="token punctuation">:</span>    admin<span class="token punctuation">:</span>      client<span class="token punctuation">:</span>        url<span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    health<span class="token punctuation">:</span>      show<span class="token punctuation">-</span><span class="token key atrule">details</span><span class="token punctuation">:</span> always  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    web<span class="token punctuation">:</span>      exposure<span class="token punctuation">:</span>        include<span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>spring.boot.admin.client.url 体现的是服务端的访问地址，也就是监控注册的地址。</p></li><li><p>当客户端注册到 spring boot admin 服务端之后，admin 服务端就会访问客户端应⽤的”/actuator”访问端点信息，因为我们为 boot-launch 配置了⽤户密码的访问权限(上⼀节)，所以需要将⽤户名密码告知服务端，它才能正确的获取”/actuator”访问端点信息。这就是 metadata.user 配置段的作⽤</p></li></ul><p>另外，为了让 Spring Boot Admin 展示的内容更加丰富，我们将所有的服务端点都开放出来。如果不开放，spring boot admin 只能获取健康检查”/health”和“/info”两个默认开放访问的基础信息，也就失去了使⽤ Spring Boot Admin 的意义。</p><p>再次访问 <code>http://localhost:8081/</code> ，这次展示的监控信息内容就很多了：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-54-24.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-27_11-54-58.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-动态路由</title>
      <link href="/2022/04/21/8-dong-tai-lu-you/"/>
      <url>/2022/04/21/8-dong-tai-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><p>在网页中，用户进行多模块或多页面需要进行交互时，从这个页面到另外一个页面都需要通过链接跳转，所以路由就应运而生了。</p><ul><li>实例工厂 getCurrentInstance()</li><li>创建路由函数 createRouter()</li><li>添加路由 router.addRoute()</li><li>路由判断 router.hasRoute()</li><li>获取路由 router.getRoutes()</li><li>移除路由 router.removeRoute()</li></ul><h2 id="2、实例工厂-getCurrentInstance"><a href="#2、实例工厂-getCurrentInstance" class="headerlink" title="2、实例工厂 getCurrentInstance()"></a>2、实例工厂 getCurrentInstance()</h2><p>我们来看看，到底这个实例方法都隐藏着些什么？</p><p>为了测试，在页面给定一个按钮，绑定点击事件，拿到实例化对象的 <code>ctx</code> 上下文对象。</p><p>在 <code>src/views</code> 新建 <code>TestRoute.vue</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toHome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>toHome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toAbout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>toAbout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getCurrentInstance<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> OtherRoute <span class="token keyword">from</span> <span class="token string">'./OtherRoute.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'TestRoute'</span><span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> ctx <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./Home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./About.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        routes<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> removeRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/otherroute'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'OtherRoute'</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> OtherRoute<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> isHasRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> route <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> isRemove <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      route <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$props<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$options<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$refs<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$root<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$router<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$slots<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$store<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$toast<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$watch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token function-variable function">toHome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token function-variable function">toAbout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        click<span class="token punctuation">,</span>        toHome<span class="token punctuation">,</span>        toAbout<span class="token punctuation">,</span>        root<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们点击一下 <code>click</code> 按钮，在浏览器控制台会打印出一个对象：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-51-13.png" alt="图片描述"></p><h4 id="ctx-调用方法"><a href="#ctx-调用方法" class="headerlink" title="ctx 调用方法"></a>ctx 调用方法</h4><p>我们可以通过 <code>ctx</code> 访问三个按钮的事件：</p><ul><li>ctx.click()</li><li>ctx.toHome()</li><li>ctx.toAbout()</li></ul><h4 id="ctx-attrs"><a href="#ctx-attrs" class="headerlink" title="ctx.$attrs"></a>ctx.$attrs</h4><p>$attrs 包含父范围属性绑定和未识别（提取）为组件 <a href="https://v3.vuejs.org/api/options-data.html#props">prop</a> 或<a href="https://v3.vuejs.org/api/options-data.html#emits">自定义事件的事件</a>。当组件没有任何已声明的 prop 或自定义事件时，它实质上包含所有父作用域绑定，在创建高阶组件时很有用。</p><p>$data 组件实例正在观察的数据对象。组件实例代理对其数据对象上属性的访问。</p><ul><li><code>console.log(ctx.$data)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-50-38.png" alt="图片描述"></p><h4 id="ctx-props"><a href="#ctx-props" class="headerlink" title="ctx.$props"></a>ctx.$props</h4><p>$props 表示组件已接收到的当前 <code>props</code> 的对象。组件实例代理访问其 <code>props</code> 对象上的属性。</p><ul><li><code>console.log(ctx.$props)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-50-02.png" alt="图片描述"></p><h4 id="ctx-el"><a href="#ctx-el" class="headerlink" title="ctx.$el"></a>ctx.$el</h4><p>$el 组件实例正在管理的根 <code>DOM</code> 元素。</p><ul><li><code>console.log(ctx.$el)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-49-35.png" alt="图片描述"></p><h4 id="ctx-options"><a href="#ctx-options" class="headerlink" title="ctx.$options"></a>ctx.$options</h4><p>$options 用于当前组件实例的实例化选项。当您要在选项中包括自定义属性时，这很有用。</p><ul><li><code>console.log(ctx.$options)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-49-02.png" alt="图片描述"></p><h4 id="ctx-refs"><a href="#ctx-refs" class="headerlink" title="ctx.$refs"></a>ctx.$refs</h4><p>$refs DOM 元素和组件实例的对象，已向 <a href="https://v3.vuejs.org/guide/component-template-refs.html"><code>ref</code>attribute</a> 注册。</p><ul><li><code>console.log(ctx.$refs)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-47-16.png" alt="图片描述"></p><h4 id="ctx-root"><a href="#ctx-root" class="headerlink" title="ctx.$root"></a>ctx.$root</h4><p>$root 当前组件树的根组件实例。如果当前实例没有父代，则此值为自身。</p><ul><li><code>console.log(ctx.$root)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-46-40.png" alt="图片描述"></p><h4 id="ctx-router"><a href="#ctx-router" class="headerlink" title="ctx.$router"></a>ctx.$router</h4><p>$router 存储路由对象的方法，属性。</p><ul><li><code>console.log(ctx.$router)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-42-57.png" alt="图片描述"></p><h4 id="ctx-slots"><a href="#ctx-slots" class="headerlink" title="ctx.$slots"></a>ctx.$slots</h4><p>$slots 存储插槽对象。</p><ul><li><code>console.log(ctx.$slots)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-42-32.png" alt="图片描述"></p><h4 id="ctx-store"><a href="#ctx-store" class="headerlink" title="ctx.$store"></a>ctx.$store</h4><p>$store 存储 <code>vuex</code> 仓库管理操作方法，属性。</p><ul><li><code>console.log(ctx.$store)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-42-05.png" alt="图片描述"></p><h4 id="ctx-watch"><a href="#ctx-watch" class="headerlink" title="ctx.$watch"></a>ctx.$watch</h4><p>$watch 监听器</p><ul><li><code>console.log(ctx.$watch)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-41-30.png" alt="图片描述"></p><h2 id="3、创建路由函数-createRouter"><a href="#3、创建路由函数-createRouter" class="headerlink" title="3、创建路由函数 createRouter()"></a>3、创建路由函数 createRouter()</h2><p>首先我们在 <code>src/views/TestRoute.vue</code> 引入 <code>createRouter</code>，<code>createHistory</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着我们在 <code>setup</code> 方法定义 <code>routes</code>，并创建路由对象 <code>router</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./Home.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'./About.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        routes    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        click    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们点击 <code>click</code> 按钮，可以看到：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-40-58.png" alt="图片描述"></p><h2 id="4、添加路由-router-addRoute"><a href="#4、添加路由-router-addRoute" class="headerlink" title="4、添加路由 router.addRoute()"></a>4、添加路由 router.addRoute()</h2><p>我们在 <code>src/views</code> 新建 <code>OtherRoute.vue</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是新增的路由<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'OtherRoute'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们在 <code>src/views/TestRoute.vue</code> 导入上面 <code>OtherRoute.vue</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> OtherRoute <span class="token keyword">from</span> <span class="token string">'./OtherRoute.vue'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们给上文提到的 <code>router</code> 对象添加一个 <code>/otherroute</code> 路由，其路由名称为 <code>OtherRoute</code>，对应的组件 <code>OtherRoute.vue</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/otherroute'</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'OtherRoute'</span><span class="token punctuation">,</span>  <span class="token literal-property property">component</span><span class="token operator">:</span> OtherRoute<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、路由判断-router-hasRoute"><a href="#5、路由判断-router-hasRoute" class="headerlink" title="5、路由判断 router.hasRoute()"></a>5、路由判断 router.hasRoute()</h2><p>我们可以使用 <code>hasRoute</code> 方法来判断我们上面添加路由是否成功。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> isHasRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印 <code>isHasRoute</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> isHasRoute<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-40-22.png" alt="图片描述"></p><h2 id="6、获取路由-router-getRoutes"><a href="#6、获取路由-router-getRoutes" class="headerlink" title="6、获取路由 router.getRoutes()"></a>6、获取路由 router.getRoutes()</h2><p>首先我们在 <code>setup()&#123;&#125;</code> 内定义 <code>route</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> route <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印 <code>route</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-39-50.png" alt="图片描述"></p><h2 id="7、移除路由-router-removeRoute"><a href="#7、移除路由-router-removeRoute" class="headerlink" title="7、移除路由 router.removeRoute()"></a>7、移除路由 router.removeRoute()</h2><p>有了添加路由，判断路由，路由获取，当然会有路由移除。</p><ul><li>先移除路由</li><li>判断是否存在</li><li>打印所有路由</li></ul><p>我们在 <code>setup()&#123;&#125;</code> 方法中写下如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> isRemove <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">hasRoute</span><span class="token punctuation">(</span><span class="token string">'OtherRoute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>route <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在 <code>click</code> 方法打印出 <code>isRemove</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'remove route===>'</span><span class="token punctuation">,</span> isRemove<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'router===>'</span><span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_15-38-18.png" alt="图片描述"></p><h2 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h2><p>学习以下几点知识：</p><ul><li>如何拿到实例对象的上下文 <code>ctx</code>。</li><li>使用 <code>createRoute</code> 方法创建路由。</li><li>学会路由的增删改，以及判断路由是否存在。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-异步组件</title>
      <link href="/2022/04/21/7-yi-bu-zu-jian/"/>
      <url>/2022/04/21/7-yi-bu-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h1><p>当我们的项目达到一定的规模时，对于某些组件来说，我们并不希望一开始全部加载，而是需要的时候进行加载；这样的做得目的可以很好的提高用户体验。</p><p>为了实现这个功能，Vue3中为我们提供了一个方法，即defineAsyncComponent，这个方法可以传递两种类型的参数，分别是函数类型和对象类型，接下来我们分别学习。</p><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>defineAsyncComponent() 定义异步加载组件</li><li>defineAsyncComponent() options 配置</li></ul><h2 id="2、传递工厂函数作为参数"><a href="#2、传递工厂函数作为参数" class="headerlink" title="2、传递工厂函数作为参数"></a>2、传递工厂函数作为参数</h2><p><code>defineAsyncComponent</code>方法接收一个工厂函数是它的基本用法，这个工厂函数必须返回一个<code>Promise</code>，<code>Promise</code>的<code>resolve</code>应该返回一个组件。</p><p>新建<code>views/TestAsync.vue</code>，页面用两个组件来呈现，代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script&gt;import LogoImg from &quot;..&#x2F;components&#x2F;LogoImg.vue&quot;;import HelloWorld from &quot;..&#x2F;components&#x2F;HelloWorld.vue&quot;;export default &#123;  name: &quot;TestAnync&quot;,  components: &#123;    LogoImg,    HelloWorld,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>components目录新建<code>LogoImg.vue</code>组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;      &lt;img src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; alt&#x3D;&quot;&quot;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;LogoImg&quot;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>components目录<code>HelloWorld</code>组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;hello&quot;&gt;    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;HelloWorld&quot;,  props: &#123;    msg: String,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置路由和导航，看效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-15-45.png" alt="图片描述"></p><p>现在我们将<code>&lt;hello-world&gt;</code>组件修改为异步组件，修改<code>TestAsync.vue</code>代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; defineAsyncComponent &#125; from &#39;vue&#39;import LogoImg from &#39;..&#x2F;components&#x2F;LogoImg.vue&#39;&#x2F;&#x2F; 修改为异步组件const HelloWorld &#x3D; defineAsyncComponent(() &#x3D;&gt;  import(&#39;..&#x2F;components&#x2F;HelloWorld.vue&#39;),)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了看到效果，将<code>import</code>延迟执行，完整代码</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;import LogoImg from &quot;..&#x2F;components&#x2F;LogoImg.vue&quot;;&#x2F;&#x2F; 定义一个耗时执行的函数，t 表示延迟的时间，callback 表示需要执行的函数，可选const time &#x3D; (t, callback &#x3D; () &#x3D;&gt; &#123;&#125;) &#x3D;&gt; &#123;  return new Promise((resolve) &#x3D;&gt; &#123;    setTimeout(() &#x3D;&gt; &#123;      callback();      resolve();    &#125;, t);  &#125;);&#125;;&#x2F;&#x2F; 定义异步组件，这里这样写是为了查看效果const HelloWorld &#x3D; defineAsyncComponent(() &#x3D;&gt; &#123;  return new Promise((resolve, reject) &#x3D;&gt; &#123;    (async function () &#123;      try &#123;        await time(2000);        const res &#x3D; await import(&quot;..&#x2F;components&#x2F;HelloWorld.vue&quot;);        resolve(res);      &#125; catch (error) &#123;        reject(error);      &#125;    &#125;)();  &#125;);&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/2022-04-19%2010.02.37.gif" alt="GIF描述"></p><p>当2s后才会加载<code>&lt;hello-world&gt;</code>组件。</p><h2 id="3、传递对象类型作为参数"><a href="#3、传递对象类型作为参数" class="headerlink" title="3、传递对象类型作为参数"></a>3、传递对象类型作为参数</h2><p>defineAsyncComponent方法也可以接收一个对象作为参数，该对象中有如下几个参数：</p><ul><li>loader：同工厂函数；</li><li>loadingComponent：加载异步组件时展示的组件；</li><li>errorComponent：加载组件失败时展示的组件；</li><li>delay：显示loadingComponent之前的延迟时间，单位毫秒，默认200毫秒；</li><li>timeout：如果提供了timeout，并且加载组件的时间超过了设定值，将显示错误组件，默认值为Infinity（单位毫秒）；</li><li>suspensible：异步组件可以退出<Suspense>控制，并始终控制自己的加载状态。具体可以<a href="https://v3.cn.vuejs.org/guide/component-dynamic-async.html#%E4%B8%8E-suspense-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">参考文档</a></li><li>onError：一个函数，该函数包含4个参数，分别是error、retry、fail和attempts，这4个参数分别是错误对象、重新加载的函数、加载程序结束的函数、已经重试的次数。</li></ul><p>components目录新建<code>error.vue</code>组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;发生错误！&lt;&#x2F;h1&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;error&quot;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>views新建<code>TestAsync1.vue</code>，使用defineAsyncComponent`方法的对象类型参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;logo-img &#x2F;&gt;  &lt;hello-world msg&#x3D;&quot;Welcome to Your Vue.js App&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;import LogoImg from &quot;..&#x2F;components&#x2F;LogoImg.vue&quot;;import ErrorComponent from &quot;..&#x2F;components&#x2F;error.vue&quot;;&#x2F;&#x2F; 定义一个耗时执行的函数，t 表示延迟的时间， callback 表示需要执行的函数，可选const time &#x3D; (t, callback &#x3D; () &#x3D;&gt; &#123;&#125;) &#x3D;&gt; &#123;  return new Promise((resolve) &#x3D;&gt; &#123;    setTimeout(() &#x3D;&gt; &#123;      callback();      resolve();    &#125;, t);  &#125;);&#125;;&#x2F;&#x2F; 记录加载次数let count &#x3D; 0;const HelloWorld &#x3D; defineAsyncComponent(&#123;  &#x2F;&#x2F; 工厂函数  loader: () &#x3D;&gt; &#123;    return new Promise((resolve, reject) &#x3D;&gt; &#123;      (async function () &#123;        await time(2000);        const res &#x3D; await import(&quot;..&#x2F;components&#x2F;HelloWorld.vue&quot;);        if (++count &lt; 3) &#123;          &#x2F;&#x2F; 前两次加载手动设置加载失败          reject(res);        &#125; else &#123;          &#x2F;&#x2F; 大于3次成功          resolve(res);        &#125;      &#125;)();    &#125;);  &#125;,  errorComponent: ErrorComponent,  delay: 0,  timeout: 1000,  suspensible: false,  onError(retry, fail, attempts) &#123;    &#x2F;&#x2F; 注意，retry&#x2F;fail 就像 promise 的 resolve&#x2F;reject 一样：    &#x2F;&#x2F; 必须调用其中一个才能继续错误处理。    if (attempts &lt; 3) &#123;      &#x2F;&#x2F; 请求发生错误时重试，最多可尝试 3 次      console.log(attempts);      retry();    &#125; else &#123;      fail();    &#125;  &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载组件时前两次会请求错误，只有第三次加载才会成功，如果加载失败则会展示<code>ErrorComponent</code>组件。运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/2022-04-19%2010.18.08.gif" alt="GIF描述"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-传送组件</title>
      <link href="/2022/04/21/6-chuan-song-zu-jian/"/>
      <url>/2022/04/21/6-chuan-song-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="传送组件"><a href="#传送组件" class="headerlink" title="传送组件"></a>传送组件</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><p><code>Vue</code> 鼓励我们将 <code>UI</code> 及其相关行为封装成组件，我们可以将这些组件嵌套在一起以构成应用程序 <code>UI</code> 的树。但是有时候组件模板的一部分在逻辑上是属于该组件的，最好的做法是将该模板的这部分移到 <code>Vue</code> 应用程序外部的 <code>DOM</code> 的其他位置。</p><ul><li>teleport 传送组件</li><li>to 属性</li><li>disabled 属性</li><li>teleport 组件更新</li></ul><h2 id="2、teleport-传送组件"><a href="#2、teleport-传送组件" class="headerlink" title="2、teleport 传送组件"></a>2、teleport 传送组件</h2><p>常见的情况下是在创建一个包含全屏模式的组件。在大多数情况下，我们希望模态框的逻辑存在于组件中，但是模态框的定位很难通过 <code>CSS</code> 来解决，或者需要更改组件的组成部分。</p><p>首先来想一个组件 <code>modal-button</code>，该组件将具有一个 <code>button</code> 元素来触发模态框的打开，以及一个 <code>div</code> 具有的类名的元素 <code>.modal</code>，其中将包含模态框的内容和一个用于自动关闭的按钮。</p><p>在 <code>src/views/</code> 新建 <code>ModalButton.vue</code>，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Open full screen modal!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        I'm a modal!        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'modalButton'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">modalOpen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到一个问题，深度嵌套 <code>div</code> 和 <code>position: absolute</code> 模态框相对定位于父级元素 <code>div</code> 作为参考。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style lang="scss" scoped>.modal</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.modal div</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/views/</code> 新建 <code>tele.vue</code>，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modal-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modal-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> modalButton <span class="token keyword">from</span> <span class="token string">'./ModalButton'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'tele'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      modalButton<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/router/index.js</code> 中添加路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/tele'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'tele'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/tele.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue添加导航</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to&#x3D;&quot;&#x2F;tele&quot;&gt;tele&lt;&#x2F;router-link&gt; |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、to-属性"><a href="#3、to-属性" class="headerlink" title="3、to 属性"></a>3、to 属性</h2><p><code>Teleport</code> 提供了一种干净的方式，允许我们控制在 DOM 中哪个⽗节点下呈现 HTML，而不必污染全局状态或将其拆分为两个组件。</p><p>修改 <code>modal-button</code> 来使用并告诉 <code>Vue</code> “teleport this HTML to the body” 标签。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Open full screen modal!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          I'm a teleported modal! (My parent is "body")          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码，我们看到模态框被移到了 <code>body</code> 中。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-23-01.png" alt="图片描述"></p><h2 id="4、diabled-属性"><a href="#4、diabled-属性" class="headerlink" title="4、diabled 属性"></a>4、diabled 属性</h2><p>给 <code>teleport</code> 组件添加 <code>disabled</code> 属性。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Open full screen modal!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          I'm a teleported modal! (My parent is "body")          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalOpen = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-24-29.png" alt="图片描述"></p><p>使用 <code>disabled</code> 属性，设置为 <code>true</code>，告诉 <code>teleport</code> 传送组件不要将模态框移除到 <code>body</code> 下。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>学习了使用 <code>teleport</code> 组件实现模态框，学习了两大属性：</p><ul><li><code>to</code> 表示将模态框放置在什么位置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-哪些 API 发生了变化</title>
      <link href="/2022/04/21/5-na-xie-api-fa-sheng-liao-bian-hua/"/>
      <url>/2022/04/21/5-na-xie-api-fa-sheng-liao-bian-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="哪些API发生了变化"><a href="#哪些API发生了变化" class="headerlink" title="哪些API发生了变化"></a>哪些API发生了变化</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>全局 api</li><li>自定义指令</li><li>移除过滤</li><li>不再支持 keycode</li><li>动画类名</li></ul><h2 id="2、全局-api-变化"><a href="#2、全局-api-变化" class="headerlink" title="2、全局 api 变化"></a>2、全局 api 变化</h2><p>在 Vue2 非常熟悉的全局组件注册、全局插件注册、全局混入 <code>mixin</code>、全局指令注册，以及组件挂载，原型链上属性，方法定义，都发生了变化。通常我们会在 <code>src/main.js</code> 进行如下全局配置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span> <span class="token comment">// 引入 Vue</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span> <span class="token comment">// 引入 App.vue</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ignoredElements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^app-</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 全局忽略配置</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局注册 install</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局混入</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局组件注册</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局指令注册</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">customProperty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 自定义方法</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 组件挂载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Vue3 中，更多的操作是直接放在实例中，通常我们如下处理：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span> <span class="token comment">// 不再是导出一整个 Vue, 而是导出创建实例的方法</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 vue 实例</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">isCustomElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token operator">=></span> tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'app-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局配置</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局插件注册</span>app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局混入注册</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局组件注册</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token comment">/**/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局指令注册</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span><span class="token function-variable function">customProperty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 定义全局方法，属性</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 挂载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、自定义指令"><a href="#3、自定义指令" class="headerlink" title="3、自定义指令"></a>3、自定义指令</h2><p>在开发过程中，如果遇到需要输入框自动获取焦点，优化浏览器滚动条等比较难以处理的情况，我们就需要自己定义符合开发需求的指令。</p><p>在 <code>Vue 2</code> 中，自定义指令的生命周期如下：</p><p>指令钩子函数会被传入以下参数：</p><ul><li><p><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</p></li><li><p>```<br>binding</p><pre class="line-numbers language-none"><code class="language-none">  ：一个对象，包含以下 property。  - &#96;name&#96;：指令名。  - &#96;value&#96;：指令的绑定值。  - &#96;oldValue&#96;：指令绑定的前一个值，仅在 &#96;update&#96; 和 &#96;componentUpdated&#96; 钩子中可用。无论值是否改变都可用。  - &#96;expression&#96;：字符串形式的指令表达式。  - &#96;arg&#96;：传给指令的参数，可选。  - &#96;modifiers&#96;：一个包含修饰符的对象。- &#96;vnode&#96;：Vue 编译生成的虚拟节点。移步 [VNode API](https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;api&#x2F;#VNode-接口) 来了解更多详情。- &#96;oldVnode&#96;：上一个虚拟节点，仅在 &#96;update&#96; 和 &#96;componentUpdated&#96; 钩子中可用。&#96;&#96;&#96;jsconst MyDirective &#x3D; &#123;  bind(el, binding, vnode, prevVnode) &#123;&#125;,  inserted() &#123;&#125;,  update() &#123;&#125;,  componentUpdated() &#123;&#125;,  unbind() &#123;&#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在 <code>Vue 3</code>中，自定义指令生命周期更加接近于组件的生命周期。</p><p>指令定义对象可以提供多个挂钩函数（所有可选）：</p><ul><li><p><code>beforeMount</code>：在指令首次绑定到元素时以及挂载父组件之前调用。在这里您可以进行一次性设置工作。</p></li><li><p><code>mounted</code>：在安装绑定元素的父组件时调用。</p></li><li><p><code>beforeUpdate</code>：在包含组件的 <code>VNode</code> 更新之前调用</p></li><li><p><code>updated</code>：在包含组件的 <code>VNode</code> 及其子组件的 <code>VNode</code> 更新后调用。</p></li><li><p><code>beforeUnmount</code>：在卸载绑定元素的父组件之前调用</p></li><li><p><code>unmounted</code>：仅当指令从元素取消绑定并且父组件已卸载时，才调用一次。</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MyDirective <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// new</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、全局组件"><a href="#4、全局组件" class="headerlink" title="4、全局组件"></a>4、全局组件</h2><p>components下的HelloWorld.vue组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;hello&quot;&gt;    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;HelloWorld&quot;,  props: &#123;    msg: String,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js全局挂载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> helloWorld <span class="token keyword">from</span> <span class="token string">"./components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 app</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"hello-world"</span><span class="token punctuation">,</span> helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册全局组件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随便找个页面，可以直接使用</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-29-56.png" alt="图片描述"></p><p>效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-30-56.png" alt="图片描述"></p><h2 id="5、自定义拖拽指令"><a href="#5、自定义拖拽指令" class="headerlink" title="5、自定义拖拽指令"></a>5、自定义拖拽指令</h2><p>首先新建 <code>src/views/GlobalApi.vue</code> ，在其中添加一个宽高都为 <code>50px</code> 的 <code>div</code>，注意必须加上定位样式，否则不会生效，代码如下所示：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>global-api<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drag<span class="token punctuation">"</span></span> <span class="token attr-name">v-drag</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"globalApi"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.drag</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> // 必须加上定位样式，否则不会生效  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #2194c5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着新建 <code>src/drag.js</code>，定义一个 <code>drag</code> 对象，在挂载之前，需要监听绑定指令元素鼠标是否按下，获取按下时的起始位置，保存在 <code>disX</code>，<code>disY</code> 中。</p><p>鼠标按下拖动，获取此时移动的位置差 <code>l</code>，<code>t</code>，重新改变元素的位置</p><p>鼠标停止移动，需要将监听鼠标是否抬起，将 <code>onmousemove</code>，<code>onmouseup</code> 移除。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// src/drag.js</span><span class="token keyword">let</span> drag <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取鼠标点击出分别与 div 左边和上边的距离：鼠标位置 div 位置</span>      <span class="token keyword">var</span> disX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> el<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>      <span class="token keyword">var</span> disY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> el<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取移动后 div 的位置：鼠标的位置 -disX/disY</span>        <span class="token keyword">var</span> l <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> disX<span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> disY<span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">// 停止移动</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// new</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> drag<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/main.js</code> 全局注册指令。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> helloWorld <span class="token keyword">from</span> <span class="token string">"./components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> drag <span class="token keyword">from</span> <span class="token string">"./drag"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 app</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"hello-world"</span><span class="token punctuation">,</span> helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册全局组件</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"drag"</span><span class="token punctuation">,</span> drag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注册全局指令</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加路由，导航跳转，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/drag.gif" alt="GIF描述"></p><h2 id="6、移除过滤"><a href="#6、移除过滤" class="headerlink" title="6、移除过滤"></a>6、移除过滤</h2><p>在 <code>Vue 2</code> 允许你自定义过滤器，可被用于一些常见的文本格式化。</p><p>过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong>。</p><p>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 在双花括号中 --></span>    &#123;&#123; message | capitalize &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'filters'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'ken'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">capitalize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是<strong>在 <code>Vue 3</code> 中，过滤器被移除了</strong>，原因有如下：</p><ul><li>过滤器的功能可以很容易地通过方法调用或计算的属性来复制，因此它主要提供语法而不是实用的价值。</li><li>过滤器需要一种自定义的微语法，该语法打破了表达式只是 <code>JavaScript</code> 的假设-这增加了学习和实现成本。</li><li>实际上，它与 JavaScript 自己的按位或运算符（<code>|</code>）冲突，并使表达式解析更加复杂。</li><li>过滤器还会在模板 IDE 支持中增加额外的复杂性（由于它们不是真正的 JavaScript）。</li></ul><h2 id="7、不再支持-keycode"><a href="#7、不再支持-keycode" class="headerlink" title="7、不再支持 keycode"></a>7、不再支持 <code>keycode</code></h2><p>在 <code>Vue 2</code> 中，<code>keyCode</code> 的事件用法<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">已经被废弃了</a>，并可能不会被最新的浏览器支持。</p><p>使用 <code>keyCode</code> attribute 也是允许的：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>有一些按键 (<code>.esc</code> 以及所有的方向键) 在 IE9 中有不同的 <code>key</code> 值, 如果你想支持 IE9，这些内置的别名应该是首选。</p><p>但是在 <code>Vue 3</code> 中，不再支持以下内容：</p><ul><li><p>不再支持使用数字（keyCodes）作为<code>v-on</code>修饰符。</p></li><li><p>去掉 <code>config.keyCodes</code>。</p></li></ul><h2 id="8、动画过渡类名"><a href="#8、动画过渡类名" class="headerlink" title="8、动画过渡类名"></a>8、动画过渡类名</h2><p>首先我们在 <code>src/views</code> 新建 <code>Transition.vue</code>，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bounce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris        facilisis enim libero, at lacinia diam fermentum id. Pellentesque        habitant morbi tristique senectus et netus.      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写JS代码，定义变量控制文字展示隐藏。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      show    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义样式：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">&lt;style lang="scss" scoped>#example </span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #2194c5<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span>  <span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.bounce-enter-active </span><span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in 0.5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bounce-leave-active </span><span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in 0.5s reverse<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> bounce-in</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">50% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>src/router/index.js</code>，创建路由。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/transition'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'transition'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Transition.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在 <code>src/App.vue</code> 引入 <code>router-view</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/transition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>transition<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果自行运行。</p><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>主要学习了如下几点：</p><ul><li>全局 <code>API</code> 注册的变化</li><li>知道如何使用自定义指令，</li><li>Vue3 移除了过滤器，</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-玩转动态指令</title>
      <link href="/2022/04/21/4-wan-zhuan-dong-tai-zhi-ling/"/>
      <url>/2022/04/21/4-wan-zhuan-dong-tai-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转动态指令"><a href="#玩转动态指令" class="headerlink" title="玩转动态指令"></a>玩转动态指令</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><p>Vue 具有模板编译功能，模板编译生成渲染函数。通过执行渲染函数生成最新的虚拟节点，最后根据虚拟节点进行渲染，编译过程中包含对指令的解析 。</p><ul><li>模板插值</li><li>JavaScript 表达式</li><li>动态指令</li><li>动态指令计算</li></ul><h2 id="2、模板插值"><a href="#2、模板插值" class="headerlink" title="2、模板插值"></a>2、模板插值</h2><p>插值，是 <code>Vue.js</code> 数据绑定最基本形式，使用 <code>Mustache</code> 语法，也就是双花括号 <code>&#123;&#123;&#125;&#125;</code>。</p><p>首先在 <code>src/views</code> 中新建 <code>DynamicArguments.vue</code>，引入响应式计算方法 <code>ref</code>，定义变量 <code>msg</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      模板插值      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      &#123;&#123; msg &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"DynamicArguments"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"旅行包都买好了，就差一个时机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      msg<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">input</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>src/router/index.js</code> 注册路由。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/dynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">'../views/DynamicArguments.vue'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在 <code>src/App.vue</code> 添加 <code>router-view</code>，来控制路由跳转。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dynamicArguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>DynamicArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行 <code>npm run serve</code> 之后，效果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-34-06.png" alt="图片描述"></p><p><code>JavaScript</code> 表达式</p><p>目前为止，<code>Vue</code> 是支持 <code>JavaScript</code> 中所有表达式的插值使用的。比如像数组操作，字符串操作等。</p><p>在上面代码的基础上，我们先在 <code>setup</code> 函数中定义两个变量分别为 <code>num</code>、<code>arr</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"旅行包都买好了，就差一个时机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'前端开发'</span><span class="token punctuation">,</span> <span class="token string">'Python100天'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       msg<span class="token punctuation">,</span>       num<span class="token punctuation">,</span>       arr   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模板中进行数值计算，字符串分割，数组元素操作。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>  JavaScript 表达式  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  字符串 split 操作：&#123;&#123; msg.split("，")[0] &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  数值计算：&#123;&#123; num + 1 &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  数组操作：&#123;&#123; arr[0] &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-34-56.png" alt="图片描述"></p><h2 id="3、动态指令"><a href="#3、动态指令" class="headerlink" title="3、动态指令"></a>3、动态指令</h2><p>Vue3 新增了动态指令，简单来说就是我们可以通过定义变量来控制指令的名字，这样可以提高指令操作效率，提高代码可读性。</p><p>动态指令有点类似定义变量：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">'name'</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面这串代码中的 <code>[key]</code> 会被解析成为 <code>name</code></p><h3 id="v-bind-varName-绑定变量"><a href="#v-bind-varName-绑定变量" class="headerlink" title="v-bind:[varName] 绑定变量"></a>v-bind:[varName] 绑定变量</h3><p>在 Vue 中，我们可以使用 <code>v-bind</code> 来绑定属性。</p><p>在 <code>setup</code> 函数中定义一个 <code>a</code> 变量，将 a 变量绑定在 href 属性上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    v-bind: 绑定属性    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mqxu.top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'syhan.top'</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-39-37.png" alt="图片描述"></p><p>我们使用变量来替换 <code>href</code> 属性，在 <code>setup</code> 函数中定义一个 <code>urlKey</code> 变量，然后通过 <code>[urlKey]</code> 解析变量。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    v-bind: 绑定属性    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[urlKey]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mqxu.top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'mqxu.top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> urlKey <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">,</span>        urlKey<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-bind-varName-简写模式"><a href="#v-bind-varName-简写模式" class="headerlink" title="v-bind:[varName] 简写模式"></a>v-bind:[varName] 简写模式</h3><p>在简写模式中，我们可以将 <code>v-bind</code> 去掉，只剩下 <code>:[varName]</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-bind: 简写模式      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[urlKey]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aaa.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'aaa.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> urlKey <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        urlKey<span class="token punctuation">,</span>        a<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-on-handlerEventName-绑定事件名变量"><a href="#v-on-handlerEventName-绑定事件名变量" class="headerlink" title="v-on:[handlerEventName] 绑定事件名变量"></a>v-on:[handlerEventName] 绑定事件名变量</h3><p>我们可以设计一个计数器，在 <code>setup</code> 函数定义一个 <code>num</code> 变量，初始化值为 0，定义方法来操作这个变量。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-on:[handlerEventName] 绑定事件名变量      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increase<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;num&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">,</span>        increase<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，我们也可以使用变量来定义事件名字。在 <code>setup</code> 函数中定义一个点击事件名字。代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-on:[handlerEventName] 绑定事件名变量      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[clickEventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increase<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; num &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> clickEventName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">,</span>        clickEventName<span class="token punctuation">,</span>        increase<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用 <code>@[clickEventName]</code> 提高效率，减少代码量</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-on:[handlerEventName] 简写模式      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@[clickEventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increase<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;num&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> clickEventName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        num<span class="token punctuation">,</span>        clickEventName<span class="token punctuation">,</span>        increase<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果一样。</p><h3 id="v-slot-slotName-具名插槽"><a href="#v-slot-slotName-具名插槽" class="headerlink" title="v-slot:[slotName] 具名插槽"></a>v-slot:[slotName] 具名插槽</h3><p>在 <code>src/views</code> 新建 <code>aaa.vue</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'child'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>src/views</code> 新建 <code>bbb.vue</code>，使用 <code>slot</code> 具名插槽为子组件占住位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>父级元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'parent'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面两个组件引入到 <code>src/views/DynamicArguments.vue</code> 中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-slot:[slotName] 具名插槽      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>child</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> parent <span class="token keyword">from</span> <span class="token string">'./bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./aaa'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      parent<span class="token punctuation">,</span>      child<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-40-59.png" alt="图片描述"></p><p>我们也可以使用动态变量来设置插槽名字。</p><p>使用 <code>ref</code> 定义一个响应式变量 <code>child</code>，然后通过 <code>[child]</code> 的方式来绑定插槽的名字。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      v-slot:[slotName] 具名插槽      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[child]</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> parent <span class="token keyword">from</span> <span class="token string">'./bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./aaa'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      parent<span class="token punctuation">,</span>      child<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        child<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果一样。</p><p>接下来我们通过使用 <code>#slotName</code> 的方式给插槽进行标志。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      #[slotName] 简写模式      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[child]</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> parent <span class="token keyword">from</span> <span class="token string">'./bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./aaa'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      parent<span class="token punctuation">,</span>      child<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        child<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-42-14.png" alt="图片描述"></p><h2 id="4、动态指令计算"><a href="#4、动态指令计算" class="headerlink" title="4、动态指令计算"></a>4、动态指令计算</h2><p>字符串可以互相拼接，数值可以相加，相乘等操作。动态指令也能做这些操作。在 <code>javascript</code> 中，<code>key1</code> 跟 <code>key2</code> 可以拼接成 <code>key3</code>，同样可以使用 <code>[key1+key2]</code> 动态计算。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> key1 <span class="token operator">=</span> <span class="token string">'nam'</span><span class="token punctuation">;</span><span class="token keyword">let</span> key2 <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span><span class="token keyword">let</span> key3 <span class="token operator">=</span> key1 <span class="token operator">+</span> key2<span class="token punctuation">;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>key1 <span class="token operator">+</span> key2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Ken'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>key3<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Ken'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-42-53.png" alt="图片描述"></p><p>在 <code>vue</code> 中，是不是可以这样写呢？</p><p>我们先来定义两个变量，<code>key1</code>，<code>key2</code>，然后使用 <code>[key1+key2]</code> 来拼接字符串变量。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-arguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>      动态指令计算      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[key1</span> <span class="token attr-name">+</span> <span class="token attr-name">key2]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aaa.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DynamicArguments'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> key1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'nam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> key2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        key1<span class="token punctuation">,</span>        key2<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 npm run serve 之后，发现控制台报错了，说明 Vue 不能这样使用。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>学习了以下知识点：</p><ul><li>v-bind 动态指令</li><li>v-on 动态指令</li><li>v-slot 动态指令</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-玩转插槽新特性</title>
      <link href="/2022/04/21/3-wan-zhuan-cha-cao-xin-te-xing/"/>
      <url>/2022/04/21/3-wan-zhuan-cha-cao-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="3-玩转插槽新特性"><a href="#3-玩转插槽新特性" class="headerlink" title="3-玩转插槽新特性"></a>3-玩转插槽新特性</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>普通插槽</li><li>具名插槽</li><li>作用域插槽</li><li>插槽简写语法</li></ul><h2 id="2、插槽介绍"><a href="#2、插槽介绍" class="headerlink" title="2、插槽介绍"></a>2、插槽介绍</h2><p>为什么要有插槽语法呢？</p><p>我们知道前端组件化开发，要达到组件的高效复用，插槽是必不可少的开发利器。</p><p>插槽可以减少我们在开发过程中 if 语句的频繁使用，提高代码的可读性。</p><p>举个例子：比如一个按钮，原生按钮的样式实在太丑了，要求可以自定义按钮样式等内容。我们就可以使用插槽来自定义内容，避免写了很多种按钮组件。把不同的部分抽离出来，让用户自定义想要的内容。</p><p>当然，插槽也不是用得越多越好，插槽只是组件最大化利用的一种手段，而不是替代组件的方案。应该看应用场景而定。</p><h3 id="普通插槽"><a href="#普通插槽" class="headerlink" title="普通插槽"></a>普通插槽</h3><p>普通插槽，默认名字为 <code>default</code>，就是在子组件中使用 <code>&lt;slot&gt;</code> 标签来占用位置。</p><p>接下来举一个简单的例子，在 <code>src/views</code> 新建一个 <code>Slots.vue</code>。</p><h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>插槽默认内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'slots'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><p>在 <code>src/views</code> 新建父组件 <code>Parent.vue</code>，引入子组件 <code>Slots.vue</code>，在 <code>components</code> 中注册组件之后才能以标签的形式使用。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>父级元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slots</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>插槽内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>插槽内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slots</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> slots <span class="token keyword">from</span> <span class="token string">'./Slots'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'parent'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      slots<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 <code>router/index.js</code> 引入父组件，配置路由：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/parent'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'parent'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Parent.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>App.vue</code> 中添加一行路由跳转代码。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>slots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行效果，可以看到插槽的内容被两个 <code>p</code> 标签替换了。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-46-19.png" alt="图片描述"></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>当我们需要知道哪些东西明确地放在哪个位置，具名插槽就派上用场了。</p><p>例如一个页面有头部区块内容，中间页面内容，页脚底部内容，我们就可以定义一个大的框架，使用三个具名插槽来占用位置，将头部区块抽成一个组件，中间内容抽成一个组件，页脚也抽成一个组件，这样更加能够提高代码可读性，也能减少每个组件文件的代码量。</p><p>来实现简单的案例。</p><h4 id="头部组件-HeaderSlot-vue"><a href="#头部组件-HeaderSlot-vue" class="headerlink" title="头部组件 HeaderSlot.vue"></a>头部组件 HeaderSlot.vue</h4><p>在 <code>src/views</code> 目录新建 <code>HeaderSlot.vue</code>，写下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>头部组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'headerSlot'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中间内容组件-BodySlot-vue"><a href="#中间内容组件-BodySlot-vue" class="headerlink" title="中间内容组件 BodySlot.vue"></a>中间内容组件 BodySlot.vue</h4><p>在 <code>src/views</code> 目录新建 <code>BodySlot.vue</code>，写下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bodySlot'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="页脚组件-FooterSlot-vue"><a href="#页脚组件-FooterSlot-vue" class="headerlink" title="页脚组件 FooterSlot.vue"></a>页脚组件 FooterSlot.vue</h4><p>在 <code>src/views</code> 目录新建 <code>FooterSlot.vue</code>，写下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>页脚组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'footerSlot'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="框架组件-Layout-vue"><a href="#框架组件-Layout-vue" class="headerlink" title="框架组件 Layout.vue"></a>框架组件 Layout.vue</h4><p>在 <code>src/views</code> 新建 <code>Layout.vue</code>，使用三个具名插槽占住位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"layout"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SlotName-vue"><a href="#SlotName-vue" class="headerlink" title="SlotName.vue"></a>SlotName.vue</h4><p>在 <code>src/views</code> 新建 <code>SlotName.vue</code>。</p><p>我们需要引入框架组件 <code>Layout.vue</code>，头部组件 ，页脚组件，中间内容组件，使用模板插槽来指定组件放在哪个位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--头部插槽放置的内容的区块--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--中间内容放置的区块--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--页脚内容放置的区块--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> layout <span class="token keyword">from</span> <span class="token string">"./Layout"</span><span class="token punctuation">;</span><span class="token keyword">import</span> headerSlot <span class="token keyword">from</span> <span class="token string">"./HeaderSlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> bodySlot <span class="token keyword">from</span> <span class="token string">"./BodySlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> footerSlot <span class="token keyword">from</span> <span class="token string">"./FooterSlot"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"slotName"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    layout<span class="token punctuation">,</span>    headerSlot<span class="token punctuation">,</span>    bodySlot<span class="token punctuation">,</span>    footerSlot<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加路由配置和路由跳转，运行效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-47-01.png" alt="image-20220415111358732"></p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>插槽能携带数据，在插槽内部可以使用绑定的数据。</p><h4 id="子组件-Child-vue"><a href="#子组件-Child-vue" class="headerlink" title="子组件 Child.vue"></a>子组件 Child.vue</h4><p>在 <code>src/views</code> 目录下新建 <code>Child.vue</code>。</p><p>然后在 data() 函数里定义 <code>data</code> 数据，将定义好的数据传递到插槽中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"child"</span><span class="token punctuation">,</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"小龙女"</span><span class="token punctuation">,</span> <span class="token string">"杨过"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父级组件-SlotScopes-vue"><a href="#父级组件-SlotScopes-vue" class="headerlink" title="父级组件 SlotScopes.vue"></a>父级组件 SlotScopes.vue</h4><p>在 <code>src/views</code> 目录下新建 <code>SlotScopes.vue</code>，将 <code>Child.vue</code> 引入进来，在 <code>components</code> 注册组件，父级组件使用 <code>child</code> 组件时，默认会把数据传递进来，通过 <code>slot-scope</code> 指令接收参数 <code>res</code>，这样我们就能使用绑定到插槽的数据了。</p><ul><li>第一种，使用 <code>v-for</code> 指令 和 <code>li</code> 标签渲染数据。</li><li>第二种，直接展示数据 <code>res.data</code>。</li><li>第三种，不使用其提供的数据，作用域插槽则变成匿名插槽。</li></ul><p>在 <strong>vue2.6及已上</strong> 版本，<strong>slot 和slot-scope</strong> 已经开始 <strong>废弃</strong>， 有了新的替代: <strong>v-slot</strong>，v-slot只能用在template 上和组件标签上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--用列表展示数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>res<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`key$&#123;index&#125;`<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in res.data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; item &#125;&#125;          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--直接显示数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>res<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; res.data &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--不使用其提供的数据，作用域插槽退变成匿名插槽--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"slotScopes"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    child<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">ul</span> <span class="token punctuation">&#123;</span>  <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加路由配置和路由跳转，运行效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-47-47.png" alt="图片描述"></p><h3 id="解构插槽"><a href="#解构插槽" class="headerlink" title="解构插槽"></a>解构插槽</h3><p>我们将上面的例子进一步改造。</p><h4 id="Child-vue"><a href="#Child-vue" class="headerlink" title="Child.vue"></a>Child.vue</h4><p>修改 <code>Child.vue</code>在 data 函数中定义 <code>obj</code> 数据，将 <code>obj</code> 数据绑定到 <code>slot</code> 标签上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;slot :data="data">&lt;/slot> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"child"</span><span class="token punctuation">,</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// data: ["张三", "张三丰", "小龙女", "杨过"],</span>      <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Parent-vue"><a href="#Parent-vue" class="headerlink" title="Parent.vue"></a>Parent.vue</h4><p>修改 <code>Parent.vue</code>，引入 <code>Child.vue</code>，组件注册完之后使用 <code>v-slot</code> 来解构 <code>obj</code> 。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- &lt;div class="parent">    &lt;h1>父级元素&lt;/h1>    &lt;slots>      &lt;p>插槽内容1&lt;/p>      &lt;p>插槽内容2&lt;/p>    &lt;/slots>  &lt;/div> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; obj &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          &#123;&#123; obj &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// import slots from "./Slots";</span><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"parent"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    child<span class="token punctuation">,</span>    <span class="token comment">// slots,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-48-36.png" alt="图片描述"></p><h2 id="3、插槽简写语法"><a href="#3、插槽简写语法" class="headerlink" title="3、插槽简写语法"></a>3、插槽简写语法</h2><p>在 Vue3 中，对插槽语法进行了升级，新增了 <code>#</code> 属性来替代 <code>v-slot</code> ，插槽简写模式是 <code>#slotName</code>。</p><h3 id="插槽简写"><a href="#插槽简写" class="headerlink" title="插槽简写"></a>插槽简写</h3><p>改造一下上面讲到的具名插槽，可以将 <code>v-slot:header</code> 改成 <code>#header</code>，将 <code>v-slot:body</code> 改成 <code>#body</code>，将 <code>v-slot:footer</code> 改成 <code>#footer</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-49-20.png"></p><p>运行代码，发现没有什么区别。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-50-27.png" alt="图片描述"></p><h3 id="动态变量定义插槽名字"><a href="#动态变量定义插槽名字" class="headerlink" title="动态变量定义插槽名字"></a>动态变量定义插槽名字</h3><p>我们可以使用动态变量的方式来定义插槽的名字 <code>#[slotNameVar]</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--头部插槽放置的内容的区块--></span>      <span class="token comment">&lt;!-- &lt;template v-slot:header> --></span>      <span class="token comment">&lt;!-- &lt;template #header> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[header]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--中间内容放置的区块--></span>      <span class="token comment">&lt;!-- &lt;template v-slot:body> --></span>      <span class="token comment">&lt;!-- &lt;template #body> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[body]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--页脚内容放置的区块--></span>      <span class="token comment">&lt;!-- &lt;template v-slot:footer> --></span>      <span class="token comment">&lt;!-- &lt;template #footer> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[footer]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> layout <span class="token keyword">from</span> <span class="token string">"./Layout"</span><span class="token punctuation">;</span><span class="token keyword">import</span> headerSlot <span class="token keyword">from</span> <span class="token string">"./HeaderSlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> bodySlot <span class="token keyword">from</span> <span class="token string">"./BodySlot"</span><span class="token punctuation">;</span><span class="token keyword">import</span> footerSlot <span class="token keyword">from</span> <span class="token string">"./FooterSlot"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"slotName"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    layout<span class="token punctuation">,</span>    headerSlot<span class="token punctuation">,</span>    bodySlot<span class="token punctuation">,</span>    footerSlot<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">"footer"</span><span class="token punctuation">,</span>      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">"body"</span><span class="token punctuation">,</span>      <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token string">"header"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_16-51-09.png" alt="图片描述"></p><p>也可以使用 <code>v-slot:[slotNameVar]</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ht</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[header]</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[body]</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[footer]</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ht</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> layout <span class="token keyword">from</span> <span class="token string">"./Layout"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> headerSlot <span class="token keyword">from</span> <span class="token string">"./HeaderSlot"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> bodySlot <span class="token keyword">from</span> <span class="token string">"./BodySlot"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> footerSlot <span class="token keyword">from</span> <span class="token string">"./FooterSlot"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'slotName'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      layout<span class="token punctuation">,</span>   headerSlot<span class="token punctuation">,</span>    bodySlot<span class="token punctuation">,</span>     footerSlot<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">'footer'</span><span class="token punctuation">,</span>        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'body'</span><span class="token punctuation">,</span>        <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token string">'header'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果一样。</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><ul><li>使用 <code>v-slot:slotName</code> 来定义<code>具名插槽</code>，让组件更加具有复用效果。</li><li>知道 <code>vue3.0</code> 移除了 <code>slot-scope</code> 属性，统一使用 <code>v-slot</code>。</li><li>使用插槽简写语法。</li><li>使用动态变量来定义插槽名字 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-体验组合式 API</title>
      <link href="/2022/04/21/2-ti-yan-zu-he-shi-api/"/>
      <url>/2022/04/21/2-ti-yan-zu-he-shi-api/</url>
      
        <content type="html"><![CDATA[<h1 id="体验组合式-API"><a href="#体验组合式-API" class="headerlink" title="体验组合式 API"></a>体验组合式 API</h1><h2 id="1、知识点"><a href="#1、知识点" class="headerlink" title="1、知识点"></a>1、知识点</h2><ul><li>setup</li><li>reactive</li><li>computed</li><li>toRefs</li><li>watch</li><li>watchEffect</li><li>readonly</li></ul><h2 id="2、简单例子"><a href="#2、简单例子" class="headerlink" title="2、简单例子"></a>2、简单例子</h2><p>组合 API 是 Vue3 中最常用特色语法。这是一种全新的逻辑重用和代码组织方法。</p><p>我们使用所谓的选项式 API 构建组件。如 <code>data</code>，<code>methods</code>，<code>computed</code> 等这种方法缺点已成事实，因为这些 JavaScript 代码本身不起作用。需要确切地知道模板中可以访问哪些属性以及 <code>this</code> 关键字的动作。Vue 编译器需要将此属性转换为工作代码。因此，我们无法从自动建议或类型检查中受益。</p><p>组合式 API 旨在通过将组件属性中当前可用的机制公开为 JavaScript 函数来解决此问题。Vue 核心团队将组合式 API 描述为“一组基于功能的附加 API，它们允许灵活地组成组件逻辑”。用组合式 API 编写的代码更具可读性，这使它更易于阅读和学习。</p><p>来看一个使用新的组合式 API 理解其工作原理的组件的简单示例。</p><p>新建 <code>src/components/counter/Counter.vue</code> </p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click&#x3D;&quot;increment&quot;&gt;    Count is: &#123;&#123; count &#125;&#125;, double is: &#123;&#123; double &#125;&#125; Name is: &#123;&#123; reonly.name &#125;&#125;  &lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive, computed, toRefs, watch, watchEffect, readonly &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const state &#x3D; reactive(&#123;      count: 0,      double: computed(() &#x3D;&gt; state.count * 2),    &#125;);    const reonly &#x3D; readonly(&#123;      name: &quot;InfinityX7&quot;,    &#125;);    function increment() &#123;      state.count++;    &#125;    watch(      () &#x3D;&gt; state.count,      (newVal, oldVal) &#x3D;&gt; &#123;        console.log(&quot;Counter is change &#x3D;&#x3D;&#x3D;&gt;&quot;, oldVal, newVal);      &#125;    );    watchEffect(() &#x3D;&gt; &#123;      console.log(&quot;watchEffect&quot;);      reonly.name &#x3D; &quot;开到荼蘼&quot;;    &#125;)    return &#123;      ...toRefs(state),      reonly,      increment,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/components/counter/index.js</code> 导出组件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">'./src/Counter.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 新建<code>src/views/TestCounter.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;test-counter&quot;&gt;    &lt;Counter &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import Counter from &quot;..&#x2F;components&#x2F;couter&#x2F;Couter.vue&quot;;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;TestCounter&quot;,  components: &#123;    Counter,  &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>src/router/index.js</code> 配置路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>   <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/counter"</span><span class="token punctuation">,</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Counter"</span><span class="token punctuation">,</span>   <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/TestCounter.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>App.vue</code>增加<code>/counter</code>导航跳转，运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/2022-04-14%2009.40.02.gif" alt="GIF描述"></p><h2 id="3、setup"><a href="#3、setup" class="headerlink" title="3、setup"></a>3、setup</h2><p>简而言之，它只是一个将属性和函数返回到模板使用的入口。</p><p>我们在这里声明所有响应式属性，计算属性，观察者和生命周期挂钩，然后将它们返回，以便可以在模板中使用它们。</p><p>所以<strong>没有从 <code>setup</code> 函数返回的内容将在模板中不可用</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、reactive-普通对象响应式代理"><a href="#4、reactive-普通对象响应式代理" class="headerlink" title="4、reactive 普通对象响应式代理"></a>4、reactive 普通对象响应式代理</h2><p>在 <code>setup</code> 函数里面， <code>reactive</code> 它主要是处理你的对象，让它经过 <code>Proxy</code> 的加工变为一个响应式的对象，类似于 <code>Vue2.0</code> 版本的 <code>data</code> 属性。</p><p>需要注意的是加工后的对象跟原对象是不相等的，并且加工后的对象属于<strong>深度克隆的对象</strong>。响应式转换是“深层的”：会影响对象内部所有嵌套的属性。基于 ES2015 的 Proxy 实现，返回的代理对象<strong>不等于</strong>原始对象。建议仅使用代理对象而避免依赖原始对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token literal-property property">double</span><span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、computed-计算属性"><a href="#5、computed-计算属性" class="headerlink" title="5、computed 计算属性"></a>5、computed 计算属性</h2><p>根据以上内容，我们声明了 <code>count</code> 用 <code>reatcive</code> 函数调用的响应式。它可以包装任何原生语法或对象并返回其响应式引用。传入一个 getter 函数，返回一个默认不可手动修改的 ref 对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、toRefs"><a href="#6、toRefs" class="headerlink" title="6、toRefs"></a>6、toRefs</h2><p>可以看到我们上面用了很多的新属性，<code>toRefs</code> 函数可以将 <code>reactive()</code> 创建出来的响应式对象，转换为普通的对象，只不过这个对象上的每个属性节点，都是 <code>ref()</code> 类型的响应式数据，配合 <code>&#123;&#123;&#125;&#125;</code> 插值指令能完成数据的双向绑定，在开发中非常高效。其实就有点像 ES6 的对象解构。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>  reonly<span class="token punctuation">,</span>  increment<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拆分之后，我们可以写出类似这样的伪代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">,</span>  double<span class="token punctuation">,</span>  reonly<span class="token punctuation">,</span>  increament<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>count</code>，<code>double</code> 直接在 <code>html</code> 上使用了：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125; --></span>  Count is: &#123;&#123; count &#125;&#125;, double is: &#123;&#123; double &#125;&#125; Name is: &#123;&#123;reonly.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>无需使用如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125; Name is:  &#123;&#123;reonly.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以，这种开发方式就大大提高了开发效率了。</p><h2 id="7、watch-监听"><a href="#7、watch-监听" class="headerlink" title="7、watch 监听"></a>7、watch 监听</h2><p><code>watch()</code> 函数用来监视某些数据项的变化，从而触发某些特定的操作，使用之前还是需要按需导入，监听 <code>state.count</code> 的变化，然后触发回调函数里面的逻辑，也就是监听用户输入的检索值，然后触发回调函数的逻辑把 <code>state.count</code> 值打印到控制台上：</p><ul><li>第一个参数传入一个 getter 函数，获取 state.count 返回值。</li><li>监听 state.count 新旧值变化。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Counter is change ===>'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、watchEffect-立即执行监听"><a href="#8、watchEffect-立即执行监听" class="headerlink" title="8、watchEffect 立即执行监听"></a>8、watchEffect 立即执行监听</h2><p>这个属性有点像 <code>vue 2.x</code> 中的 <code>immediate: true</code> 这个立即执行属性。立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当 <code>watchEffect</code> 在组件的 <code>setup()</code> 函数或生命周期钩子被调用时，侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。</p><p>在一些情况下，也可以显式调用返回值以停止侦听：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、readonly-只读代理"><a href="#9、readonly-只读代理" class="headerlink" title="9、readonly 只读代理"></a>9、readonly 只读代理</h2><p>传入一个对象（响应式或普通）或 ref，返回一个原始对象的 <strong>只读</strong> 代理。一个只读的代理是“深层的”，对象内部任何嵌套的属性也都是只读的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> reonly <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Zhangsan'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们来修改 <code>reonly.name</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  reonly<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Lisi'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现 <code>reonly.name</code> 还是 <code>Zhangsan</code>，没有变化。</p><h2 id="10、总结"><a href="#10、总结" class="headerlink" title="10、总结"></a>10、总结</h2><p>我们通过一个简单的例子对 <code>Vue 3</code> 组合式 <code>API</code> 有了一个初步的了解：</p><ul><li>reactive 对普通对象进行响应式代理。</li><li>setup 类似 <code>created</code> 生命周期。</li><li>computed 计算属性。</li><li>watch 属性值监听。</li><li>watchEffect 立即执行监听。</li><li>readonly 对值，对象进行只读代理。</li><li>toRefs 可对 reactive 申明的对象进行解构，提高开发效率。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-玩转 Vue3 响应性</title>
      <link href="/2022/04/21/1-wan-zhuan-vue3-xiang-ying-xing/"/>
      <url>/2022/04/21/1-wan-zhuan-vue3-xiang-ying-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转Vue3响应性"><a href="#玩转Vue3响应性" class="headerlink" title="玩转Vue3响应性"></a>玩转Vue3响应性</h1><h2 id="1、内容介绍"><a href="#1、内容介绍" class="headerlink" title="1、内容介绍"></a>1、内容介绍</h2><p>使用 <code>Vue-cli</code> 脚手架搭建 <code>Vue3</code> 项目，实现 <code>TodoList</code> 小案例，探索 <code>Vue3.0</code> 响应式特性。</p><p>脚手架相关请参考 <a href="https://cli.vuejs.org/zh/">Vue CLI</a> 文档</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ul><li>环境准备</li><li>搭建 Vue 3 项目</li><li>升级代码版本</li><li>TodoList 案例</li></ul><h2 id="2、Vue-介绍"><a href="#2、Vue-介绍" class="headerlink" title="2、Vue 介绍"></a>2、Vue 介绍</h2><p>Vue 是由尤雨溪大神在 Google 工作时，受到其他框架设计思想的影响，开发出来的一套轻量级的前端框架，目前已成为全世界三大前端框架之一，是国内首选的前端框架。已有 15 万人在 Github 上为 Vue 点赞，可以在 <a href="https://v3.cn.vuejs.org/">Vue.js 3.0 文档</a> 中看到最新版的 <code>Vue3</code> 文档。</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>通过脚手架的方式安装最新版本的 Vue。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i -g @vue&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用以下命令可以查看是否升级到最新版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、搭建-Vue3-项目"><a href="#3、搭建-Vue3-项目" class="headerlink" title="3、搭建 Vue3 项目"></a>3、搭建 Vue3 项目</h2><p>输入以下命令创建一个名为 <code>vue-code</code> 的项目。</p><pre class="line-numbers language-bssh" data-language="bssh"><code class="language-bssh">vue create vue-code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一步：按键盘下箭头键，选择第三项 <strong>Manually select features</strong>，回车进入第二步</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-06-44.png" alt="图片描述"></p><p>第二步：按键盘空格键选择要安装的依赖，如下图所示，然后回车进入第三步。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-07-30.png" alt="图片描述"></p><p>选中 <code>3.x </code></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-08-27.png" alt="图片描述"></p><p>第三步：配置文件</p><ul><li><p>Use history mode for router?  输入 <code>  y</code>，回车。</p></li><li><p>Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported</p></li></ul><p>按下键盘下箭头，选中 <code>Sass/SCSS (with dart-sass)</code>。</p><ul><li>Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</li></ul><p>选中 <code>In dedicated config files</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-09-12.png" alt="图片描述"></p><ul><li><p>Save this as a preset for future projects? (y/N)   ：输入 <code>y</code>。</p></li><li><p>Save preset as：不用输入，直接回车。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-10-01.png" alt="图片描述"></p><ul><li>然后开始安装依赖，安装成功后：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-10-01.png" alt="图片描述"></p><p>在 项目根目录下的 <code>vue.config.js</code>文件中写入以下内容。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@vue/cli-service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成配置后，使用以下命令运行当前项目。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-11-18.png" alt="图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-11-57.png" alt="图片描述"></p><h2 id="4、TodoList-案例"><a href="#4、TodoList-案例" class="headerlink" title="4、TodoList 案例"></a>4、TodoList 案例</h2><p>我们要实现一个简单的 TodoList ：姓名、性别清单列表，目的是了解 Vue3 的 reactive 响应式与 Vue2.x 的 reactive 响应式的区别。</p><p>首先在 项目的 src/views 目录下新建一个 TodoList.vue 文件。我们可以输入性别和姓名，生成姓名性别列表，增删改姓名和性别。</p><h4 id="新建模板"><a href="#新建模板" class="headerlink" title="新建模板"></a>新建模板</h4><p>首先分析需求：用户在输入姓名，性别之后，生成一个列表，并且可以对这些列表进行<strong>增删改</strong>。其中 name 来保存用户输入的姓名，gender 来保存用户输入的性别，list 来保存用户添加之后的数据，index 来保存用户<strong>编辑</strong>，<strong>更新</strong>的姓名清单的下标。</p><p>在 <code>TodoList.vue</code> 中写入以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>todoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓名：&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>性别：&#123;&#123; item.gender &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后给 <code>TodoList</code> 加上样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style lang="scss" scoped>.todo-list</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token selector">.header</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #3e3e3e<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #9ebabb<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> 8px solid #629a9c<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #FFF<span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>      <span class="token selector">.btn-div</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">span</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">input,button</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着打开 src/router/index.js 来配置下 TodoList 路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HomeView <span class="token keyword">from</span> <span class="token string">"../views/HomeView.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> HomeView<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"about"</span><span class="token punctuation">,</span>    <span class="token comment">// route level code-splitting</span>    <span class="token comment">// this generates a separate chunk (about.[hash].js) for this route</span>    <span class="token comment">// which is lazy-loaded when the route is visited.</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">"../views/AboutView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/todoList"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/TodoList.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在 src/App.vue 通过 router-link 标签来指定跳转页面：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/todoList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>todoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后运行以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到界面如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-13-06.png" alt="图片描述"></p><h4 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h4><p>接下来需要让用户点击<strong>添加按钮</strong>，输入姓名、性别。</p><blockquote><p>注意：如果输入框有一个为空，就不让用户进行<strong>添加</strong>处理。</p><p>添加成功之后，需要把 <code>name</code>，<code>gender</code> 上次保存的数据清空，以免重复添加。</p></blockquote><p>使用数组的 push 方法来添加数据。在 data() 函数的下面添加一个 methods 对象，将方法 add() 写在 methods 里面，代码如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h4><p>点击清单中的 <strong>编辑按钮</strong> 之后，数据会同步到两个输入框中。数据修改完成之后，点击 <strong>更新按钮</strong> 会对数据进行修改保存。</p><p>接下来我们在 methods 中添加 edit 方法，添加如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> item<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 edit 方法中我们通过下标拿到当前用户点击 <strong>编辑按钮</strong> 的数据，分别赋值给当前姓名变量和当前性别变量，这样数据就同步到输入框中，就可以对数据进行修改了。</p><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><p>编辑完成之后，我们需要把数据更新到列表中，需要注意的是：</p><ul><li>如果没有输入内容，不让用户更新，避免更新完之后没有数据。</li><li>更新完之后，需要清空输入框，避免重复更新。</li><li>同时把当前索引置空，将 <code>更新按钮</code> 变为 <code>添加按钮</code>。</li></ul><p>在 methods 添加 update 方法，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'todoList'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> item<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code>，我们可以对每条清单点击“编辑”，修改后点击“更新”即可。</p><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>对于不需要的清单列表，只要拿到当前列表的索引，即可对列表进行删除操作。</p><p>添加 del 函数代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>点击删除之后，清单就被删除了。</p><h4 id="清空操作"><a href="#清空操作" class="headerlink" title="清空操作"></a>清空操作</h4><p>如果用户不需要之前添加或者编辑过的数据，可以点击 <code>清空按钮</code> 将数据全部清空。</p><p>代码如下所示：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">// this.list = []</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code>，先添加几条清单，然后再点击 <code>清空按钮</code>，即可清空数据。</p><h4 id="值得关注的点"><a href="#值得关注的点" class="headerlink" title="值得关注的点"></a>值得关注的点</h4><ul><li>在 Vue3 中，我们可以直接给对象赋值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>直接修改数组元素</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Zhangsan'</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置数组 <code>length</code> 属性</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 <code>Map/Set</code></li></ul><p>举个例子，在 data 中使用集合初始化三个元素，对列表进行增删清空操作，代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>移除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'前端工程师'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'Input a new item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newItem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、升级-Todolist-代码"><a href="#5、升级-Todolist-代码" class="headerlink" title="5、升级 Todolist 代码"></a>5、升级 Todolist 代码</h2><p>本机将学几个 <code>composition-api</code>。</p><ul><li><code>ref</code> 接受一个内部值并返回一个响应式且可变的对象，可以定义单个变量，例如数字类型，字符串类型，布尔类型，数组类型。</li><li><code>reactive</code> 返回对象的响应式副本对象，可以定义多个变量，例如对象。</li><li><code>setup</code> 内部启动函数，有点类似 Vue2.x 的 data，返回一个对象。</li></ul><h4 id="HTML-代码"><a href="#HTML-代码" class="headerlink" title="HTML 代码"></a>HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indexObj.index === null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓名：&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>性别：&#123;&#123; item.gender &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据变量定义"><a href="#数据变量定义" class="headerlink" title="数据变量定义"></a>数据变量定义</h4><p>在 Vue3中，所有的变量定义在 setup 函数里面，我们需要引入 <code>ref</code>，<code>reactive</code> 来定义变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>ref</code> 来定义列表，姓名，性别三个简单变量，用 <code>reactive</code> 来定义索引对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义数组</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义 name</span>    <span class="token keyword">let</span> gender <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义 gender</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义对象</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加操作-1"><a href="#添加操作-1" class="headerlink" title="添加操作"></a>添加操作</h4><p>首先在 setup 函数里定义 add 添加函数，来处理用户的添加操作。</p><p>其次在变量赋值的时，需要访问变量的 <code>value</code> 属性。</p><p>最后将 add 方法返回给模板 <code>todoList.vue</code> 中的按钮使用，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gender <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>sex<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj<span class="token punctuation">,</span>      add<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code> ，效果：</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/Snipaste_2022-04-21_19-14-05.png" alt="图片描述"></p><h4 id="编辑操作-1"><a href="#编辑操作-1" class="headerlink" title="编辑操作"></a>编辑操作</h4><p>我们需要在 setup 函数中定义 edit 函数</p><ul><li>获取索引</li><li>保存姓名</li><li>保存性别</li></ul><p>具体代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> gender<span class="token punctuation">.</span>value      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token parameter">index</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj<span class="token punctuation">,</span>      add<span class="token punctuation">,</span>      edit    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新操作-1"><a href="#更新操作-1" class="headerlink" title="更新操作"></a>更新操作</h4><p>在 setup 函数定义 update 方法，需要对数据进行非空判断。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h4><p>我们在 setup 函数中定义 del 方法。</p><p><strong>删除时</strong></p><p>需要拿到当前点击所在列的索引，对列表进行删除操作。</p><p><strong>删除之后</strong></p><p>也需要将索引，姓名，性别置为置空。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清空操作-1"><a href="#清空操作-1" class="headerlink" title="清空操作"></a>清空操作</h4><p>将 clear 函数定义在 setup 中，最终暴露出去给模板使用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h4><p>实现的效果跟未升级之前的代码效果是一样的：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- &lt;button @click="add">添加&lt;/button>    &lt;button @click="update">更新&lt;/button> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indexObj.index === null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓名：&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>性别：&#123;&#123; item.gender &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"todoList"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gender <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> indexObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> item<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">[</span>indexObj<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      indexObj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>gender<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span> gender<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      gender<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">,</span>      name<span class="token punctuation">,</span>      gender<span class="token punctuation">,</span>      indexObj<span class="token punctuation">,</span>      add<span class="token punctuation">,</span>      edit<span class="token punctuation">,</span>      update<span class="token punctuation">,</span>      del<span class="token punctuation">,</span>      clear<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.todo-list</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token selector">.header</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #3e3e3e<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #9ebabb<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> 8px solid #629a9c<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>      <span class="token selector">.btn-div</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">span</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">input,button</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、非响应式"><a href="#6、非响应式" class="headerlink" title="6、非响应式"></a>6、非响应式</h2><p>在 Vue3 还提供了一些 <code>API</code> 专门处理非响应性的场景。</p><p>例如：我们在 <code>Vue</code> 组件中一次性消耗大量的数据，如果这些数据只是展示，那么我们是不应该让这些数据具有响应特性的，我们都知道在 Vue2.x 中，我们通常会使用以下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> Ken <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 假如这里数组有很多数据，如果 vue 直接去遍历数据使其具有响应式特性，就会变得很慢</span><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所以我们通常会将数据冻结起来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h4><p>在 Vue3 中，提供了 <code>markRaw</code>，<code>readonly</code>，这两个 <code>API</code> 是用来防止数据被改变的，告诉响应式机制系统，无需跟踪监测属性以及其后代属性，会跳过数据跟踪，进一步更新数据都不会触发渲染。</p><p>新建 src/views/MarkRaw.vue</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    你好 &#123;&#123; obj.name &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不能修改数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> markRaw <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Vue'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Ken'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>npm run serve</code> 之后，效果如下：</p><p>看到打印出来的数据，被标志上了 <code>__v_skip:true</code> 属性。Vue3 就是通过这个属性来判断是否跳过当前值响应式特性的监测。</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/6227e3c0382af8edcda43bbd479c346e-0.gif" alt="图片描述"></p><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> readonly <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Vue'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Ken'</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行可以看到打印出来的数据被标记上了一个属性 <code>__v_readonly: Proxy</code>，表示仅仅被代理，不具有响应式特性</p><p><img src="https://cdn.jsdelivr.net/gh/mqxu/wiki-image@master/uPic/6805ff300117523bbc2ea16b0f97f342-0.gif" alt="图片描述"></p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p>学会如何搭建 Vue 3 项目，以及从 Vue 2 升级到 Vue3。</p><p>在 Vue3 中，可以使用：</p><ul><li>给对象赋值</li><li>给数组 <code>length</code> 属性设置</li><li>通过下标的方式对数组元素进行修改</li><li>操作 <code>Map/Set</code>，<code>ref</code> 定义响应式单个变量，<code>reactive</code> 定义响应式对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/04/18/hello/"/>
      <url>/2022/04/18/hello/</url>
      
        <content type="html"><![CDATA[<h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><blockquote><p>There is always a place, a person waiting for you to appear.</p></blockquote><p>总有那么一个地方，有那么一个人在等你出现。</p><p><img src="https://cdn.jsdelivr.net/gh/shiyouhan/img@master/uPic/0.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
